/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.commons.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UserTenantAssociation.Builder.class)
public final class UserTenantAssociation {
    private final String userId;

    private final String tenantId;

    private final Map<String, Object> profile;

    private final Map<String, Object> additionalProperties;

    private UserTenantAssociation(
            String userId, String tenantId, Map<String, Object> profile, Map<String, Object> additionalProperties) {
        this.userId = userId;
        this.tenantId = tenantId;
        this.profile = profile;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return User ID for the assocation between tenant and user
     */
    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("type")
    public String getType() {
        return "user";
    }

    /**
     * @return Tenant ID for the assocation between tenant and user
     */
    @JsonProperty("tenant_id")
    public String getTenantId() {
        return tenantId;
    }

    @JsonProperty("profile")
    public Map<String, Object> getProfile() {
        return profile;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserTenantAssociation && equalTo((UserTenantAssociation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserTenantAssociation other) {
        return userId.equals(other.userId) && tenantId.equals(other.tenantId) && profile.equals(other.profile);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.userId, this.tenantId, this.profile);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UserIdStage builder() {
        return new Builder();
    }

    public interface UserIdStage {
        TenantIdStage userId(String userId);

        Builder from(UserTenantAssociation other);
    }

    public interface TenantIdStage {
        _FinalStage tenantId(String tenantId);
    }

    public interface _FinalStage {
        UserTenantAssociation build();

        _FinalStage profile(Map<String, Object> profile);

        _FinalStage putAllProfile(Map<String, Object> profile);

        _FinalStage profile(String key, Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UserIdStage, TenantIdStage, _FinalStage {
        private String userId;

        private String tenantId;

        private Map<String, Object> profile = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UserTenantAssociation other) {
            userId(other.getUserId());
            tenantId(other.getTenantId());
            profile(other.getProfile());
            return this;
        }

        /**
         * <p>User ID for the assocation between tenant and user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("user_id")
        public TenantIdStage userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * <p>Tenant ID for the assocation between tenant and user</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("tenant_id")
        public _FinalStage tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        @java.lang.Override
        public _FinalStage profile(String key, Object value) {
            this.profile.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllProfile(Map<String, Object> profile) {
            this.profile.putAll(profile);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "profile", nulls = Nulls.SKIP)
        public _FinalStage profile(Map<String, Object> profile) {
            this.profile.clear();
            this.profile.putAll(profile);
            return this;
        }

        @java.lang.Override
        public UserTenantAssociation build() {
            return new UserTenantAssociation(userId, tenantId, profile, additionalProperties);
        }
    }
}
