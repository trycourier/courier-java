/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.commons.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = NotificationPreferenceDetails.Builder.class)
public final class NotificationPreferenceDetails {
    private final PreferenceStatus status;

    private final Optional<List<Rule>> rules;

    private final Optional<List<ChannelPreference>> channelPreferences;

    private final Map<String, Object> additionalProperties;

    private NotificationPreferenceDetails(
            PreferenceStatus status,
            Optional<List<Rule>> rules,
            Optional<List<ChannelPreference>> channelPreferences,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.rules = rules;
        this.channelPreferences = channelPreferences;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("status")
    public PreferenceStatus getStatus() {
        return status;
    }

    @JsonProperty("rules")
    public Optional<List<Rule>> getRules() {
        return rules;
    }

    @JsonProperty("channel_preferences")
    public Optional<List<ChannelPreference>> getChannelPreferences() {
        return channelPreferences;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationPreferenceDetails && equalTo((NotificationPreferenceDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationPreferenceDetails other) {
        return status.equals(other.status)
                && rules.equals(other.rules)
                && channelPreferences.equals(other.channelPreferences);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.status, this.rules, this.channelPreferences);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatusStage builder() {
        return new Builder();
    }

    public interface StatusStage {
        _FinalStage status(PreferenceStatus status);

        Builder from(NotificationPreferenceDetails other);
    }

    public interface _FinalStage {
        NotificationPreferenceDetails build();

        _FinalStage rules(Optional<List<Rule>> rules);

        _FinalStage rules(List<Rule> rules);

        _FinalStage channelPreferences(Optional<List<ChannelPreference>> channelPreferences);

        _FinalStage channelPreferences(List<ChannelPreference> channelPreferences);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StatusStage, _FinalStage {
        private PreferenceStatus status;

        private Optional<List<ChannelPreference>> channelPreferences = Optional.empty();

        private Optional<List<Rule>> rules = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(NotificationPreferenceDetails other) {
            status(other.getStatus());
            rules(other.getRules());
            channelPreferences(other.getChannelPreferences());
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public _FinalStage status(PreferenceStatus status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        public _FinalStage channelPreferences(List<ChannelPreference> channelPreferences) {
            this.channelPreferences = Optional.of(channelPreferences);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "channel_preferences", nulls = Nulls.SKIP)
        public _FinalStage channelPreferences(Optional<List<ChannelPreference>> channelPreferences) {
            this.channelPreferences = channelPreferences;
            return this;
        }

        @java.lang.Override
        public _FinalStage rules(List<Rule> rules) {
            this.rules = Optional.of(rules);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "rules", nulls = Nulls.SKIP)
        public _FinalStage rules(Optional<List<Rule>> rules) {
            this.rules = rules;
            return this;
        }

        @java.lang.Override
        public NotificationPreferenceDetails build() {
            return new NotificationPreferenceDetails(status, rules, channelPreferences, additionalProperties);
        }
    }
}
