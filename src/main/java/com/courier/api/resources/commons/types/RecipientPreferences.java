/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.commons.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = RecipientPreferences.Builder.class)
public final class RecipientPreferences {
    private final Optional<Map<String, NotificationPreferenceDetails>> categories;

    private final Optional<Map<String, NotificationPreferenceDetails>> notifications;

    private final Map<String, Object> additionalProperties;

    private RecipientPreferences(
            Optional<Map<String, NotificationPreferenceDetails>> categories,
            Optional<Map<String, NotificationPreferenceDetails>> notifications,
            Map<String, Object> additionalProperties) {
        this.categories = categories;
        this.notifications = notifications;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("categories")
    public Optional<Map<String, NotificationPreferenceDetails>> getCategories() {
        return categories;
    }

    @JsonProperty("notifications")
    public Optional<Map<String, NotificationPreferenceDetails>> getNotifications() {
        return notifications;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RecipientPreferences && equalTo((RecipientPreferences) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RecipientPreferences other) {
        return categories.equals(other.categories) && notifications.equals(other.notifications);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.categories, this.notifications);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, NotificationPreferenceDetails>> categories = Optional.empty();

        private Optional<Map<String, NotificationPreferenceDetails>> notifications = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RecipientPreferences other) {
            categories(other.getCategories());
            notifications(other.getNotifications());
            return this;
        }

        @JsonSetter(value = "categories", nulls = Nulls.SKIP)
        public Builder categories(Optional<Map<String, NotificationPreferenceDetails>> categories) {
            this.categories = categories;
            return this;
        }

        public Builder categories(Map<String, NotificationPreferenceDetails> categories) {
            this.categories = Optional.of(categories);
            return this;
        }

        @JsonSetter(value = "notifications", nulls = Nulls.SKIP)
        public Builder notifications(Optional<Map<String, NotificationPreferenceDetails>> notifications) {
            this.notifications = notifications;
            return this;
        }

        public Builder notifications(Map<String, NotificationPreferenceDetails> notifications) {
            this.notifications = Optional.of(notifications);
            return this;
        }

        public RecipientPreferences build() {
            return new RecipientPreferences(categories, notifications, additionalProperties);
        }
    }
}
