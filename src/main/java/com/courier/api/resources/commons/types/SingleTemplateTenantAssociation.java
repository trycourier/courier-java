/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.commons.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SingleTemplateTenantAssociation.Builder.class)
public final class SingleTemplateTenantAssociation
        implements ISingleTemplateTenantAssociation, IBaseTemplateTenantAssociation {
    private final TenantTemplateData data;

    private final String id;

    private final String createdAt;

    private final String updatedAt;

    private final String publishedAt;

    private final String version;

    private final Map<String, Object> additionalProperties;

    private SingleTemplateTenantAssociation(
            TenantTemplateData data,
            String id,
            String createdAt,
            String updatedAt,
            String publishedAt,
            String version,
            Map<String, Object> additionalProperties) {
        this.data = data;
        this.id = id;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.publishedAt = publishedAt;
        this.version = version;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("data")
    @java.lang.Override
    public TenantTemplateData getData() {
        return data;
    }

    /**
     * @return The template's id
     */
    @JsonProperty("id")
    @java.lang.Override
    public String getId() {
        return id;
    }

    /**
     * @return The timestamp at which the template was created
     */
    @JsonProperty("created_at")
    @java.lang.Override
    public String getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp at which the template was last updated
     */
    @JsonProperty("updated_at")
    @java.lang.Override
    public String getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The timestamp at which the template was published
     */
    @JsonProperty("published_at")
    @java.lang.Override
    public String getPublishedAt() {
        return publishedAt;
    }

    /**
     * @return The version of the template
     */
    @JsonProperty("version")
    @java.lang.Override
    public String getVersion() {
        return version;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SingleTemplateTenantAssociation && equalTo((SingleTemplateTenantAssociation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SingleTemplateTenantAssociation other) {
        return data.equals(other.data)
                && id.equals(other.id)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && publishedAt.equals(other.publishedAt)
                && version.equals(other.version);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.data, this.id, this.createdAt, this.updatedAt, this.publishedAt, this.version);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DataStage builder() {
        return new Builder();
    }

    public interface DataStage {
        IdStage data(TenantTemplateData data);

        Builder from(SingleTemplateTenantAssociation other);
    }

    public interface IdStage {
        CreatedAtStage id(String id);
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(String createdAt);
    }

    public interface UpdatedAtStage {
        PublishedAtStage updatedAt(String updatedAt);
    }

    public interface PublishedAtStage {
        VersionStage publishedAt(String publishedAt);
    }

    public interface VersionStage {
        _FinalStage version(String version);
    }

    public interface _FinalStage {
        SingleTemplateTenantAssociation build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements DataStage, IdStage, CreatedAtStage, UpdatedAtStage, PublishedAtStage, VersionStage, _FinalStage {
        private TenantTemplateData data;

        private String id;

        private String createdAt;

        private String updatedAt;

        private String publishedAt;

        private String version;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SingleTemplateTenantAssociation other) {
            data(other.getData());
            id(other.getId());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            publishedAt(other.getPublishedAt());
            version(other.getVersion());
            return this;
        }

        @java.lang.Override
        @JsonSetter("data")
        public IdStage data(TenantTemplateData data) {
            this.data = data;
            return this;
        }

        /**
         * <p>The template's id</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public CreatedAtStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>The timestamp at which the template was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("created_at")
        public UpdatedAtStage createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The timestamp at which the template was last updated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updated_at")
        public PublishedAtStage updatedAt(String updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The timestamp at which the template was published</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("published_at")
        public VersionStage publishedAt(String publishedAt) {
            this.publishedAt = publishedAt;
            return this;
        }

        /**
         * <p>The version of the template</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("version")
        public _FinalStage version(String version) {
            this.version = version;
            return this;
        }

        @java.lang.Override
        public SingleTemplateTenantAssociation build() {
            return new SingleTemplateTenantAssociation(
                    data, id, createdAt, updatedAt, publishedAt, version, additionalProperties);
        }
    }
}
