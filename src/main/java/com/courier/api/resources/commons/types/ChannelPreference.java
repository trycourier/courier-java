/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.commons.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ChannelPreference.Builder.class)
public final class ChannelPreference {
    private final ChannelClassification channel;

    private final Map<String, Object> additionalProperties;

    private ChannelPreference(ChannelClassification channel, Map<String, Object> additionalProperties) {
        this.channel = channel;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("channel")
    public ChannelClassification getChannel() {
        return channel;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChannelPreference && equalTo((ChannelPreference) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChannelPreference other) {
        return channel.equals(other.channel);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.channel);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ChannelStage builder() {
        return new Builder();
    }

    public interface ChannelStage {
        _FinalStage channel(ChannelClassification channel);

        Builder from(ChannelPreference other);
    }

    public interface _FinalStage {
        ChannelPreference build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ChannelStage, _FinalStage {
        private ChannelClassification channel;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ChannelPreference other) {
            channel(other.getChannel());
            return this;
        }

        @java.lang.Override
        @JsonSetter("channel")
        public _FinalStage channel(ChannelClassification channel) {
            this.channel = channel;
            return this;
        }

        @java.lang.Override
        public ChannelPreference build() {
            return new ChannelPreference(channel, additionalProperties);
        }
    }
}
