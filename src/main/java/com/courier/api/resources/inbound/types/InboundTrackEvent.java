/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.inbound.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InboundTrackEvent.Builder.class)
public final class InboundTrackEvent {
    private final String event;

    private final String messageId;

    private final Map<String, Object> properties;

    private final Optional<String> userId;

    private final Map<String, Object> additionalProperties;

    private InboundTrackEvent(
            String event,
            String messageId,
            Map<String, Object> properties,
            Optional<String> userId,
            Map<String, Object> additionalProperties) {
        this.event = event;
        this.messageId = messageId;
        this.properties = properties;
        this.userId = userId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A descriptive name of the event. This name will appear as a trigger in the Courier Automation Trigger node.
     */
    @JsonProperty("event")
    public String getEvent() {
        return event;
    }

    /**
     * @return A required unique identifier that will be used to de-duplicate requests. If not unique, will respond with 409 Conflict status
     */
    @JsonProperty("messageId")
    public String getMessageId() {
        return messageId;
    }

    @JsonProperty("properties")
    public Map<String, Object> getProperties() {
        return properties;
    }

    @JsonProperty("type")
    public String getType() {
        return "track";
    }

    /**
     * @return The user id assocatiated with the track
     */
    @JsonProperty("userId")
    public Optional<String> getUserId() {
        return userId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InboundTrackEvent && equalTo((InboundTrackEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InboundTrackEvent other) {
        return event.equals(other.event)
                && messageId.equals(other.messageId)
                && properties.equals(other.properties)
                && userId.equals(other.userId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.event, this.messageId, this.properties, this.userId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EventStage builder() {
        return new Builder();
    }

    public interface EventStage {
        /**
         * <p>A descriptive name of the event. This name will appear as a trigger in the Courier Automation Trigger node.</p>
         */
        MessageIdStage event(@NotNull String event);

        Builder from(InboundTrackEvent other);
    }

    public interface MessageIdStage {
        /**
         * <p>A required unique identifier that will be used to de-duplicate requests. If not unique, will respond with 409 Conflict status</p>
         */
        _FinalStage messageId(@NotNull String messageId);
    }

    public interface _FinalStage {
        InboundTrackEvent build();

        _FinalStage properties(Map<String, Object> properties);

        _FinalStage putAllProperties(Map<String, Object> properties);

        _FinalStage properties(String key, Object value);

        /**
         * <p>The user id assocatiated with the track</p>
         */
        _FinalStage userId(Optional<String> userId);

        _FinalStage userId(String userId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EventStage, MessageIdStage, _FinalStage {
        private String event;

        private String messageId;

        private Optional<String> userId = Optional.empty();

        private Map<String, Object> properties = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InboundTrackEvent other) {
            event(other.getEvent());
            messageId(other.getMessageId());
            properties(other.getProperties());
            userId(other.getUserId());
            return this;
        }

        /**
         * <p>A descriptive name of the event. This name will appear as a trigger in the Courier Automation Trigger node.</p>
         * <p>A descriptive name of the event. This name will appear as a trigger in the Courier Automation Trigger node.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("event")
        public MessageIdStage event(@NotNull String event) {
            this.event = Objects.requireNonNull(event, "event must not be null");
            return this;
        }

        /**
         * <p>A required unique identifier that will be used to de-duplicate requests. If not unique, will respond with 409 Conflict status</p>
         * <p>A required unique identifier that will be used to de-duplicate requests. If not unique, will respond with 409 Conflict status</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("messageId")
        public _FinalStage messageId(@NotNull String messageId) {
            this.messageId = Objects.requireNonNull(messageId, "messageId must not be null");
            return this;
        }

        /**
         * <p>The user id assocatiated with the track</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage userId(String userId) {
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * <p>The user id assocatiated with the track</p>
         */
        @java.lang.Override
        @JsonSetter(value = "userId", nulls = Nulls.SKIP)
        public _FinalStage userId(Optional<String> userId) {
            this.userId = userId;
            return this;
        }

        @java.lang.Override
        public _FinalStage properties(String key, Object value) {
            this.properties.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllProperties(Map<String, Object> properties) {
            if (properties != null) {
                this.properties.putAll(properties);
            }
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "properties", nulls = Nulls.SKIP)
        public _FinalStage properties(Map<String, Object> properties) {
            this.properties.clear();
            if (properties != null) {
                this.properties.putAll(properties);
            }
            return this;
        }

        @java.lang.Override
        public InboundTrackEvent build() {
            return new InboundTrackEvent(event, messageId, properties, userId, additionalProperties);
        }
    }
}
