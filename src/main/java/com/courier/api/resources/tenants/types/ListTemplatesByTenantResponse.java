/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.tenants.types;

import com.courier.api.core.ObjectMappers;
import com.courier.api.resources.commons.types.ListTemplateTenantAssociation;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListTemplatesByTenantResponse.Builder.class)
public final class ListTemplatesByTenantResponse {
    private final Optional<List<ListTemplateTenantAssociation>> items;

    private final boolean hasMore;

    private final String url;

    private final Optional<String> nextUrl;

    private final Optional<String> cursor;

    private final Map<String, Object> additionalProperties;

    private ListTemplatesByTenantResponse(
            Optional<List<ListTemplateTenantAssociation>> items,
            boolean hasMore,
            String url,
            Optional<String> nextUrl,
            Optional<String> cursor,
            Map<String, Object> additionalProperties) {
        this.items = items;
        this.hasMore = hasMore;
        this.url = url;
        this.nextUrl = nextUrl;
        this.cursor = cursor;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("items")
    public Optional<List<ListTemplateTenantAssociation>> getItems() {
        return items;
    }

    /**
     * @return Set to true when there are more pages that can be retrieved.
     */
    @JsonProperty("has_more")
    public boolean getHasMore() {
        return hasMore;
    }

    /**
     * @return A url that may be used to generate these results.
     */
    @JsonProperty("url")
    public String getUrl() {
        return url;
    }

    /**
     * @return A url that may be used to generate fetch the next set of results.
     * Defined only when <code>has_more</code> is set to true
     */
    @JsonProperty("next_url")
    public Optional<String> getNextUrl() {
        return nextUrl;
    }

    /**
     * @return A pointer to the next page of results. Defined
     * only when <code>has_more</code> is set to true
     */
    @JsonProperty("cursor")
    public Optional<String> getCursor() {
        return cursor;
    }

    /**
     * @return Always set to <code>list</code>. Represents the type of this object.
     */
    @JsonProperty("type")
    public String getType() {
        return "list";
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListTemplatesByTenantResponse && equalTo((ListTemplatesByTenantResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListTemplatesByTenantResponse other) {
        return items.equals(other.items)
                && hasMore == other.hasMore
                && url.equals(other.url)
                && nextUrl.equals(other.nextUrl)
                && cursor.equals(other.cursor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.items, this.hasMore, this.url, this.nextUrl, this.cursor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static HasMoreStage builder() {
        return new Builder();
    }

    public interface HasMoreStage {
        /**
         * <p>Set to true when there are more pages that can be retrieved.</p>
         */
        UrlStage hasMore(boolean hasMore);

        Builder from(ListTemplatesByTenantResponse other);
    }

    public interface UrlStage {
        /**
         * <p>A url that may be used to generate these results.</p>
         */
        _FinalStage url(@NotNull String url);
    }

    public interface _FinalStage {
        ListTemplatesByTenantResponse build();

        _FinalStage items(Optional<List<ListTemplateTenantAssociation>> items);

        _FinalStage items(List<ListTemplateTenantAssociation> items);

        /**
         * <p>A url that may be used to generate fetch the next set of results.
         * Defined only when <code>has_more</code> is set to true</p>
         */
        _FinalStage nextUrl(Optional<String> nextUrl);

        _FinalStage nextUrl(String nextUrl);

        /**
         * <p>A pointer to the next page of results. Defined
         * only when <code>has_more</code> is set to true</p>
         */
        _FinalStage cursor(Optional<String> cursor);

        _FinalStage cursor(String cursor);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements HasMoreStage, UrlStage, _FinalStage {
        private boolean hasMore;

        private String url;

        private Optional<String> cursor = Optional.empty();

        private Optional<String> nextUrl = Optional.empty();

        private Optional<List<ListTemplateTenantAssociation>> items = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ListTemplatesByTenantResponse other) {
            items(other.getItems());
            hasMore(other.getHasMore());
            url(other.getUrl());
            nextUrl(other.getNextUrl());
            cursor(other.getCursor());
            return this;
        }

        /**
         * <p>Set to true when there are more pages that can be retrieved.</p>
         * <p>Set to true when there are more pages that can be retrieved.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("has_more")
        public UrlStage hasMore(boolean hasMore) {
            this.hasMore = hasMore;
            return this;
        }

        /**
         * <p>A url that may be used to generate these results.</p>
         * <p>A url that may be used to generate these results.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("url")
        public _FinalStage url(@NotNull String url) {
            this.url = Objects.requireNonNull(url, "url must not be null");
            return this;
        }

        /**
         * <p>A pointer to the next page of results. Defined
         * only when <code>has_more</code> is set to true</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cursor(String cursor) {
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * <p>A pointer to the next page of results. Defined
         * only when <code>has_more</code> is set to true</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public _FinalStage cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        /**
         * <p>A url that may be used to generate fetch the next set of results.
         * Defined only when <code>has_more</code> is set to true</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage nextUrl(String nextUrl) {
            this.nextUrl = Optional.ofNullable(nextUrl);
            return this;
        }

        /**
         * <p>A url that may be used to generate fetch the next set of results.
         * Defined only when <code>has_more</code> is set to true</p>
         */
        @java.lang.Override
        @JsonSetter(value = "next_url", nulls = Nulls.SKIP)
        public _FinalStage nextUrl(Optional<String> nextUrl) {
            this.nextUrl = nextUrl;
            return this;
        }

        @java.lang.Override
        public _FinalStage items(List<ListTemplateTenantAssociation> items) {
            this.items = Optional.ofNullable(items);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "items", nulls = Nulls.SKIP)
        public _FinalStage items(Optional<List<ListTemplateTenantAssociation>> items) {
            this.items = items;
            return this;
        }

        @java.lang.Override
        public ListTemplatesByTenantResponse build() {
            return new ListTemplatesByTenantResponse(items, hasMore, url, nextUrl, cursor, additionalProperties);
        }
    }
}
