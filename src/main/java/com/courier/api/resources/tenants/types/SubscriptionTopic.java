/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.tenants.types;

import com.courier.api.core.ObjectMappers;
import com.courier.api.resources.commons.types.ChannelClassification;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SubscriptionTopic.Builder.class)
public final class SubscriptionTopic implements ISubscriptionTopicNew {
    private final SubscriptionTopicStatus status;

    private final Optional<Boolean> hasCustomRouting;

    private final Optional<List<ChannelClassification>> customRouting;

    private final String id;

    private final Map<String, Object> additionalProperties;

    private SubscriptionTopic(
            SubscriptionTopicStatus status,
            Optional<Boolean> hasCustomRouting,
            Optional<List<ChannelClassification>> customRouting,
            String id,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.hasCustomRouting = hasCustomRouting;
        this.customRouting = customRouting;
        this.id = id;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("status")
    @java.lang.Override
    public SubscriptionTopicStatus getStatus() {
        return status;
    }

    /**
     * @return Override channel routing with custom preferences. This will override any template prefernces that are set, but a user can still customize their preferences
     */
    @JsonProperty("has_custom_routing")
    @java.lang.Override
    public Optional<Boolean> getHasCustomRouting() {
        return hasCustomRouting;
    }

    /**
     * @return The default channels to send to this tenant when has_custom_routing is enabled
     */
    @JsonProperty("custom_routing")
    @java.lang.Override
    public Optional<List<ChannelClassification>> getCustomRouting() {
        return customRouting;
    }

    /**
     * @return Topic ID
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SubscriptionTopic && equalTo((SubscriptionTopic) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SubscriptionTopic other) {
        return status.equals(other.status)
                && hasCustomRouting.equals(other.hasCustomRouting)
                && customRouting.equals(other.customRouting)
                && id.equals(other.id);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.status, this.hasCustomRouting, this.customRouting, this.id);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatusStage builder() {
        return new Builder();
    }

    public interface StatusStage {
        IdStage status(@NotNull SubscriptionTopicStatus status);

        Builder from(SubscriptionTopic other);
    }

    public interface IdStage {
        /**
         * <p>Topic ID</p>
         */
        _FinalStage id(@NotNull String id);
    }

    public interface _FinalStage {
        SubscriptionTopic build();

        /**
         * <p>Override channel routing with custom preferences. This will override any template prefernces that are set, but a user can still customize their preferences</p>
         */
        _FinalStage hasCustomRouting(Optional<Boolean> hasCustomRouting);

        _FinalStage hasCustomRouting(Boolean hasCustomRouting);

        /**
         * <p>The default channels to send to this tenant when has_custom_routing is enabled</p>
         */
        _FinalStage customRouting(Optional<List<ChannelClassification>> customRouting);

        _FinalStage customRouting(List<ChannelClassification> customRouting);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StatusStage, IdStage, _FinalStage {
        private SubscriptionTopicStatus status;

        private String id;

        private Optional<List<ChannelClassification>> customRouting = Optional.empty();

        private Optional<Boolean> hasCustomRouting = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SubscriptionTopic other) {
            status(other.getStatus());
            hasCustomRouting(other.getHasCustomRouting());
            customRouting(other.getCustomRouting());
            id(other.getId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public IdStage status(@NotNull SubscriptionTopicStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        /**
         * <p>Topic ID</p>
         * <p>Topic ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public _FinalStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The default channels to send to this tenant when has_custom_routing is enabled</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customRouting(List<ChannelClassification> customRouting) {
            this.customRouting = Optional.ofNullable(customRouting);
            return this;
        }

        /**
         * <p>The default channels to send to this tenant when has_custom_routing is enabled</p>
         */
        @java.lang.Override
        @JsonSetter(value = "custom_routing", nulls = Nulls.SKIP)
        public _FinalStage customRouting(Optional<List<ChannelClassification>> customRouting) {
            this.customRouting = customRouting;
            return this;
        }

        /**
         * <p>Override channel routing with custom preferences. This will override any template prefernces that are set, but a user can still customize their preferences</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage hasCustomRouting(Boolean hasCustomRouting) {
            this.hasCustomRouting = Optional.ofNullable(hasCustomRouting);
            return this;
        }

        /**
         * <p>Override channel routing with custom preferences. This will override any template prefernces that are set, but a user can still customize their preferences</p>
         */
        @java.lang.Override
        @JsonSetter(value = "has_custom_routing", nulls = Nulls.SKIP)
        public _FinalStage hasCustomRouting(Optional<Boolean> hasCustomRouting) {
            this.hasCustomRouting = hasCustomRouting;
            return this;
        }

        @java.lang.Override
        public SubscriptionTopic build() {
            return new SubscriptionTopic(status, hasCustomRouting, customRouting, id, additionalProperties);
        }
    }
}
