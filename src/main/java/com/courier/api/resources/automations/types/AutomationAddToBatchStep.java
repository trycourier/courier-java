/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.automations.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AutomationAddToBatchStep.Builder.class)
public final class AutomationAddToBatchStep implements IAutomationStep {
    private final Optional<String> if_;

    private final Optional<String> ref;

    private final String waitPeriod;

    private final String maxWaitPeriod;

    private final Optional<AutomationAddToBatchMaxItemsType> maxItems;

    private final AutomationAddToBatchRetain retain;

    private final Optional<AutomationAddToBatchScope> scope;

    private final Optional<String> batchKey;

    private final Optional<String> batchId;

    private final Optional<String> categoryKey;

    private final Map<String, Object> additionalProperties;

    private AutomationAddToBatchStep(
            Optional<String> if_,
            Optional<String> ref,
            String waitPeriod,
            String maxWaitPeriod,
            Optional<AutomationAddToBatchMaxItemsType> maxItems,
            AutomationAddToBatchRetain retain,
            Optional<AutomationAddToBatchScope> scope,
            Optional<String> batchKey,
            Optional<String> batchId,
            Optional<String> categoryKey,
            Map<String, Object> additionalProperties) {
        this.if_ = if_;
        this.ref = ref;
        this.waitPeriod = waitPeriod;
        this.maxWaitPeriod = maxWaitPeriod;
        this.maxItems = maxItems;
        this.retain = retain;
        this.scope = scope;
        this.batchKey = batchKey;
        this.batchId = batchId;
        this.categoryKey = categoryKey;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("if")
    @java.lang.Override
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("ref")
    @java.lang.Override
    public Optional<String> getRef() {
        return ref;
    }

    @JsonProperty("action")
    public String getAction() {
        return "add-to-batch";
    }

    /**
     * @return Defines the period of inactivity before the batch is released. Specified as an <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601 duration</a>
     */
    @JsonProperty("wait_period")
    public String getWaitPeriod() {
        return waitPeriod;
    }

    /**
     * @return Defines the maximum wait time before the batch should be released. Must be less than wait period. Maximum of 60 days. Specified as an <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601 duration</a>
     */
    @JsonProperty("max_wait_period")
    public String getMaxWaitPeriod() {
        return maxWaitPeriod;
    }

    /**
     * @return If specified, the batch will release as soon as this number is reached
     */
    @JsonProperty("max_items")
    public Optional<AutomationAddToBatchMaxItemsType> getMaxItems() {
        return maxItems;
    }

    @JsonProperty("retain")
    public AutomationAddToBatchRetain getRetain() {
        return retain;
    }

    /**
     * @return Determine the scope of the batching. If user, chosen in this order: recipient, profile.user_id, data.user_id, data.userId.
     * If dynamic, then specify where the batch_key or a reference to the batch_key
     */
    @JsonProperty("scope")
    public Optional<AutomationAddToBatchScope> getScope() {
        return scope;
    }

    /**
     * @return If using scope=dynamic, provide the key or a reference (e.g., refs.data.batch_key)
     */
    @JsonProperty("batch_key")
    public Optional<String> getBatchKey() {
        return batchKey;
    }

    @JsonProperty("batch_id")
    public Optional<String> getBatchId() {
        return batchId;
    }

    /**
     * @return Defines the field of the data object the batch is set to when complete. Defaults to <code>batch</code>
     */
    @JsonProperty("category_key")
    public Optional<String> getCategoryKey() {
        return categoryKey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AutomationAddToBatchStep && equalTo((AutomationAddToBatchStep) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AutomationAddToBatchStep other) {
        return if_.equals(other.if_)
                && ref.equals(other.ref)
                && waitPeriod.equals(other.waitPeriod)
                && maxWaitPeriod.equals(other.maxWaitPeriod)
                && maxItems.equals(other.maxItems)
                && retain.equals(other.retain)
                && scope.equals(other.scope)
                && batchKey.equals(other.batchKey)
                && batchId.equals(other.batchId)
                && categoryKey.equals(other.categoryKey);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.if_,
                this.ref,
                this.waitPeriod,
                this.maxWaitPeriod,
                this.maxItems,
                this.retain,
                this.scope,
                this.batchKey,
                this.batchId,
                this.categoryKey);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static WaitPeriodStage builder() {
        return new Builder();
    }

    public interface WaitPeriodStage {
        MaxWaitPeriodStage waitPeriod(String waitPeriod);

        Builder from(AutomationAddToBatchStep other);
    }

    public interface MaxWaitPeriodStage {
        RetainStage maxWaitPeriod(String maxWaitPeriod);
    }

    public interface RetainStage {
        _FinalStage retain(AutomationAddToBatchRetain retain);
    }

    public interface _FinalStage {
        AutomationAddToBatchStep build();

        _FinalStage if_(Optional<String> if_);

        _FinalStage if_(String if_);

        _FinalStage ref(Optional<String> ref);

        _FinalStage ref(String ref);

        _FinalStage maxItems(Optional<AutomationAddToBatchMaxItemsType> maxItems);

        _FinalStage maxItems(AutomationAddToBatchMaxItemsType maxItems);

        _FinalStage scope(Optional<AutomationAddToBatchScope> scope);

        _FinalStage scope(AutomationAddToBatchScope scope);

        _FinalStage batchKey(Optional<String> batchKey);

        _FinalStage batchKey(String batchKey);

        _FinalStage batchId(Optional<String> batchId);

        _FinalStage batchId(String batchId);

        _FinalStage categoryKey(Optional<String> categoryKey);

        _FinalStage categoryKey(String categoryKey);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements WaitPeriodStage, MaxWaitPeriodStage, RetainStage, _FinalStage {
        private String waitPeriod;

        private String maxWaitPeriod;

        private AutomationAddToBatchRetain retain;

        private Optional<String> categoryKey = Optional.empty();

        private Optional<String> batchId = Optional.empty();

        private Optional<String> batchKey = Optional.empty();

        private Optional<AutomationAddToBatchScope> scope = Optional.empty();

        private Optional<AutomationAddToBatchMaxItemsType> maxItems = Optional.empty();

        private Optional<String> ref = Optional.empty();

        private Optional<String> if_ = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AutomationAddToBatchStep other) {
            if_(other.getIf());
            ref(other.getRef());
            waitPeriod(other.getWaitPeriod());
            maxWaitPeriod(other.getMaxWaitPeriod());
            maxItems(other.getMaxItems());
            retain(other.getRetain());
            scope(other.getScope());
            batchKey(other.getBatchKey());
            batchId(other.getBatchId());
            categoryKey(other.getCategoryKey());
            return this;
        }

        /**
         * <p>Defines the period of inactivity before the batch is released. Specified as an <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601 duration</a></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("wait_period")
        public MaxWaitPeriodStage waitPeriod(String waitPeriod) {
            this.waitPeriod = waitPeriod;
            return this;
        }

        /**
         * <p>Defines the maximum wait time before the batch should be released. Must be less than wait period. Maximum of 60 days. Specified as an <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO 8601 duration</a></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("max_wait_period")
        public RetainStage maxWaitPeriod(String maxWaitPeriod) {
            this.maxWaitPeriod = maxWaitPeriod;
            return this;
        }

        @java.lang.Override
        @JsonSetter("retain")
        public _FinalStage retain(AutomationAddToBatchRetain retain) {
            this.retain = retain;
            return this;
        }

        /**
         * <p>Defines the field of the data object the batch is set to when complete. Defaults to <code>batch</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage categoryKey(String categoryKey) {
            this.categoryKey = Optional.of(categoryKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "category_key", nulls = Nulls.SKIP)
        public _FinalStage categoryKey(Optional<String> categoryKey) {
            this.categoryKey = categoryKey;
            return this;
        }

        @java.lang.Override
        public _FinalStage batchId(String batchId) {
            this.batchId = Optional.of(batchId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "batch_id", nulls = Nulls.SKIP)
        public _FinalStage batchId(Optional<String> batchId) {
            this.batchId = batchId;
            return this;
        }

        /**
         * <p>If using scope=dynamic, provide the key or a reference (e.g., refs.data.batch_key)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchKey(String batchKey) {
            this.batchKey = Optional.of(batchKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "batch_key", nulls = Nulls.SKIP)
        public _FinalStage batchKey(Optional<String> batchKey) {
            this.batchKey = batchKey;
            return this;
        }

        /**
         * <p>Determine the scope of the batching. If user, chosen in this order: recipient, profile.user_id, data.user_id, data.userId.
         * If dynamic, then specify where the batch_key or a reference to the batch_key</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage scope(AutomationAddToBatchScope scope) {
            this.scope = Optional.of(scope);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "scope", nulls = Nulls.SKIP)
        public _FinalStage scope(Optional<AutomationAddToBatchScope> scope) {
            this.scope = scope;
            return this;
        }

        /**
         * <p>If specified, the batch will release as soon as this number is reached</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage maxItems(AutomationAddToBatchMaxItemsType maxItems) {
            this.maxItems = Optional.of(maxItems);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "max_items", nulls = Nulls.SKIP)
        public _FinalStage maxItems(Optional<AutomationAddToBatchMaxItemsType> maxItems) {
            this.maxItems = maxItems;
            return this;
        }

        @java.lang.Override
        public _FinalStage ref(String ref) {
            this.ref = Optional.of(ref);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ref", nulls = Nulls.SKIP)
        public _FinalStage ref(Optional<String> ref) {
            this.ref = ref;
            return this;
        }

        @java.lang.Override
        public _FinalStage if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public _FinalStage if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        @java.lang.Override
        public AutomationAddToBatchStep build() {
            return new AutomationAddToBatchStep(
                    if_,
                    ref,
                    waitPeriod,
                    maxWaitPeriod,
                    maxItems,
                    retain,
                    scope,
                    batchKey,
                    batchId,
                    categoryKey,
                    additionalProperties);
        }
    }
}
