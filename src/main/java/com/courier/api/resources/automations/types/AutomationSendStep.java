/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.automations.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AutomationSendStep.Builder.class)
public final class AutomationSendStep implements IAutomationStep {
    private final Optional<String> if_;

    private final Optional<String> ref;

    private final Optional<String> brand;

    private final Optional<Map<String, Object>> data;

    private final Optional<Map<String, Object>> override;

    private final Optional<Object> profile;

    private final Optional<String> recipient;

    private final Optional<String> template;

    private final Map<String, Object> additionalProperties;

    private AutomationSendStep(
            Optional<String> if_,
            Optional<String> ref,
            Optional<String> brand,
            Optional<Map<String, Object>> data,
            Optional<Map<String, Object>> override,
            Optional<Object> profile,
            Optional<String> recipient,
            Optional<String> template,
            Map<String, Object> additionalProperties) {
        this.if_ = if_;
        this.ref = ref;
        this.brand = brand;
        this.data = data;
        this.override = override;
        this.profile = profile;
        this.recipient = recipient;
        this.template = template;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("if")
    @java.lang.Override
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("ref")
    @java.lang.Override
    public Optional<String> getRef() {
        return ref;
    }

    @JsonProperty("action")
    public String getAction() {
        return "send";
    }

    @JsonProperty("brand")
    public Optional<String> getBrand() {
        return brand;
    }

    @JsonProperty("data")
    public Optional<Map<String, Object>> getData() {
        return data;
    }

    @JsonProperty("override")
    public Optional<Map<String, Object>> getOverride() {
        return override;
    }

    @JsonProperty("profile")
    public Optional<Object> getProfile() {
        return profile;
    }

    @JsonProperty("recipient")
    public Optional<String> getRecipient() {
        return recipient;
    }

    @JsonProperty("template")
    public Optional<String> getTemplate() {
        return template;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AutomationSendStep && equalTo((AutomationSendStep) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AutomationSendStep other) {
        return if_.equals(other.if_)
                && ref.equals(other.ref)
                && brand.equals(other.brand)
                && data.equals(other.data)
                && override.equals(other.override)
                && profile.equals(other.profile)
                && recipient.equals(other.recipient)
                && template.equals(other.template);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.if_, this.ref, this.brand, this.data, this.override, this.profile, this.recipient, this.template);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> if_ = Optional.empty();

        private Optional<String> ref = Optional.empty();

        private Optional<String> brand = Optional.empty();

        private Optional<Map<String, Object>> data = Optional.empty();

        private Optional<Map<String, Object>> override = Optional.empty();

        private Optional<Object> profile = Optional.empty();

        private Optional<String> recipient = Optional.empty();

        private Optional<String> template = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AutomationSendStep other) {
            if_(other.getIf());
            ref(other.getRef());
            brand(other.getBrand());
            data(other.getData());
            override(other.getOverride());
            profile(other.getProfile());
            recipient(other.getRecipient());
            template(other.getTemplate());
            return this;
        }

        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public Builder if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        public Builder if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @JsonSetter(value = "ref", nulls = Nulls.SKIP)
        public Builder ref(Optional<String> ref) {
            this.ref = ref;
            return this;
        }

        public Builder ref(String ref) {
            this.ref = Optional.of(ref);
            return this;
        }

        @JsonSetter(value = "brand", nulls = Nulls.SKIP)
        public Builder brand(Optional<String> brand) {
            this.brand = brand;
            return this;
        }

        public Builder brand(String brand) {
            this.brand = Optional.of(brand);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<Map<String, Object>> data) {
            this.data = data;
            return this;
        }

        public Builder data(Map<String, Object> data) {
            this.data = Optional.of(data);
            return this;
        }

        @JsonSetter(value = "override", nulls = Nulls.SKIP)
        public Builder override(Optional<Map<String, Object>> override) {
            this.override = override;
            return this;
        }

        public Builder override(Map<String, Object> override) {
            this.override = Optional.of(override);
            return this;
        }

        @JsonSetter(value = "profile", nulls = Nulls.SKIP)
        public Builder profile(Optional<Object> profile) {
            this.profile = profile;
            return this;
        }

        public Builder profile(Object profile) {
            this.profile = Optional.of(profile);
            return this;
        }

        @JsonSetter(value = "recipient", nulls = Nulls.SKIP)
        public Builder recipient(Optional<String> recipient) {
            this.recipient = recipient;
            return this;
        }

        public Builder recipient(String recipient) {
            this.recipient = Optional.of(recipient);
            return this;
        }

        @JsonSetter(value = "template", nulls = Nulls.SKIP)
        public Builder template(Optional<String> template) {
            this.template = template;
            return this;
        }

        public Builder template(String template) {
            this.template = Optional.of(template);
            return this;
        }

        public AutomationSendStep build() {
            return new AutomationSendStep(
                    if_, ref, brand, data, override, profile, recipient, template, additionalProperties);
        }
    }
}
