/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.automations.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AutomationAddToBatchRetain.Builder.class)
public final class AutomationAddToBatchRetain {
    private final AutomationAddToBatchRetainType type;

    private final int count;

    private final Optional<String> sortKey;

    private final Map<String, Object> additionalProperties;

    private AutomationAddToBatchRetain(
            AutomationAddToBatchRetainType type,
            int count,
            Optional<String> sortKey,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.count = count;
        this.sortKey = sortKey;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Keep N number of notifications based on the type. First/Last N based on notification received.
     * highest/lowest based on a scoring key providing in the data accessed by sort_key
     */
    @JsonProperty("type")
    public AutomationAddToBatchRetainType getType() {
        return type;
    }

    /**
     * @return The number of records to keep in batch. Default is 10 and only configurable by requesting from support.
     * When configurable minimum is 2 and maximum is 100.
     */
    @JsonProperty("count")
    public int getCount() {
        return count;
    }

    /**
     * @return Defines the data value data[sort_key] that is used to sort the stored items. Required when type is set to highest or lowest.
     */
    @JsonProperty("sort_key")
    public Optional<String> getSortKey() {
        return sortKey;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AutomationAddToBatchRetain && equalTo((AutomationAddToBatchRetain) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AutomationAddToBatchRetain other) {
        return type.equals(other.type) && count == other.count && sortKey.equals(other.sortKey);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.count, this.sortKey);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        CountStage type(AutomationAddToBatchRetainType type);

        Builder from(AutomationAddToBatchRetain other);
    }

    public interface CountStage {
        _FinalStage count(int count);
    }

    public interface _FinalStage {
        AutomationAddToBatchRetain build();

        _FinalStage sortKey(Optional<String> sortKey);

        _FinalStage sortKey(String sortKey);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, CountStage, _FinalStage {
        private AutomationAddToBatchRetainType type;

        private int count;

        private Optional<String> sortKey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AutomationAddToBatchRetain other) {
            type(other.getType());
            count(other.getCount());
            sortKey(other.getSortKey());
            return this;
        }

        /**
         * <p>Keep N number of notifications based on the type. First/Last N based on notification received.
         * highest/lowest based on a scoring key providing in the data accessed by sort_key</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public CountStage type(AutomationAddToBatchRetainType type) {
            this.type = type;
            return this;
        }

        /**
         * <p>The number of records to keep in batch. Default is 10 and only configurable by requesting from support.
         * When configurable minimum is 2 and maximum is 100.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("count")
        public _FinalStage count(int count) {
            this.count = count;
            return this;
        }

        /**
         * <p>Defines the data value data[sort_key] that is used to sort the stored items. Required when type is set to highest or lowest.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sortKey(String sortKey) {
            this.sortKey = Optional.of(sortKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "sort_key", nulls = Nulls.SKIP)
        public _FinalStage sortKey(Optional<String> sortKey) {
            this.sortKey = sortKey;
            return this;
        }

        @java.lang.Override
        public AutomationAddToBatchRetain build() {
            return new AutomationAddToBatchRetain(type, count, sortKey, additionalProperties);
        }
    }
}
