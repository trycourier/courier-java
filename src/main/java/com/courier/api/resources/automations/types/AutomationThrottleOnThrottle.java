/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.automations.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AutomationThrottleOnThrottle.Builder.class)
public final class AutomationThrottleOnThrottle {
    private final String nodeId;

    private final Map<String, Object> additionalProperties;

    private AutomationThrottleOnThrottle(String nodeId, Map<String, Object> additionalProperties) {
        this.nodeId = nodeId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The node to go to if the request is throttled
     */
    @JsonProperty("$node_id")
    public String getNodeId() {
        return nodeId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AutomationThrottleOnThrottle && equalTo((AutomationThrottleOnThrottle) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AutomationThrottleOnThrottle other) {
        return nodeId.equals(other.nodeId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.nodeId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NodeIdStage builder() {
        return new Builder();
    }

    public interface NodeIdStage {
        _FinalStage nodeId(String nodeId);

        Builder from(AutomationThrottleOnThrottle other);
    }

    public interface _FinalStage {
        AutomationThrottleOnThrottle build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NodeIdStage, _FinalStage {
        private String nodeId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AutomationThrottleOnThrottle other) {
            nodeId(other.getNodeId());
            return this;
        }

        /**
         * <p>The node to go to if the request is throttled</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("$node_id")
        public _FinalStage nodeId(String nodeId) {
            this.nodeId = nodeId;
            return this;
        }

        @java.lang.Override
        public AutomationThrottleOnThrottle build() {
            return new AutomationThrottleOnThrottle(nodeId, additionalProperties);
        }
    }
}
