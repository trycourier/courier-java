/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.automations.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AutomationRunContext.Builder.class)
public final class AutomationRunContext {
    private final Optional<String> brand;

    private final Optional<Object> data;

    private final Optional<Object> profile;

    private final Optional<String> template;

    private final Optional<String> recipient;

    private final Map<String, Object> additionalProperties;

    private AutomationRunContext(
            Optional<String> brand,
            Optional<Object> data,
            Optional<Object> profile,
            Optional<String> template,
            Optional<String> recipient,
            Map<String, Object> additionalProperties) {
        this.brand = brand;
        this.data = data;
        this.profile = profile;
        this.template = template;
        this.recipient = recipient;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("brand")
    public Optional<String> getBrand() {
        return brand;
    }

    @JsonProperty("data")
    public Optional<Object> getData() {
        return data;
    }

    @JsonProperty("profile")
    public Optional<Object> getProfile() {
        return profile;
    }

    @JsonProperty("template")
    public Optional<String> getTemplate() {
        return template;
    }

    @JsonProperty("recipient")
    public Optional<String> getRecipient() {
        return recipient;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AutomationRunContext && equalTo((AutomationRunContext) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AutomationRunContext other) {
        return brand.equals(other.brand)
                && data.equals(other.data)
                && profile.equals(other.profile)
                && template.equals(other.template)
                && recipient.equals(other.recipient);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.brand, this.data, this.profile, this.template, this.recipient);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> brand = Optional.empty();

        private Optional<Object> data = Optional.empty();

        private Optional<Object> profile = Optional.empty();

        private Optional<String> template = Optional.empty();

        private Optional<String> recipient = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AutomationRunContext other) {
            brand(other.getBrand());
            data(other.getData());
            profile(other.getProfile());
            template(other.getTemplate());
            recipient(other.getRecipient());
            return this;
        }

        @JsonSetter(value = "brand", nulls = Nulls.SKIP)
        public Builder brand(Optional<String> brand) {
            this.brand = brand;
            return this;
        }

        public Builder brand(String brand) {
            this.brand = Optional.of(brand);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<Object> data) {
            this.data = data;
            return this;
        }

        public Builder data(Object data) {
            this.data = Optional.of(data);
            return this;
        }

        @JsonSetter(value = "profile", nulls = Nulls.SKIP)
        public Builder profile(Optional<Object> profile) {
            this.profile = profile;
            return this;
        }

        public Builder profile(Object profile) {
            this.profile = Optional.of(profile);
            return this;
        }

        @JsonSetter(value = "template", nulls = Nulls.SKIP)
        public Builder template(Optional<String> template) {
            this.template = template;
            return this;
        }

        public Builder template(String template) {
            this.template = Optional.of(template);
            return this;
        }

        @JsonSetter(value = "recipient", nulls = Nulls.SKIP)
        public Builder recipient(Optional<String> recipient) {
            this.recipient = recipient;
            return this;
        }

        public Builder recipient(String recipient) {
            this.recipient = Optional.of(recipient);
            return this;
        }

        public AutomationRunContext build() {
            return new AutomationRunContext(brand, data, profile, template, recipient, additionalProperties);
        }
    }
}
