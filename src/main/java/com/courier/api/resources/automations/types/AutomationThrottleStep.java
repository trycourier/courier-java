/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.automations.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AutomationThrottleStep.Builder.class)
public final class AutomationThrottleStep implements IAutomationStep {
    private final Optional<String> if_;

    private final Optional<String> ref;

    private final int maxAllowed;

    private final String period;

    private final AutomationThrottleScope scope;

    private final Optional<String> throttleKey;

    private final AutomationThrottleOnThrottle onThrottle;

    private final Map<String, Object> additionalProperties;

    private AutomationThrottleStep(
            Optional<String> if_,
            Optional<String> ref,
            int maxAllowed,
            String period,
            AutomationThrottleScope scope,
            Optional<String> throttleKey,
            AutomationThrottleOnThrottle onThrottle,
            Map<String, Object> additionalProperties) {
        this.if_ = if_;
        this.ref = ref;
        this.maxAllowed = maxAllowed;
        this.period = period;
        this.scope = scope;
        this.throttleKey = throttleKey;
        this.onThrottle = onThrottle;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("if")
    @java.lang.Override
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("ref")
    @java.lang.Override
    public Optional<String> getRef() {
        return ref;
    }

    @JsonProperty("action")
    public String getAction() {
        return "throttle";
    }

    /**
     * @return Maximum number of allowed notifications in that timeframe
     */
    @JsonProperty("max_allowed")
    public int getMaxAllowed() {
        return maxAllowed;
    }

    /**
     * @return Defines the throttle period which corresponds to the max_allowed. Specified as an ISO 8601 duration, https://en.wikipedia.org/wiki/ISO_8601#Durations
     */
    @JsonProperty("period")
    public String getPeriod() {
        return period;
    }

    @JsonProperty("scope")
    public AutomationThrottleScope getScope() {
        return scope;
    }

    /**
     * @return If using scope=dynamic, provide the reference (e.g., refs.data.throttle_key) to the how the throttle should be identified
     */
    @JsonProperty("throttle_key")
    public Optional<String> getThrottleKey() {
        return throttleKey;
    }

    /**
     * @return Value must be true
     */
    @JsonProperty("should_alert")
    public Boolean getShouldAlert() {
        return false;
    }

    @JsonProperty("on_throttle")
    public AutomationThrottleOnThrottle getOnThrottle() {
        return onThrottle;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AutomationThrottleStep && equalTo((AutomationThrottleStep) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AutomationThrottleStep other) {
        return if_.equals(other.if_)
                && ref.equals(other.ref)
                && maxAllowed == other.maxAllowed
                && period.equals(other.period)
                && scope.equals(other.scope)
                && throttleKey.equals(other.throttleKey)
                && onThrottle.equals(other.onThrottle);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.if_, this.ref, this.maxAllowed, this.period, this.scope, this.throttleKey, this.onThrottle);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MaxAllowedStage builder() {
        return new Builder();
    }

    public interface MaxAllowedStage {
        PeriodStage maxAllowed(int maxAllowed);

        Builder from(AutomationThrottleStep other);
    }

    public interface PeriodStage {
        ScopeStage period(String period);
    }

    public interface ScopeStage {
        OnThrottleStage scope(AutomationThrottleScope scope);
    }

    public interface OnThrottleStage {
        _FinalStage onThrottle(AutomationThrottleOnThrottle onThrottle);
    }

    public interface _FinalStage {
        AutomationThrottleStep build();

        _FinalStage if_(Optional<String> if_);

        _FinalStage if_(String if_);

        _FinalStage ref(Optional<String> ref);

        _FinalStage ref(String ref);

        _FinalStage throttleKey(Optional<String> throttleKey);

        _FinalStage throttleKey(String throttleKey);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements MaxAllowedStage, PeriodStage, ScopeStage, OnThrottleStage, _FinalStage {
        private int maxAllowed;

        private String period;

        private AutomationThrottleScope scope;

        private AutomationThrottleOnThrottle onThrottle;

        private Optional<String> throttleKey = Optional.empty();

        private Optional<String> ref = Optional.empty();

        private Optional<String> if_ = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AutomationThrottleStep other) {
            if_(other.getIf());
            ref(other.getRef());
            maxAllowed(other.getMaxAllowed());
            period(other.getPeriod());
            scope(other.getScope());
            throttleKey(other.getThrottleKey());
            onThrottle(other.getOnThrottle());
            return this;
        }

        /**
         * <p>Maximum number of allowed notifications in that timeframe</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("max_allowed")
        public PeriodStage maxAllowed(int maxAllowed) {
            this.maxAllowed = maxAllowed;
            return this;
        }

        /**
         * <p>Defines the throttle period which corresponds to the max_allowed. Specified as an ISO 8601 duration, https://en.wikipedia.org/wiki/ISO_8601#Durations</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("period")
        public ScopeStage period(String period) {
            this.period = period;
            return this;
        }

        @java.lang.Override
        @JsonSetter("scope")
        public OnThrottleStage scope(AutomationThrottleScope scope) {
            this.scope = scope;
            return this;
        }

        @java.lang.Override
        @JsonSetter("on_throttle")
        public _FinalStage onThrottle(AutomationThrottleOnThrottle onThrottle) {
            this.onThrottle = onThrottle;
            return this;
        }

        /**
         * <p>If using scope=dynamic, provide the reference (e.g., refs.data.throttle_key) to the how the throttle should be identified</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage throttleKey(String throttleKey) {
            this.throttleKey = Optional.of(throttleKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "throttle_key", nulls = Nulls.SKIP)
        public _FinalStage throttleKey(Optional<String> throttleKey) {
            this.throttleKey = throttleKey;
            return this;
        }

        @java.lang.Override
        public _FinalStage ref(String ref) {
            this.ref = Optional.of(ref);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ref", nulls = Nulls.SKIP)
        public _FinalStage ref(Optional<String> ref) {
            this.ref = ref;
            return this;
        }

        @java.lang.Override
        public _FinalStage if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public _FinalStage if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        @java.lang.Override
        public AutomationThrottleStep build() {
            return new AutomationThrottleStep(
                    if_, ref, maxAllowed, period, scope, throttleKey, onThrottle, additionalProperties);
        }
    }
}
