/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Expiry.Builder.class)
public final class Expiry {
    private final Optional<String> expiresAt;

    private final ExpiresInType expiresIn;

    private final Map<String, Object> additionalProperties;

    private Expiry(Optional<String> expiresAt, ExpiresInType expiresIn, Map<String, Object> additionalProperties) {
        this.expiresAt = expiresAt;
        this.expiresIn = expiresIn;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return An epoch timestamp or ISO8601 timestamp with timezone <code>(YYYY-MM-DDThh:mm:ss.sTZD)</code> that describes the time in which a message expires.
     */
    @JsonProperty("expires_at")
    public Optional<String> getExpiresAt() {
        return expiresAt;
    }

    /**
     * @return A duration in the form of milliseconds or an ISO8601 Duration format (i.e. P1DT4H).
     */
    @JsonProperty("expires_in")
    public ExpiresInType getExpiresIn() {
        return expiresIn;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Expiry && equalTo((Expiry) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Expiry other) {
        return expiresAt.equals(other.expiresAt) && expiresIn.equals(other.expiresIn);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.expiresAt, this.expiresIn);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ExpiresInStage builder() {
        return new Builder();
    }

    public interface ExpiresInStage {
        _FinalStage expiresIn(ExpiresInType expiresIn);

        Builder from(Expiry other);
    }

    public interface _FinalStage {
        Expiry build();

        _FinalStage expiresAt(Optional<String> expiresAt);

        _FinalStage expiresAt(String expiresAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ExpiresInStage, _FinalStage {
        private ExpiresInType expiresIn;

        private Optional<String> expiresAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Expiry other) {
            expiresAt(other.getExpiresAt());
            expiresIn(other.getExpiresIn());
            return this;
        }

        /**
         * <p>A duration in the form of milliseconds or an ISO8601 Duration format (i.e. P1DT4H).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("expires_in")
        public _FinalStage expiresIn(ExpiresInType expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }

        /**
         * <p>An epoch timestamp or ISO8601 timestamp with timezone <code>(YYYY-MM-DDThh:mm:ss.sTZD)</code> that describes the time in which a message expires.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage expiresAt(String expiresAt) {
            this.expiresAt = Optional.of(expiresAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "expires_at", nulls = Nulls.SKIP)
        public _FinalStage expiresAt(Optional<String> expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        @java.lang.Override
        public Expiry build() {
            return new Expiry(expiresAt, expiresIn, additionalProperties);
        }
    }
}
