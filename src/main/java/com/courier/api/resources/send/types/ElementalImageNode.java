/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ElementalImageNode.Builder.class)
public final class ElementalImageNode implements IElementalBaseNode {
    private final Optional<List<String>> channels;

    private final Optional<String> ref;

    private final Optional<String> if_;

    private final Optional<String> loop;

    private final String src;

    private final Optional<String> href;

    private final Optional<IAlignment> align;

    private final Optional<String> altText;

    private final Optional<String> width;

    private final Map<String, Object> additionalProperties;

    private ElementalImageNode(
            Optional<List<String>> channels,
            Optional<String> ref,
            Optional<String> if_,
            Optional<String> loop,
            String src,
            Optional<String> href,
            Optional<IAlignment> align,
            Optional<String> altText,
            Optional<String> width,
            Map<String, Object> additionalProperties) {
        this.channels = channels;
        this.ref = ref;
        this.if_ = if_;
        this.loop = loop;
        this.src = src;
        this.href = href;
        this.align = align;
        this.altText = altText;
        this.width = width;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("channels")
    @java.lang.Override
    public Optional<List<String>> getChannels() {
        return channels;
    }

    @JsonProperty("ref")
    @java.lang.Override
    public Optional<String> getRef() {
        return ref;
    }

    @JsonProperty("if")
    @java.lang.Override
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("loop")
    @java.lang.Override
    public Optional<String> getLoop() {
        return loop;
    }

    /**
     * @return The source of the image.
     */
    @JsonProperty("src")
    public String getSrc() {
        return src;
    }

    /**
     * @return A URL to link to when the image is clicked.
     */
    @JsonProperty("href")
    public Optional<String> getHref() {
        return href;
    }

    /**
     * @return The alignment of the image.
     */
    @JsonProperty("align")
    public Optional<IAlignment> getAlign() {
        return align;
    }

    /**
     * @return Alternate text for the image.
     */
    @JsonProperty("altText")
    public Optional<String> getAltText() {
        return altText;
    }

    /**
     * @return CSS width properties to apply to the image. For example, 50px
     */
    @JsonProperty("width")
    public Optional<String> getWidth() {
        return width;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ElementalImageNode && equalTo((ElementalImageNode) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ElementalImageNode other) {
        return channels.equals(other.channels)
                && ref.equals(other.ref)
                && if_.equals(other.if_)
                && loop.equals(other.loop)
                && src.equals(other.src)
                && href.equals(other.href)
                && align.equals(other.align)
                && altText.equals(other.altText)
                && width.equals(other.width);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.channels,
                this.ref,
                this.if_,
                this.loop,
                this.src,
                this.href,
                this.align,
                this.altText,
                this.width);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SrcStage builder() {
        return new Builder();
    }

    public interface SrcStage {
        _FinalStage src(String src);

        Builder from(ElementalImageNode other);
    }

    public interface _FinalStage {
        ElementalImageNode build();

        _FinalStage channels(Optional<List<String>> channels);

        _FinalStage channels(List<String> channels);

        _FinalStage ref(Optional<String> ref);

        _FinalStage ref(String ref);

        _FinalStage if_(Optional<String> if_);

        _FinalStage if_(String if_);

        _FinalStage loop(Optional<String> loop);

        _FinalStage loop(String loop);

        _FinalStage href(Optional<String> href);

        _FinalStage href(String href);

        _FinalStage align(Optional<IAlignment> align);

        _FinalStage align(IAlignment align);

        _FinalStage altText(Optional<String> altText);

        _FinalStage altText(String altText);

        _FinalStage width(Optional<String> width);

        _FinalStage width(String width);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SrcStage, _FinalStage {
        private String src;

        private Optional<String> width = Optional.empty();

        private Optional<String> altText = Optional.empty();

        private Optional<IAlignment> align = Optional.empty();

        private Optional<String> href = Optional.empty();

        private Optional<String> loop = Optional.empty();

        private Optional<String> if_ = Optional.empty();

        private Optional<String> ref = Optional.empty();

        private Optional<List<String>> channels = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ElementalImageNode other) {
            channels(other.getChannels());
            ref(other.getRef());
            if_(other.getIf());
            loop(other.getLoop());
            src(other.getSrc());
            href(other.getHref());
            align(other.getAlign());
            altText(other.getAltText());
            width(other.getWidth());
            return this;
        }

        /**
         * <p>The source of the image.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("src")
        public _FinalStage src(String src) {
            this.src = src;
            return this;
        }

        /**
         * <p>CSS width properties to apply to the image. For example, 50px</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage width(String width) {
            this.width = Optional.of(width);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "width", nulls = Nulls.SKIP)
        public _FinalStage width(Optional<String> width) {
            this.width = width;
            return this;
        }

        /**
         * <p>Alternate text for the image.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage altText(String altText) {
            this.altText = Optional.of(altText);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "altText", nulls = Nulls.SKIP)
        public _FinalStage altText(Optional<String> altText) {
            this.altText = altText;
            return this;
        }

        /**
         * <p>The alignment of the image.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage align(IAlignment align) {
            this.align = Optional.of(align);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "align", nulls = Nulls.SKIP)
        public _FinalStage align(Optional<IAlignment> align) {
            this.align = align;
            return this;
        }

        /**
         * <p>A URL to link to when the image is clicked.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage href(String href) {
            this.href = Optional.of(href);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "href", nulls = Nulls.SKIP)
        public _FinalStage href(Optional<String> href) {
            this.href = href;
            return this;
        }

        @java.lang.Override
        public _FinalStage loop(String loop) {
            this.loop = Optional.of(loop);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "loop", nulls = Nulls.SKIP)
        public _FinalStage loop(Optional<String> loop) {
            this.loop = loop;
            return this;
        }

        @java.lang.Override
        public _FinalStage if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public _FinalStage if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        @java.lang.Override
        public _FinalStage ref(String ref) {
            this.ref = Optional.of(ref);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ref", nulls = Nulls.SKIP)
        public _FinalStage ref(Optional<String> ref) {
            this.ref = ref;
            return this;
        }

        @java.lang.Override
        public _FinalStage channels(List<String> channels) {
            this.channels = Optional.of(channels);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "channels", nulls = Nulls.SKIP)
        public _FinalStage channels(Optional<List<String>> channels) {
            this.channels = channels;
            return this;
        }

        @java.lang.Override
        public ElementalImageNode build() {
            return new ElementalImageNode(
                    channels, ref, if_, loop, src, href, align, altText, width, additionalProperties);
        }
    }
}
