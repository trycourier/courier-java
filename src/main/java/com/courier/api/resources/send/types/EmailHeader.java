/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = EmailHeader.Builder.class)
public final class EmailHeader {
    private final Optional<Boolean> inheritDefault;

    private final Optional<String> barColor;

    private final Logo logo;

    private final Map<String, Object> additionalProperties;

    private EmailHeader(
            Optional<Boolean> inheritDefault,
            Optional<String> barColor,
            Logo logo,
            Map<String, Object> additionalProperties) {
        this.inheritDefault = inheritDefault;
        this.barColor = barColor;
        this.logo = logo;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("inheritDefault")
    public Optional<Boolean> getInheritDefault() {
        return inheritDefault;
    }

    @JsonProperty("barColor")
    public Optional<String> getBarColor() {
        return barColor;
    }

    @JsonProperty("logo")
    public Logo getLogo() {
        return logo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmailHeader && equalTo((EmailHeader) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmailHeader other) {
        return inheritDefault.equals(other.inheritDefault)
                && barColor.equals(other.barColor)
                && logo.equals(other.logo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.inheritDefault, this.barColor, this.logo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LogoStage builder() {
        return new Builder();
    }

    public interface LogoStage {
        _FinalStage logo(Logo logo);

        Builder from(EmailHeader other);
    }

    public interface _FinalStage {
        EmailHeader build();

        _FinalStage inheritDefault(Optional<Boolean> inheritDefault);

        _FinalStage inheritDefault(Boolean inheritDefault);

        _FinalStage barColor(Optional<String> barColor);

        _FinalStage barColor(String barColor);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LogoStage, _FinalStage {
        private Logo logo;

        private Optional<String> barColor = Optional.empty();

        private Optional<Boolean> inheritDefault = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EmailHeader other) {
            inheritDefault(other.getInheritDefault());
            barColor(other.getBarColor());
            logo(other.getLogo());
            return this;
        }

        @java.lang.Override
        @JsonSetter("logo")
        public _FinalStage logo(Logo logo) {
            this.logo = logo;
            return this;
        }

        @java.lang.Override
        public _FinalStage barColor(String barColor) {
            this.barColor = Optional.of(barColor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "barColor", nulls = Nulls.SKIP)
        public _FinalStage barColor(Optional<String> barColor) {
            this.barColor = barColor;
            return this;
        }

        @java.lang.Override
        public _FinalStage inheritDefault(Boolean inheritDefault) {
            this.inheritDefault = Optional.of(inheritDefault);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "inheritDefault", nulls = Nulls.SKIP)
        public _FinalStage inheritDefault(Optional<Boolean> inheritDefault) {
            this.inheritDefault = inheritDefault;
            return this;
        }

        @java.lang.Override
        public EmailHeader build() {
            return new EmailHeader(inheritDefault, barColor, logo, additionalProperties);
        }
    }
}
