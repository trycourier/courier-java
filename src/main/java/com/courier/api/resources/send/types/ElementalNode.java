/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class ElementalNode {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private ElementalNode(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static ElementalNode text(ElementalTextNode value) {
        return new ElementalNode(new TextValue(value));
    }

    public static ElementalNode meta(ElementalMetaNode value) {
        return new ElementalNode(new MetaValue(value));
    }

    public static ElementalNode channel(ElementalChannelNode value) {
        return new ElementalNode(new ChannelValue(value));
    }

    public static ElementalNode image(ElementalImageNode value) {
        return new ElementalNode(new ImageValue(value));
    }

    public static ElementalNode action(ElementalActionNode value) {
        return new ElementalNode(new ActionValue(value));
    }

    public static ElementalNode divider(ElementalDividerNode value) {
        return new ElementalNode(new DividerValue(value));
    }

    public static ElementalNode group(ElementalGroupNode value) {
        return new ElementalNode(new GroupValue(value));
    }

    public static ElementalNode quote(ElementalQuoteNode value) {
        return new ElementalNode(new QuoteValue(value));
    }

    public boolean isText() {
        return value instanceof TextValue;
    }

    public boolean isMeta() {
        return value instanceof MetaValue;
    }

    public boolean isChannel() {
        return value instanceof ChannelValue;
    }

    public boolean isImage() {
        return value instanceof ImageValue;
    }

    public boolean isAction() {
        return value instanceof ActionValue;
    }

    public boolean isDivider() {
        return value instanceof DividerValue;
    }

    public boolean isGroup() {
        return value instanceof GroupValue;
    }

    public boolean isQuote() {
        return value instanceof QuoteValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<ElementalTextNode> getText() {
        if (isText()) {
            return Optional.of(((TextValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ElementalMetaNode> getMeta() {
        if (isMeta()) {
            return Optional.of(((MetaValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ElementalChannelNode> getChannel() {
        if (isChannel()) {
            return Optional.of(((ChannelValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ElementalImageNode> getImage() {
        if (isImage()) {
            return Optional.of(((ImageValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ElementalActionNode> getAction() {
        if (isAction()) {
            return Optional.of(((ActionValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ElementalDividerNode> getDivider() {
        if (isDivider()) {
            return Optional.of(((DividerValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ElementalGroupNode> getGroup() {
        if (isGroup()) {
            return Optional.of(((GroupValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ElementalQuoteNode> getQuote() {
        if (isQuote()) {
            return Optional.of(((QuoteValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitText(ElementalTextNode text);

        T visitMeta(ElementalMetaNode meta);

        T visitChannel(ElementalChannelNode channel);

        T visitImage(ElementalImageNode image);

        T visitAction(ElementalActionNode action);

        T visitDivider(ElementalDividerNode divider);

        T visitGroup(ElementalGroupNode group);

        T visitQuote(ElementalQuoteNode quote);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(TextValue.class),
        @JsonSubTypes.Type(MetaValue.class),
        @JsonSubTypes.Type(ChannelValue.class),
        @JsonSubTypes.Type(ImageValue.class),
        @JsonSubTypes.Type(ActionValue.class),
        @JsonSubTypes.Type(DividerValue.class),
        @JsonSubTypes.Type(GroupValue.class),
        @JsonSubTypes.Type(QuoteValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("text")
    private static final class TextValue implements Value {
        @JsonUnwrapped
        private ElementalTextNode value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TextValue() {}

        private TextValue(ElementalTextNode value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitText(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TextValue && equalTo((TextValue) other);
        }

        private boolean equalTo(TextValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ElementalNode{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("meta")
    private static final class MetaValue implements Value {
        @JsonUnwrapped
        private ElementalMetaNode value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private MetaValue() {}

        private MetaValue(ElementalMetaNode value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMeta(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof MetaValue && equalTo((MetaValue) other);
        }

        private boolean equalTo(MetaValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ElementalNode{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("channel")
    private static final class ChannelValue implements Value {
        @JsonUnwrapped
        private ElementalChannelNode value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ChannelValue() {}

        private ChannelValue(ElementalChannelNode value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitChannel(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ChannelValue && equalTo((ChannelValue) other);
        }

        private boolean equalTo(ChannelValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ElementalNode{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("image")
    private static final class ImageValue implements Value {
        @JsonUnwrapped
        private ElementalImageNode value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ImageValue() {}

        private ImageValue(ElementalImageNode value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitImage(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ImageValue && equalTo((ImageValue) other);
        }

        private boolean equalTo(ImageValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ElementalNode{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("action")
    private static final class ActionValue implements Value {
        @JsonUnwrapped
        private ElementalActionNode value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ActionValue() {}

        private ActionValue(ElementalActionNode value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAction(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ActionValue && equalTo((ActionValue) other);
        }

        private boolean equalTo(ActionValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ElementalNode{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("divider")
    private static final class DividerValue implements Value {
        @JsonUnwrapped
        private ElementalDividerNode value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DividerValue() {}

        private DividerValue(ElementalDividerNode value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDivider(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DividerValue && equalTo((DividerValue) other);
        }

        private boolean equalTo(DividerValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ElementalNode{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("group")
    private static final class GroupValue implements Value {
        @JsonUnwrapped
        private ElementalGroupNode value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GroupValue() {}

        private GroupValue(ElementalGroupNode value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGroup(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GroupValue && equalTo((GroupValue) other);
        }

        private boolean equalTo(GroupValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ElementalNode{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("quote")
    private static final class QuoteValue implements Value {
        @JsonUnwrapped
        private ElementalQuoteNode value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private QuoteValue() {}

        private QuoteValue(ElementalQuoteNode value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitQuote(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof QuoteValue && equalTo((QuoteValue) other);
        }

        private boolean equalTo(QuoteValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ElementalNode{" + "value: " + value + "}";
        }
    }

    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "ElementalNode{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
