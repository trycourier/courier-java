/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BrandSettingsEmail.Builder.class)
public final class BrandSettingsEmail {
    private final Optional<BrandTemplateOverride> templateOverride;

    private final Optional<EmailHead> head;

    private final Optional<EmailFooter> footer;

    private final Optional<EmailHeader> header;

    private final Map<String, Object> additionalProperties;

    private BrandSettingsEmail(
            Optional<BrandTemplateOverride> templateOverride,
            Optional<EmailHead> head,
            Optional<EmailFooter> footer,
            Optional<EmailHeader> header,
            Map<String, Object> additionalProperties) {
        this.templateOverride = templateOverride;
        this.head = head;
        this.footer = footer;
        this.header = header;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("templateOverride")
    public Optional<BrandTemplateOverride> getTemplateOverride() {
        return templateOverride;
    }

    @JsonProperty("head")
    public Optional<EmailHead> getHead() {
        return head;
    }

    @JsonProperty("footer")
    public Optional<EmailFooter> getFooter() {
        return footer;
    }

    @JsonProperty("header")
    public Optional<EmailHeader> getHeader() {
        return header;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BrandSettingsEmail && equalTo((BrandSettingsEmail) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BrandSettingsEmail other) {
        return templateOverride.equals(other.templateOverride)
                && head.equals(other.head)
                && footer.equals(other.footer)
                && header.equals(other.header);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.templateOverride, this.head, this.footer, this.header);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BrandTemplateOverride> templateOverride = Optional.empty();

        private Optional<EmailHead> head = Optional.empty();

        private Optional<EmailFooter> footer = Optional.empty();

        private Optional<EmailHeader> header = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BrandSettingsEmail other) {
            templateOverride(other.getTemplateOverride());
            head(other.getHead());
            footer(other.getFooter());
            header(other.getHeader());
            return this;
        }

        @JsonSetter(value = "templateOverride", nulls = Nulls.SKIP)
        public Builder templateOverride(Optional<BrandTemplateOverride> templateOverride) {
            this.templateOverride = templateOverride;
            return this;
        }

        public Builder templateOverride(BrandTemplateOverride templateOverride) {
            this.templateOverride = Optional.of(templateOverride);
            return this;
        }

        @JsonSetter(value = "head", nulls = Nulls.SKIP)
        public Builder head(Optional<EmailHead> head) {
            this.head = head;
            return this;
        }

        public Builder head(EmailHead head) {
            this.head = Optional.of(head);
            return this;
        }

        @JsonSetter(value = "footer", nulls = Nulls.SKIP)
        public Builder footer(Optional<EmailFooter> footer) {
            this.footer = footer;
            return this;
        }

        public Builder footer(EmailFooter footer) {
            this.footer = Optional.of(footer);
            return this;
        }

        @JsonSetter(value = "header", nulls = Nulls.SKIP)
        public Builder header(Optional<EmailHeader> header) {
            this.header = header;
            return this;
        }

        public Builder header(EmailHeader header) {
            this.header = Optional.of(header);
            return this;
        }

        public BrandSettingsEmail build() {
            return new BrandSettingsEmail(templateOverride, head, footer, header, additionalProperties);
        }
    }
}
