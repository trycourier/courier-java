/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Channel.Builder.class)
public final class Channel {
    private final Optional<String> brandId;

    private final Optional<List<String>> providers;

    private final Optional<RoutingMethod> routingMethod;

    private final Optional<String> if_;

    private final Optional<Timeouts> timeouts;

    private final Optional<Override> override;

    private final Optional<ChannelMetadata> metadata;

    private final Map<String, Object> additionalProperties;

    private Channel(
            Optional<String> brandId,
            Optional<List<String>> providers,
            Optional<RoutingMethod> routingMethod,
            Optional<String> if_,
            Optional<Timeouts> timeouts,
            Optional<Override> override,
            Optional<ChannelMetadata> metadata,
            Map<String, Object> additionalProperties) {
        this.brandId = brandId;
        this.providers = providers;
        this.routingMethod = routingMethod;
        this.if_ = if_;
        this.timeouts = timeouts;
        this.override = override;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Id of the brand that should be used for rendering the message.
     * If not specified, the brand configured as default brand will be used.
     */
    @JsonProperty("brand_id")
    public Optional<String> getBrandId() {
        return brandId;
    }

    /**
     * @return A list of providers enabled for this channel. Courier will select
     * one provider to send through unless routing_method is set to all.
     */
    @JsonProperty("providers")
    public Optional<List<String>> getProviders() {
        return providers;
    }

    /**
     * @return The method for selecting the providers to send the message with.
     * Single will send to one of the available providers for this channel,
     * all will send the message through all channels. Defaults to <code>single</code>.
     */
    @JsonProperty("routing_method")
    public Optional<RoutingMethod> getRoutingMethod() {
        return routingMethod;
    }

    /**
     * @return A JavaScript conditional expression to determine if the message should
     * be sent through the channel. Has access to the data and profile object.
     * For example, <code>data.name === profile.name</code>
     */
    @JsonProperty("if")
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("timeouts")
    public Optional<Timeouts> getTimeouts() {
        return timeouts;
    }

    /**
     * @return Channel specific overrides.
     */
    @JsonProperty("override")
    public Optional<Override> getOverride() {
        return override;
    }

    @JsonProperty("metadata")
    public Optional<ChannelMetadata> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Channel && equalTo((Channel) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Channel other) {
        return brandId.equals(other.brandId)
                && providers.equals(other.providers)
                && routingMethod.equals(other.routingMethod)
                && if_.equals(other.if_)
                && timeouts.equals(other.timeouts)
                && override.equals(other.override)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.brandId,
                this.providers,
                this.routingMethod,
                this.if_,
                this.timeouts,
                this.override,
                this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> brandId = Optional.empty();

        private Optional<List<String>> providers = Optional.empty();

        private Optional<RoutingMethod> routingMethod = Optional.empty();

        private Optional<String> if_ = Optional.empty();

        private Optional<Timeouts> timeouts = Optional.empty();

        private Optional<Override> override = Optional.empty();

        private Optional<ChannelMetadata> metadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Channel other) {
            brandId(other.getBrandId());
            providers(other.getProviders());
            routingMethod(other.getRoutingMethod());
            if_(other.getIf());
            timeouts(other.getTimeouts());
            override(other.getOverride());
            metadata(other.getMetadata());
            return this;
        }

        @JsonSetter(value = "brand_id", nulls = Nulls.SKIP)
        public Builder brandId(Optional<String> brandId) {
            this.brandId = brandId;
            return this;
        }

        public Builder brandId(String brandId) {
            this.brandId = Optional.of(brandId);
            return this;
        }

        @JsonSetter(value = "providers", nulls = Nulls.SKIP)
        public Builder providers(Optional<List<String>> providers) {
            this.providers = providers;
            return this;
        }

        public Builder providers(List<String> providers) {
            this.providers = Optional.of(providers);
            return this;
        }

        @JsonSetter(value = "routing_method", nulls = Nulls.SKIP)
        public Builder routingMethod(Optional<RoutingMethod> routingMethod) {
            this.routingMethod = routingMethod;
            return this;
        }

        public Builder routingMethod(RoutingMethod routingMethod) {
            this.routingMethod = Optional.of(routingMethod);
            return this;
        }

        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public Builder if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        public Builder if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @JsonSetter(value = "timeouts", nulls = Nulls.SKIP)
        public Builder timeouts(Optional<Timeouts> timeouts) {
            this.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(Timeouts timeouts) {
            this.timeouts = Optional.of(timeouts);
            return this;
        }

        @JsonSetter(value = "override", nulls = Nulls.SKIP)
        public Builder override(Optional<Override> override) {
            this.override = override;
            return this;
        }

        public Builder override(Override override) {
            this.override = Optional.of(override);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<ChannelMetadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(ChannelMetadata metadata) {
            this.metadata = Optional.of(metadata);
            return this;
        }

        public Channel build() {
            return new Channel(
                    brandId, providers, routingMethod, if_, timeouts, override, metadata, additionalProperties);
        }
    }
}
