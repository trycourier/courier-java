/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = WidgetBackground.Builder.class)
public final class WidgetBackground {
    private final Optional<String> topColor;

    private final Optional<String> bottomColor;

    private final Map<String, Object> additionalProperties;

    private WidgetBackground(
            Optional<String> topColor, Optional<String> bottomColor, Map<String, Object> additionalProperties) {
        this.topColor = topColor;
        this.bottomColor = bottomColor;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("topColor")
    public Optional<String> getTopColor() {
        return topColor;
    }

    @JsonProperty("bottomColor")
    public Optional<String> getBottomColor() {
        return bottomColor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WidgetBackground && equalTo((WidgetBackground) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WidgetBackground other) {
        return topColor.equals(other.topColor) && bottomColor.equals(other.bottomColor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.topColor, this.bottomColor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> topColor = Optional.empty();

        private Optional<String> bottomColor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(WidgetBackground other) {
            topColor(other.getTopColor());
            bottomColor(other.getBottomColor());
            return this;
        }

        @JsonSetter(value = "topColor", nulls = Nulls.SKIP)
        public Builder topColor(Optional<String> topColor) {
            this.topColor = topColor;
            return this;
        }

        public Builder topColor(String topColor) {
            this.topColor = Optional.of(topColor);
            return this;
        }

        @JsonSetter(value = "bottomColor", nulls = Nulls.SKIP)
        public Builder bottomColor(Optional<String> bottomColor) {
            this.bottomColor = bottomColor;
            return this;
        }

        public Builder bottomColor(String bottomColor) {
            this.bottomColor = Optional.of(bottomColor);
            return this;
        }

        public WidgetBackground build() {
            return new WidgetBackground(topColor, bottomColor, additionalProperties);
        }
    }
}
