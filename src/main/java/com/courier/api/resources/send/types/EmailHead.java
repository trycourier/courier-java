/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = EmailHead.Builder.class)
public final class EmailHead {
    private final boolean inheritDefault;

    private final Optional<String> content;

    private final Map<String, Object> additionalProperties;

    private EmailHead(boolean inheritDefault, Optional<String> content, Map<String, Object> additionalProperties) {
        this.inheritDefault = inheritDefault;
        this.content = content;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("inheritDefault")
    public boolean getInheritDefault() {
        return inheritDefault;
    }

    @JsonProperty("content")
    public Optional<String> getContent() {
        return content;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmailHead && equalTo((EmailHead) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmailHead other) {
        return inheritDefault == other.inheritDefault && content.equals(other.content);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.inheritDefault, this.content);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static InheritDefaultStage builder() {
        return new Builder();
    }

    public interface InheritDefaultStage {
        _FinalStage inheritDefault(boolean inheritDefault);

        Builder from(EmailHead other);
    }

    public interface _FinalStage {
        EmailHead build();

        _FinalStage content(Optional<String> content);

        _FinalStage content(String content);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements InheritDefaultStage, _FinalStage {
        private boolean inheritDefault;

        private Optional<String> content = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EmailHead other) {
            inheritDefault(other.getInheritDefault());
            content(other.getContent());
            return this;
        }

        @java.lang.Override
        @JsonSetter("inheritDefault")
        public _FinalStage inheritDefault(boolean inheritDefault) {
            this.inheritDefault = inheritDefault;
            return this;
        }

        @java.lang.Override
        public _FinalStage content(String content) {
            this.content = Optional.of(content);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public _FinalStage content(Optional<String> content) {
            this.content = content;
            return this;
        }

        @java.lang.Override
        public EmailHead build() {
            return new EmailHead(inheritDefault, content, additionalProperties);
        }
    }
}
