/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BrandTemplate.Builder.class)
public final class BrandTemplate implements IBrandTemplate {
    private final Optional<String> backgroundColor;

    private final Optional<String> blocksBackgroundColor;

    private final boolean enabled;

    private final Optional<String> footer;

    private final Optional<String> head;

    private final Optional<String> header;

    private final Optional<String> width;

    private final Map<String, Object> additionalProperties;

    private BrandTemplate(
            Optional<String> backgroundColor,
            Optional<String> blocksBackgroundColor,
            boolean enabled,
            Optional<String> footer,
            Optional<String> head,
            Optional<String> header,
            Optional<String> width,
            Map<String, Object> additionalProperties) {
        this.backgroundColor = backgroundColor;
        this.blocksBackgroundColor = blocksBackgroundColor;
        this.enabled = enabled;
        this.footer = footer;
        this.head = head;
        this.header = header;
        this.width = width;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("backgroundColor")
    @java.lang.Override
    public Optional<String> getBackgroundColor() {
        return backgroundColor;
    }

    @JsonProperty("blocksBackgroundColor")
    @java.lang.Override
    public Optional<String> getBlocksBackgroundColor() {
        return blocksBackgroundColor;
    }

    @JsonProperty("enabled")
    @java.lang.Override
    public boolean getEnabled() {
        return enabled;
    }

    @JsonProperty("footer")
    @java.lang.Override
    public Optional<String> getFooter() {
        return footer;
    }

    @JsonProperty("head")
    @java.lang.Override
    public Optional<String> getHead() {
        return head;
    }

    @JsonProperty("header")
    @java.lang.Override
    public Optional<String> getHeader() {
        return header;
    }

    @JsonProperty("width")
    @java.lang.Override
    public Optional<String> getWidth() {
        return width;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BrandTemplate && equalTo((BrandTemplate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BrandTemplate other) {
        return backgroundColor.equals(other.backgroundColor)
                && blocksBackgroundColor.equals(other.blocksBackgroundColor)
                && enabled == other.enabled
                && footer.equals(other.footer)
                && head.equals(other.head)
                && header.equals(other.header)
                && width.equals(other.width);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.backgroundColor,
                this.blocksBackgroundColor,
                this.enabled,
                this.footer,
                this.head,
                this.header,
                this.width);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EnabledStage builder() {
        return new Builder();
    }

    public interface EnabledStage {
        _FinalStage enabled(boolean enabled);

        Builder from(BrandTemplate other);
    }

    public interface _FinalStage {
        BrandTemplate build();

        _FinalStage backgroundColor(Optional<String> backgroundColor);

        _FinalStage backgroundColor(String backgroundColor);

        _FinalStage blocksBackgroundColor(Optional<String> blocksBackgroundColor);

        _FinalStage blocksBackgroundColor(String blocksBackgroundColor);

        _FinalStage footer(Optional<String> footer);

        _FinalStage footer(String footer);

        _FinalStage head(Optional<String> head);

        _FinalStage head(String head);

        _FinalStage header(Optional<String> header);

        _FinalStage header(String header);

        _FinalStage width(Optional<String> width);

        _FinalStage width(String width);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EnabledStage, _FinalStage {
        private boolean enabled;

        private Optional<String> width = Optional.empty();

        private Optional<String> header = Optional.empty();

        private Optional<String> head = Optional.empty();

        private Optional<String> footer = Optional.empty();

        private Optional<String> blocksBackgroundColor = Optional.empty();

        private Optional<String> backgroundColor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BrandTemplate other) {
            backgroundColor(other.getBackgroundColor());
            blocksBackgroundColor(other.getBlocksBackgroundColor());
            enabled(other.getEnabled());
            footer(other.getFooter());
            head(other.getHead());
            header(other.getHeader());
            width(other.getWidth());
            return this;
        }

        @java.lang.Override
        @JsonSetter("enabled")
        public _FinalStage enabled(boolean enabled) {
            this.enabled = enabled;
            return this;
        }

        @java.lang.Override
        public _FinalStage width(String width) {
            this.width = Optional.of(width);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "width", nulls = Nulls.SKIP)
        public _FinalStage width(Optional<String> width) {
            this.width = width;
            return this;
        }

        @java.lang.Override
        public _FinalStage header(String header) {
            this.header = Optional.of(header);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "header", nulls = Nulls.SKIP)
        public _FinalStage header(Optional<String> header) {
            this.header = header;
            return this;
        }

        @java.lang.Override
        public _FinalStage head(String head) {
            this.head = Optional.of(head);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "head", nulls = Nulls.SKIP)
        public _FinalStage head(Optional<String> head) {
            this.head = head;
            return this;
        }

        @java.lang.Override
        public _FinalStage footer(String footer) {
            this.footer = Optional.of(footer);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "footer", nulls = Nulls.SKIP)
        public _FinalStage footer(Optional<String> footer) {
            this.footer = footer;
            return this;
        }

        @java.lang.Override
        public _FinalStage blocksBackgroundColor(String blocksBackgroundColor) {
            this.blocksBackgroundColor = Optional.of(blocksBackgroundColor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "blocksBackgroundColor", nulls = Nulls.SKIP)
        public _FinalStage blocksBackgroundColor(Optional<String> blocksBackgroundColor) {
            this.blocksBackgroundColor = blocksBackgroundColor;
            return this;
        }

        @java.lang.Override
        public _FinalStage backgroundColor(String backgroundColor) {
            this.backgroundColor = Optional.of(backgroundColor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "backgroundColor", nulls = Nulls.SKIP)
        public _FinalStage backgroundColor(Optional<String> backgroundColor) {
            this.backgroundColor = backgroundColor;
            return this;
        }

        @java.lang.Override
        public BrandTemplate build() {
            return new BrandTemplate(
                    backgroundColor, blocksBackgroundColor, enabled, footer, head, header, width, additionalProperties);
        }
    }
}
