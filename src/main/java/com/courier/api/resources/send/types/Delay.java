/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Delay.Builder.class)
public final class Delay {
    private final Optional<Integer> duration;

    private final Optional<String> until;

    private final Map<String, Object> additionalProperties;

    private Delay(Optional<Integer> duration, Optional<String> until, Map<String, Object> additionalProperties) {
        this.duration = duration;
        this.until = until;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The duration of the delay in milliseconds.
     */
    @JsonProperty("duration")
    public Optional<Integer> getDuration() {
        return duration;
    }

    /**
     * @return An ISO 8601 timestamp that specifies when it should be delivered or an OpenStreetMap opening_hours-like format that specifies the <a href="https://www.courier.com/docs/platform/sending/failover/#delivery-window">Delivery Window</a> (e.g., 'Mo-Fr 08:00-18:00pm')
     */
    @JsonProperty("until")
    public Optional<String> getUntil() {
        return until;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Delay && equalTo((Delay) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Delay other) {
        return duration.equals(other.duration) && until.equals(other.until);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.duration, this.until);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> duration = Optional.empty();

        private Optional<String> until = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Delay other) {
            duration(other.getDuration());
            until(other.getUntil());
            return this;
        }

        /**
         * <p>The duration of the delay in milliseconds.</p>
         */
        @JsonSetter(value = "duration", nulls = Nulls.SKIP)
        public Builder duration(Optional<Integer> duration) {
            this.duration = duration;
            return this;
        }

        public Builder duration(Integer duration) {
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        /**
         * <p>An ISO 8601 timestamp that specifies when it should be delivered or an OpenStreetMap opening_hours-like format that specifies the <a href="https://www.courier.com/docs/platform/sending/failover/#delivery-window">Delivery Window</a> (e.g., 'Mo-Fr 08:00-18:00pm')</p>
         */
        @JsonSetter(value = "until", nulls = Nulls.SKIP)
        public Builder until(Optional<String> until) {
            this.until = until;
            return this;
        }

        public Builder until(String until) {
            this.until = Optional.ofNullable(until);
            return this;
        }

        public Delay build() {
            return new Delay(duration, until, additionalProperties);
        }
    }
}
