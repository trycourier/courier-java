/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Logo.Builder.class)
public final class Logo {
    private final Optional<String> href;

    private final Optional<String> image;

    private final Map<String, Object> additionalProperties;

    private Logo(Optional<String> href, Optional<String> image, Map<String, Object> additionalProperties) {
        this.href = href;
        this.image = image;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("href")
    public Optional<String> getHref() {
        return href;
    }

    @JsonProperty("image")
    public Optional<String> getImage() {
        return image;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Logo && equalTo((Logo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Logo other) {
        return href.equals(other.href) && image.equals(other.image);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.href, this.image);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> href = Optional.empty();

        private Optional<String> image = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Logo other) {
            href(other.getHref());
            image(other.getImage());
            return this;
        }

        @JsonSetter(value = "href", nulls = Nulls.SKIP)
        public Builder href(Optional<String> href) {
            this.href = href;
            return this;
        }

        public Builder href(String href) {
            this.href = Optional.of(href);
            return this;
        }

        @JsonSetter(value = "image", nulls = Nulls.SKIP)
        public Builder image(Optional<String> image) {
            this.image = image;
            return this;
        }

        public Builder image(String image) {
            this.image = Optional.of(image);
            return this;
        }

        public Logo build() {
            return new Logo(href, image, additionalProperties);
        }
    }
}
