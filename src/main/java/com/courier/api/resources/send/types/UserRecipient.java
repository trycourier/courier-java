/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = UserRecipient.Builder.class)
public final class UserRecipient implements IUserRecipientType {
    private final Optional<String> accountId;

    private final Optional<MessageContext> context;

    private final Optional<Map<String, Object>> data;

    private final Optional<String> email;

    private final Optional<String> locale;

    private final Optional<String> userId;

    private final Optional<String> phoneNumber;

    private final Optional<IProfilePreferences> preferences;

    private final Optional<String> tenantId;

    private final Map<String, Object> additionalProperties;

    private UserRecipient(
            Optional<String> accountId,
            Optional<MessageContext> context,
            Optional<Map<String, Object>> data,
            Optional<String> email,
            Optional<String> locale,
            Optional<String> userId,
            Optional<String> phoneNumber,
            Optional<IProfilePreferences> preferences,
            Optional<String> tenantId,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.context = context;
        this.data = data;
        this.email = email;
        this.locale = locale;
        this.userId = userId;
        this.phoneNumber = phoneNumber;
        this.preferences = preferences;
        this.tenantId = tenantId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Use <code>tenant_id</code> instad.
     */
    @JsonProperty("account_id")
    public Optional<String> getAccountId() {
        return accountId;
    }

    /**
     * @return Context information such as tenant_id to send the notification with.
     */
    @JsonProperty("context")
    public Optional<MessageContext> getContext() {
        return context;
    }

    @JsonProperty("data")
    public Optional<Map<String, Object>> getData() {
        return data;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return The user's preferred ISO 639-1 language code.
     */
    @JsonProperty("locale")
    public Optional<String> getLocale() {
        return locale;
    }

    @JsonProperty("user_id")
    public Optional<String> getUserId() {
        return userId;
    }

    @JsonProperty("phone_number")
    public Optional<String> getPhoneNumber() {
        return phoneNumber;
    }

    @JsonProperty("preferences")
    public Optional<IProfilePreferences> getPreferences() {
        return preferences;
    }

    /**
     * @return An id of a tenant, <a href="https://www.courier.com/docs/reference/tenants">see tenants api docs</a>.
     * Will load brand, default preferences and any other base context data associated with this tenant.
     */
    @JsonProperty("tenant_id")
    public Optional<String> getTenantId() {
        return tenantId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserRecipient && equalTo((UserRecipient) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserRecipient other) {
        return accountId.equals(other.accountId)
                && context.equals(other.context)
                && data.equals(other.data)
                && email.equals(other.email)
                && locale.equals(other.locale)
                && userId.equals(other.userId)
                && phoneNumber.equals(other.phoneNumber)
                && preferences.equals(other.preferences)
                && tenantId.equals(other.tenantId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountId,
                this.context,
                this.data,
                this.email,
                this.locale,
                this.userId,
                this.phoneNumber,
                this.preferences,
                this.tenantId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountId = Optional.empty();

        private Optional<MessageContext> context = Optional.empty();

        private Optional<Map<String, Object>> data = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> locale = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private Optional<String> phoneNumber = Optional.empty();

        private Optional<IProfilePreferences> preferences = Optional.empty();

        private Optional<String> tenantId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UserRecipient other) {
            accountId(other.getAccountId());
            context(other.getContext());
            data(other.getData());
            email(other.getEmail());
            locale(other.getLocale());
            userId(other.getUserId());
            phoneNumber(other.getPhoneNumber());
            preferences(other.getPreferences());
            tenantId(other.getTenantId());
            return this;
        }

        @JsonSetter(value = "account_id", nulls = Nulls.SKIP)
        public Builder accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            this.accountId = Optional.of(accountId);
            return this;
        }

        @JsonSetter(value = "context", nulls = Nulls.SKIP)
        public Builder context(Optional<MessageContext> context) {
            this.context = context;
            return this;
        }

        public Builder context(MessageContext context) {
            this.context = Optional.of(context);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<Map<String, Object>> data) {
            this.data = data;
            return this;
        }

        public Builder data(Map<String, Object> data) {
            this.data = Optional.of(data);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.of(email);
            return this;
        }

        @JsonSetter(value = "locale", nulls = Nulls.SKIP)
        public Builder locale(Optional<String> locale) {
            this.locale = locale;
            return this;
        }

        public Builder locale(String locale) {
            this.locale = Optional.of(locale);
            return this;
        }

        @JsonSetter(value = "user_id", nulls = Nulls.SKIP)
        public Builder userId(Optional<String> userId) {
            this.userId = userId;
            return this;
        }

        public Builder userId(String userId) {
            this.userId = Optional.of(userId);
            return this;
        }

        @JsonSetter(value = "phone_number", nulls = Nulls.SKIP)
        public Builder phoneNumber(Optional<String> phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder phoneNumber(String phoneNumber) {
            this.phoneNumber = Optional.of(phoneNumber);
            return this;
        }

        @JsonSetter(value = "preferences", nulls = Nulls.SKIP)
        public Builder preferences(Optional<IProfilePreferences> preferences) {
            this.preferences = preferences;
            return this;
        }

        public Builder preferences(IProfilePreferences preferences) {
            this.preferences = Optional.of(preferences);
            return this;
        }

        @JsonSetter(value = "tenant_id", nulls = Nulls.SKIP)
        public Builder tenantId(Optional<String> tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            this.tenantId = Optional.of(tenantId);
            return this;
        }

        public UserRecipient build() {
            return new UserRecipient(
                    accountId,
                    context,
                    data,
                    email,
                    locale,
                    userId,
                    phoneNumber,
                    preferences,
                    tenantId,
                    additionalProperties);
        }
    }
}
