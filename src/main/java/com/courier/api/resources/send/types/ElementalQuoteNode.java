/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ElementalQuoteNode.Builder.class)
public final class ElementalQuoteNode implements IElementalBaseNode {
    private final Optional<List<String>> channels;

    private final Optional<String> ref;

    private final Optional<String> if_;

    private final Optional<String> loop;

    private final String content;

    private final Optional<IAlignment> align;

    private final Optional<String> borderColor;

    private final TextStyle textStyle;

    private final Optional<Map<String, Locale>> locales;

    private final Map<String, Object> additionalProperties;

    private ElementalQuoteNode(
            Optional<List<String>> channels,
            Optional<String> ref,
            Optional<String> if_,
            Optional<String> loop,
            String content,
            Optional<IAlignment> align,
            Optional<String> borderColor,
            TextStyle textStyle,
            Optional<Map<String, Locale>> locales,
            Map<String, Object> additionalProperties) {
        this.channels = channels;
        this.ref = ref;
        this.if_ = if_;
        this.loop = loop;
        this.content = content;
        this.align = align;
        this.borderColor = borderColor;
        this.textStyle = textStyle;
        this.locales = locales;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("channels")
    @java.lang.Override
    public Optional<List<String>> getChannels() {
        return channels;
    }

    @JsonProperty("ref")
    @java.lang.Override
    public Optional<String> getRef() {
        return ref;
    }

    @JsonProperty("if")
    @java.lang.Override
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("loop")
    @java.lang.Override
    public Optional<String> getLoop() {
        return loop;
    }

    /**
     * @return The text value of the quote.
     */
    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    /**
     * @return Alignment of the quote.
     */
    @JsonProperty("align")
    public Optional<IAlignment> getAlign() {
        return align;
    }

    /**
     * @return CSS border color property. For example, <code>#fff</code>
     */
    @JsonProperty("borderColor")
    public Optional<String> getBorderColor() {
        return borderColor;
    }

    @JsonProperty("text_style")
    public TextStyle getTextStyle() {
        return textStyle;
    }

    /**
     * @return Region specific content. See <a href="https://www.courier.com/docs/platform/content/elemental/locales/">locales docs</a> for more details.
     */
    @JsonProperty("locales")
    public Optional<Map<String, Locale>> getLocales() {
        return locales;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ElementalQuoteNode && equalTo((ElementalQuoteNode) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ElementalQuoteNode other) {
        return channels.equals(other.channels)
                && ref.equals(other.ref)
                && if_.equals(other.if_)
                && loop.equals(other.loop)
                && content.equals(other.content)
                && align.equals(other.align)
                && borderColor.equals(other.borderColor)
                && textStyle.equals(other.textStyle)
                && locales.equals(other.locales);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.channels,
                this.ref,
                this.if_,
                this.loop,
                this.content,
                this.align,
                this.borderColor,
                this.textStyle,
                this.locales);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ContentStage builder() {
        return new Builder();
    }

    public interface ContentStage {
        TextStyleStage content(String content);

        Builder from(ElementalQuoteNode other);
    }

    public interface TextStyleStage {
        _FinalStage textStyle(TextStyle textStyle);
    }

    public interface _FinalStage {
        ElementalQuoteNode build();

        _FinalStage channels(Optional<List<String>> channels);

        _FinalStage channels(List<String> channels);

        _FinalStage ref(Optional<String> ref);

        _FinalStage ref(String ref);

        _FinalStage if_(Optional<String> if_);

        _FinalStage if_(String if_);

        _FinalStage loop(Optional<String> loop);

        _FinalStage loop(String loop);

        _FinalStage align(Optional<IAlignment> align);

        _FinalStage align(IAlignment align);

        _FinalStage borderColor(Optional<String> borderColor);

        _FinalStage borderColor(String borderColor);

        _FinalStage locales(Optional<Map<String, Locale>> locales);

        _FinalStage locales(Map<String, Locale> locales);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ContentStage, TextStyleStage, _FinalStage {
        private String content;

        private TextStyle textStyle;

        private Optional<Map<String, Locale>> locales = Optional.empty();

        private Optional<String> borderColor = Optional.empty();

        private Optional<IAlignment> align = Optional.empty();

        private Optional<String> loop = Optional.empty();

        private Optional<String> if_ = Optional.empty();

        private Optional<String> ref = Optional.empty();

        private Optional<List<String>> channels = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ElementalQuoteNode other) {
            channels(other.getChannels());
            ref(other.getRef());
            if_(other.getIf());
            loop(other.getLoop());
            content(other.getContent());
            align(other.getAlign());
            borderColor(other.getBorderColor());
            textStyle(other.getTextStyle());
            locales(other.getLocales());
            return this;
        }

        /**
         * <p>The text value of the quote.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public TextStyleStage content(String content) {
            this.content = content;
            return this;
        }

        @java.lang.Override
        @JsonSetter("text_style")
        public _FinalStage textStyle(TextStyle textStyle) {
            this.textStyle = textStyle;
            return this;
        }

        /**
         * <p>Region specific content. See <a href="https://www.courier.com/docs/platform/content/elemental/locales/">locales docs</a> for more details.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locales(Map<String, Locale> locales) {
            this.locales = Optional.of(locales);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "locales", nulls = Nulls.SKIP)
        public _FinalStage locales(Optional<Map<String, Locale>> locales) {
            this.locales = locales;
            return this;
        }

        /**
         * <p>CSS border color property. For example, <code>#fff</code></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage borderColor(String borderColor) {
            this.borderColor = Optional.of(borderColor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "borderColor", nulls = Nulls.SKIP)
        public _FinalStage borderColor(Optional<String> borderColor) {
            this.borderColor = borderColor;
            return this;
        }

        /**
         * <p>Alignment of the quote.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage align(IAlignment align) {
            this.align = Optional.of(align);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "align", nulls = Nulls.SKIP)
        public _FinalStage align(Optional<IAlignment> align) {
            this.align = align;
            return this;
        }

        @java.lang.Override
        public _FinalStage loop(String loop) {
            this.loop = Optional.of(loop);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "loop", nulls = Nulls.SKIP)
        public _FinalStage loop(Optional<String> loop) {
            this.loop = loop;
            return this;
        }

        @java.lang.Override
        public _FinalStage if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public _FinalStage if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        @java.lang.Override
        public _FinalStage ref(String ref) {
            this.ref = Optional.of(ref);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ref", nulls = Nulls.SKIP)
        public _FinalStage ref(Optional<String> ref) {
            this.ref = ref;
            return this;
        }

        @java.lang.Override
        public _FinalStage channels(List<String> channels) {
            this.channels = Optional.of(channels);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "channels", nulls = Nulls.SKIP)
        public _FinalStage channels(Optional<List<String>> channels) {
            this.channels = channels;
            return this;
        }

        @java.lang.Override
        public ElementalQuoteNode build() {
            return new ElementalQuoteNode(
                    channels, ref, if_, loop, content, align, borderColor, textStyle, locales, additionalProperties);
        }
    }
}
