/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = MessageProvidersType.Builder.class)
public final class MessageProvidersType {
    private final Optional<Map<String, Object>> override;

    private final Optional<String> if_;

    private final Optional<Integer> timeouts;

    private final Optional<Metadata> metadata;

    private final Map<String, Object> additionalProperties;

    private MessageProvidersType(
            Optional<Map<String, Object>> override,
            Optional<String> if_,
            Optional<Integer> timeouts,
            Optional<Metadata> metadata,
            Map<String, Object> additionalProperties) {
        this.override = override;
        this.if_ = if_;
        this.timeouts = timeouts;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Provider specific overrides.
     */
    @JsonProperty("override")
    public Optional<Map<String, Object>> getOverride() {
        return override;
    }

    /**
     * @return A JavaScript conditional expression to determine if the message should be sent
     * through the channel. Has access to the data and profile object. For example,
     * <code>data.name === profile.name</code>
     */
    @JsonProperty("if")
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("timeouts")
    public Optional<Integer> getTimeouts() {
        return timeouts;
    }

    @JsonProperty("metadata")
    public Optional<Metadata> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MessageProvidersType && equalTo((MessageProvidersType) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MessageProvidersType other) {
        return override.equals(other.override)
                && if_.equals(other.if_)
                && timeouts.equals(other.timeouts)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.override, this.if_, this.timeouts, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Object>> override = Optional.empty();

        private Optional<String> if_ = Optional.empty();

        private Optional<Integer> timeouts = Optional.empty();

        private Optional<Metadata> metadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MessageProvidersType other) {
            override(other.getOverride());
            if_(other.getIf());
            timeouts(other.getTimeouts());
            metadata(other.getMetadata());
            return this;
        }

        @JsonSetter(value = "override", nulls = Nulls.SKIP)
        public Builder override(Optional<Map<String, Object>> override) {
            this.override = override;
            return this;
        }

        public Builder override(Map<String, Object> override) {
            this.override = Optional.of(override);
            return this;
        }

        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public Builder if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        public Builder if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @JsonSetter(value = "timeouts", nulls = Nulls.SKIP)
        public Builder timeouts(Optional<Integer> timeouts) {
            this.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(Integer timeouts) {
            this.timeouts = Optional.of(timeouts);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Metadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Metadata metadata) {
            this.metadata = Optional.of(metadata);
            return this;
        }

        public MessageProvidersType build() {
            return new MessageProvidersType(override, if_, timeouts, metadata, additionalProperties);
        }
    }
}
