/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Utm.Builder.class)
public final class Utm {
    private final Optional<String> source;

    private final Optional<String> medium;

    private final Optional<String> campaign;

    private final Optional<String> term;

    private final Optional<String> content;

    private final Map<String, Object> additionalProperties;

    private Utm(
            Optional<String> source,
            Optional<String> medium,
            Optional<String> campaign,
            Optional<String> term,
            Optional<String> content,
            Map<String, Object> additionalProperties) {
        this.source = source;
        this.medium = medium;
        this.campaign = campaign;
        this.term = term;
        this.content = content;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("medium")
    public Optional<String> getMedium() {
        return medium;
    }

    @JsonProperty("campaign")
    public Optional<String> getCampaign() {
        return campaign;
    }

    @JsonProperty("term")
    public Optional<String> getTerm() {
        return term;
    }

    @JsonProperty("content")
    public Optional<String> getContent() {
        return content;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Utm && equalTo((Utm) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Utm other) {
        return source.equals(other.source)
                && medium.equals(other.medium)
                && campaign.equals(other.campaign)
                && term.equals(other.term)
                && content.equals(other.content);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.source, this.medium, this.campaign, this.term, this.content);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> source = Optional.empty();

        private Optional<String> medium = Optional.empty();

        private Optional<String> campaign = Optional.empty();

        private Optional<String> term = Optional.empty();

        private Optional<String> content = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Utm other) {
            source(other.getSource());
            medium(other.getMedium());
            campaign(other.getCampaign());
            term(other.getTerm());
            content(other.getContent());
            return this;
        }

        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.of(source);
            return this;
        }

        @JsonSetter(value = "medium", nulls = Nulls.SKIP)
        public Builder medium(Optional<String> medium) {
            this.medium = medium;
            return this;
        }

        public Builder medium(String medium) {
            this.medium = Optional.of(medium);
            return this;
        }

        @JsonSetter(value = "campaign", nulls = Nulls.SKIP)
        public Builder campaign(Optional<String> campaign) {
            this.campaign = campaign;
            return this;
        }

        public Builder campaign(String campaign) {
            this.campaign = Optional.of(campaign);
            return this;
        }

        @JsonSetter(value = "term", nulls = Nulls.SKIP)
        public Builder term(Optional<String> term) {
            this.term = term;
            return this;
        }

        public Builder term(String term) {
            this.term = Optional.of(term);
            return this;
        }

        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public Builder content(Optional<String> content) {
            this.content = content;
            return this;
        }

        public Builder content(String content) {
            this.content = Optional.of(content);
            return this;
        }

        public Utm build() {
            return new Utm(source, medium, campaign, term, content, additionalProperties);
        }
    }
}
