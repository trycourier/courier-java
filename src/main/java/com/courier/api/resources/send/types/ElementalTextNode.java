/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ElementalTextNode.Builder.class)
public final class ElementalTextNode implements IElementalBaseNode {
    private final Optional<List<String>> channels;

    private final Optional<String> ref;

    private final Optional<String> if_;

    private final Optional<String> loop;

    private final String content;

    private final TextAlign align;

    private final Optional<TextStyle> textStyle;

    private final Optional<String> color;

    private final Optional<String> bold;

    private final Optional<String> italic;

    private final Optional<String> strikethrough;

    private final Optional<String> underline;

    private final Optional<Map<String, Locale>> locales;

    private final Optional<String> format;

    private final Map<String, Object> additionalProperties;

    private ElementalTextNode(
            Optional<List<String>> channels,
            Optional<String> ref,
            Optional<String> if_,
            Optional<String> loop,
            String content,
            TextAlign align,
            Optional<TextStyle> textStyle,
            Optional<String> color,
            Optional<String> bold,
            Optional<String> italic,
            Optional<String> strikethrough,
            Optional<String> underline,
            Optional<Map<String, Locale>> locales,
            Optional<String> format,
            Map<String, Object> additionalProperties) {
        this.channels = channels;
        this.ref = ref;
        this.if_ = if_;
        this.loop = loop;
        this.content = content;
        this.align = align;
        this.textStyle = textStyle;
        this.color = color;
        this.bold = bold;
        this.italic = italic;
        this.strikethrough = strikethrough;
        this.underline = underline;
        this.locales = locales;
        this.format = format;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("channels")
    @java.lang.Override
    public Optional<List<String>> getChannels() {
        return channels;
    }

    @JsonProperty("ref")
    @java.lang.Override
    public Optional<String> getRef() {
        return ref;
    }

    @JsonProperty("if")
    @java.lang.Override
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("loop")
    @java.lang.Override
    public Optional<String> getLoop() {
        return loop;
    }

    /**
     * @return The text content displayed in the notification. Either this
     * field must be specified, or the elements field
     */
    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    /**
     * @return Text alignment.
     */
    @JsonProperty("align")
    public TextAlign getAlign() {
        return align;
    }

    /**
     * @return Allows the text to be rendered as a heading level.
     */
    @JsonProperty("text_style")
    public Optional<TextStyle> getTextStyle() {
        return textStyle;
    }

    /**
     * @return Specifies the color of text. Can be any valid css color value
     */
    @JsonProperty("color")
    public Optional<String> getColor() {
        return color;
    }

    /**
     * @return Apply bold to the text
     */
    @JsonProperty("bold")
    public Optional<String> getBold() {
        return bold;
    }

    /**
     * @return Apply italics to the text
     */
    @JsonProperty("italic")
    public Optional<String> getItalic() {
        return italic;
    }

    /**
     * @return Apply a strike through the text
     */
    @JsonProperty("strikethrough")
    public Optional<String> getStrikethrough() {
        return strikethrough;
    }

    /**
     * @return Apply an underline to the text
     */
    @JsonProperty("underline")
    public Optional<String> getUnderline() {
        return underline;
    }

    /**
     * @return Region specific content. See <a href="https://www.courier.com/docs/platform/content/elemental/locales/">locales docs</a> for more details.
     */
    @JsonProperty("locales")
    public Optional<Map<String, Locale>> getLocales() {
        return locales;
    }

    @JsonProperty("format")
    public Optional<String> getFormat() {
        return format;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ElementalTextNode && equalTo((ElementalTextNode) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ElementalTextNode other) {
        return channels.equals(other.channels)
                && ref.equals(other.ref)
                && if_.equals(other.if_)
                && loop.equals(other.loop)
                && content.equals(other.content)
                && align.equals(other.align)
                && textStyle.equals(other.textStyle)
                && color.equals(other.color)
                && bold.equals(other.bold)
                && italic.equals(other.italic)
                && strikethrough.equals(other.strikethrough)
                && underline.equals(other.underline)
                && locales.equals(other.locales)
                && format.equals(other.format);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.channels,
                this.ref,
                this.if_,
                this.loop,
                this.content,
                this.align,
                this.textStyle,
                this.color,
                this.bold,
                this.italic,
                this.strikethrough,
                this.underline,
                this.locales,
                this.format);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ContentStage builder() {
        return new Builder();
    }

    public interface ContentStage {
        AlignStage content(String content);

        Builder from(ElementalTextNode other);
    }

    public interface AlignStage {
        _FinalStage align(TextAlign align);
    }

    public interface _FinalStage {
        ElementalTextNode build();

        _FinalStage channels(Optional<List<String>> channels);

        _FinalStage channels(List<String> channels);

        _FinalStage ref(Optional<String> ref);

        _FinalStage ref(String ref);

        _FinalStage if_(Optional<String> if_);

        _FinalStage if_(String if_);

        _FinalStage loop(Optional<String> loop);

        _FinalStage loop(String loop);

        _FinalStage textStyle(Optional<TextStyle> textStyle);

        _FinalStage textStyle(TextStyle textStyle);

        _FinalStage color(Optional<String> color);

        _FinalStage color(String color);

        _FinalStage bold(Optional<String> bold);

        _FinalStage bold(String bold);

        _FinalStage italic(Optional<String> italic);

        _FinalStage italic(String italic);

        _FinalStage strikethrough(Optional<String> strikethrough);

        _FinalStage strikethrough(String strikethrough);

        _FinalStage underline(Optional<String> underline);

        _FinalStage underline(String underline);

        _FinalStage locales(Optional<Map<String, Locale>> locales);

        _FinalStage locales(Map<String, Locale> locales);

        _FinalStage format(Optional<String> format);

        _FinalStage format(String format);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ContentStage, AlignStage, _FinalStage {
        private String content;

        private TextAlign align;

        private Optional<String> format = Optional.empty();

        private Optional<Map<String, Locale>> locales = Optional.empty();

        private Optional<String> underline = Optional.empty();

        private Optional<String> strikethrough = Optional.empty();

        private Optional<String> italic = Optional.empty();

        private Optional<String> bold = Optional.empty();

        private Optional<String> color = Optional.empty();

        private Optional<TextStyle> textStyle = Optional.empty();

        private Optional<String> loop = Optional.empty();

        private Optional<String> if_ = Optional.empty();

        private Optional<String> ref = Optional.empty();

        private Optional<List<String>> channels = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ElementalTextNode other) {
            channels(other.getChannels());
            ref(other.getRef());
            if_(other.getIf());
            loop(other.getLoop());
            content(other.getContent());
            align(other.getAlign());
            textStyle(other.getTextStyle());
            color(other.getColor());
            bold(other.getBold());
            italic(other.getItalic());
            strikethrough(other.getStrikethrough());
            underline(other.getUnderline());
            locales(other.getLocales());
            format(other.getFormat());
            return this;
        }

        /**
         * <p>The text content displayed in the notification. Either this
         * field must be specified, or the elements field</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public AlignStage content(String content) {
            this.content = content;
            return this;
        }

        /**
         * <p>Text alignment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("align")
        public _FinalStage align(TextAlign align) {
            this.align = align;
            return this;
        }

        @java.lang.Override
        public _FinalStage format(String format) {
            this.format = Optional.of(format);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "format", nulls = Nulls.SKIP)
        public _FinalStage format(Optional<String> format) {
            this.format = format;
            return this;
        }

        /**
         * <p>Region specific content. See <a href="https://www.courier.com/docs/platform/content/elemental/locales/">locales docs</a> for more details.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locales(Map<String, Locale> locales) {
            this.locales = Optional.of(locales);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "locales", nulls = Nulls.SKIP)
        public _FinalStage locales(Optional<Map<String, Locale>> locales) {
            this.locales = locales;
            return this;
        }

        /**
         * <p>Apply an underline to the text</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage underline(String underline) {
            this.underline = Optional.of(underline);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "underline", nulls = Nulls.SKIP)
        public _FinalStage underline(Optional<String> underline) {
            this.underline = underline;
            return this;
        }

        /**
         * <p>Apply a strike through the text</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage strikethrough(String strikethrough) {
            this.strikethrough = Optional.of(strikethrough);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "strikethrough", nulls = Nulls.SKIP)
        public _FinalStage strikethrough(Optional<String> strikethrough) {
            this.strikethrough = strikethrough;
            return this;
        }

        /**
         * <p>Apply italics to the text</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage italic(String italic) {
            this.italic = Optional.of(italic);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "italic", nulls = Nulls.SKIP)
        public _FinalStage italic(Optional<String> italic) {
            this.italic = italic;
            return this;
        }

        /**
         * <p>Apply bold to the text</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bold(String bold) {
            this.bold = Optional.of(bold);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "bold", nulls = Nulls.SKIP)
        public _FinalStage bold(Optional<String> bold) {
            this.bold = bold;
            return this;
        }

        /**
         * <p>Specifies the color of text. Can be any valid css color value</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage color(String color) {
            this.color = Optional.of(color);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "color", nulls = Nulls.SKIP)
        public _FinalStage color(Optional<String> color) {
            this.color = color;
            return this;
        }

        /**
         * <p>Allows the text to be rendered as a heading level.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage textStyle(TextStyle textStyle) {
            this.textStyle = Optional.of(textStyle);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "text_style", nulls = Nulls.SKIP)
        public _FinalStage textStyle(Optional<TextStyle> textStyle) {
            this.textStyle = textStyle;
            return this;
        }

        @java.lang.Override
        public _FinalStage loop(String loop) {
            this.loop = Optional.of(loop);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "loop", nulls = Nulls.SKIP)
        public _FinalStage loop(Optional<String> loop) {
            this.loop = loop;
            return this;
        }

        @java.lang.Override
        public _FinalStage if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public _FinalStage if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        @java.lang.Override
        public _FinalStage ref(String ref) {
            this.ref = Optional.of(ref);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ref", nulls = Nulls.SKIP)
        public _FinalStage ref(Optional<String> ref) {
            this.ref = ref;
            return this;
        }

        @java.lang.Override
        public _FinalStage channels(List<String> channels) {
            this.channels = Optional.of(channels);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "channels", nulls = Nulls.SKIP)
        public _FinalStage channels(Optional<List<String>> channels) {
            this.channels = channels;
            return this;
        }

        @java.lang.Override
        public ElementalTextNode build() {
            return new ElementalTextNode(
                    channels,
                    ref,
                    if_,
                    loop,
                    content,
                    align,
                    textStyle,
                    color,
                    bold,
                    italic,
                    strikethrough,
                    underline,
                    locales,
                    format,
                    additionalProperties);
        }
    }
}
