/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BrandSettingsSocialPresence.Builder.class)
public final class BrandSettingsSocialPresence {
    private final Optional<Boolean> inheritDefault;

    private final Optional<BaseSocialPresence> facebook;

    private final Optional<BaseSocialPresence> instagram;

    private final Optional<BaseSocialPresence> linkedin;

    private final Optional<BaseSocialPresence> medium;

    private final Optional<BaseSocialPresence> twitter;

    private final Map<String, Object> additionalProperties;

    private BrandSettingsSocialPresence(
            Optional<Boolean> inheritDefault,
            Optional<BaseSocialPresence> facebook,
            Optional<BaseSocialPresence> instagram,
            Optional<BaseSocialPresence> linkedin,
            Optional<BaseSocialPresence> medium,
            Optional<BaseSocialPresence> twitter,
            Map<String, Object> additionalProperties) {
        this.inheritDefault = inheritDefault;
        this.facebook = facebook;
        this.instagram = instagram;
        this.linkedin = linkedin;
        this.medium = medium;
        this.twitter = twitter;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("inheritDefault")
    public Optional<Boolean> getInheritDefault() {
        return inheritDefault;
    }

    @JsonProperty("facebook")
    public Optional<BaseSocialPresence> getFacebook() {
        return facebook;
    }

    @JsonProperty("instagram")
    public Optional<BaseSocialPresence> getInstagram() {
        return instagram;
    }

    @JsonProperty("linkedin")
    public Optional<BaseSocialPresence> getLinkedin() {
        return linkedin;
    }

    @JsonProperty("medium")
    public Optional<BaseSocialPresence> getMedium() {
        return medium;
    }

    @JsonProperty("twitter")
    public Optional<BaseSocialPresence> getTwitter() {
        return twitter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BrandSettingsSocialPresence && equalTo((BrandSettingsSocialPresence) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BrandSettingsSocialPresence other) {
        return inheritDefault.equals(other.inheritDefault)
                && facebook.equals(other.facebook)
                && instagram.equals(other.instagram)
                && linkedin.equals(other.linkedin)
                && medium.equals(other.medium)
                && twitter.equals(other.twitter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.inheritDefault, this.facebook, this.instagram, this.linkedin, this.medium, this.twitter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> inheritDefault = Optional.empty();

        private Optional<BaseSocialPresence> facebook = Optional.empty();

        private Optional<BaseSocialPresence> instagram = Optional.empty();

        private Optional<BaseSocialPresence> linkedin = Optional.empty();

        private Optional<BaseSocialPresence> medium = Optional.empty();

        private Optional<BaseSocialPresence> twitter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BrandSettingsSocialPresence other) {
            inheritDefault(other.getInheritDefault());
            facebook(other.getFacebook());
            instagram(other.getInstagram());
            linkedin(other.getLinkedin());
            medium(other.getMedium());
            twitter(other.getTwitter());
            return this;
        }

        @JsonSetter(value = "inheritDefault", nulls = Nulls.SKIP)
        public Builder inheritDefault(Optional<Boolean> inheritDefault) {
            this.inheritDefault = inheritDefault;
            return this;
        }

        public Builder inheritDefault(Boolean inheritDefault) {
            this.inheritDefault = Optional.of(inheritDefault);
            return this;
        }

        @JsonSetter(value = "facebook", nulls = Nulls.SKIP)
        public Builder facebook(Optional<BaseSocialPresence> facebook) {
            this.facebook = facebook;
            return this;
        }

        public Builder facebook(BaseSocialPresence facebook) {
            this.facebook = Optional.of(facebook);
            return this;
        }

        @JsonSetter(value = "instagram", nulls = Nulls.SKIP)
        public Builder instagram(Optional<BaseSocialPresence> instagram) {
            this.instagram = instagram;
            return this;
        }

        public Builder instagram(BaseSocialPresence instagram) {
            this.instagram = Optional.of(instagram);
            return this;
        }

        @JsonSetter(value = "linkedin", nulls = Nulls.SKIP)
        public Builder linkedin(Optional<BaseSocialPresence> linkedin) {
            this.linkedin = linkedin;
            return this;
        }

        public Builder linkedin(BaseSocialPresence linkedin) {
            this.linkedin = Optional.of(linkedin);
            return this;
        }

        @JsonSetter(value = "medium", nulls = Nulls.SKIP)
        public Builder medium(Optional<BaseSocialPresence> medium) {
            this.medium = medium;
            return this;
        }

        public Builder medium(BaseSocialPresence medium) {
            this.medium = Optional.of(medium);
            return this;
        }

        @JsonSetter(value = "twitter", nulls = Nulls.SKIP)
        public Builder twitter(Optional<BaseSocialPresence> twitter) {
            this.twitter = twitter;
            return this;
        }

        public Builder twitter(BaseSocialPresence twitter) {
            this.twitter = Optional.of(twitter);
            return this;
        }

        public BrandSettingsSocialPresence build() {
            return new BrandSettingsSocialPresence(
                    inheritDefault, facebook, instagram, linkedin, medium, twitter, additionalProperties);
        }
    }
}
