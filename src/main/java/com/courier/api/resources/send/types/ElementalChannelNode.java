/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ElementalChannelNode.Builder.class)
public final class ElementalChannelNode implements IElementalBaseNode {
    private final Optional<List<String>> channels;

    private final Optional<String> ref;

    private final Optional<String> if_;

    private final Optional<String> loop;

    private final String channel;

    private final Optional<List<ElementalNode>> elements;

    private final Optional<Map<String, Object>> raw;

    private final Map<String, Object> additionalProperties;

    private ElementalChannelNode(
            Optional<List<String>> channels,
            Optional<String> ref,
            Optional<String> if_,
            Optional<String> loop,
            String channel,
            Optional<List<ElementalNode>> elements,
            Optional<Map<String, Object>> raw,
            Map<String, Object> additionalProperties) {
        this.channels = channels;
        this.ref = ref;
        this.if_ = if_;
        this.loop = loop;
        this.channel = channel;
        this.elements = elements;
        this.raw = raw;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("channels")
    @java.lang.Override
    public Optional<List<String>> getChannels() {
        return channels;
    }

    @JsonProperty("ref")
    @java.lang.Override
    public Optional<String> getRef() {
        return ref;
    }

    @JsonProperty("if")
    @java.lang.Override
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("loop")
    @java.lang.Override
    public Optional<String> getLoop() {
        return loop;
    }

    /**
     * @return The channel the contents of this element should be applied to. Can be <code>email</code>,
     * <code>push</code>, <code>direct_message</code>, <code>sms</code> or a provider such as slack
     */
    @JsonProperty("channel")
    public String getChannel() {
        return channel;
    }

    /**
     * @return An array of elements to apply to the channel. If <code>raw</code> has not been
     * specified, <code>elements</code> is <code>required</code>.
     */
    @JsonProperty("elements")
    public Optional<List<ElementalNode>> getElements() {
        return elements;
    }

    /**
     * @return Raw data to apply to the channel. If <code>elements</code> has not been
     * specified, <code>raw</code> is <code>required</code>.
     */
    @JsonProperty("raw")
    public Optional<Map<String, Object>> getRaw() {
        return raw;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ElementalChannelNode && equalTo((ElementalChannelNode) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ElementalChannelNode other) {
        return channels.equals(other.channels)
                && ref.equals(other.ref)
                && if_.equals(other.if_)
                && loop.equals(other.loop)
                && channel.equals(other.channel)
                && elements.equals(other.elements)
                && raw.equals(other.raw);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.channels, this.ref, this.if_, this.loop, this.channel, this.elements, this.raw);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ChannelStage builder() {
        return new Builder();
    }

    public interface ChannelStage {
        _FinalStage channel(String channel);

        Builder from(ElementalChannelNode other);
    }

    public interface _FinalStage {
        ElementalChannelNode build();

        _FinalStage channels(Optional<List<String>> channels);

        _FinalStage channels(List<String> channels);

        _FinalStage ref(Optional<String> ref);

        _FinalStage ref(String ref);

        _FinalStage if_(Optional<String> if_);

        _FinalStage if_(String if_);

        _FinalStage loop(Optional<String> loop);

        _FinalStage loop(String loop);

        _FinalStage elements(Optional<List<ElementalNode>> elements);

        _FinalStage elements(List<ElementalNode> elements);

        _FinalStage raw(Optional<Map<String, Object>> raw);

        _FinalStage raw(Map<String, Object> raw);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ChannelStage, _FinalStage {
        private String channel;

        private Optional<Map<String, Object>> raw = Optional.empty();

        private Optional<List<ElementalNode>> elements = Optional.empty();

        private Optional<String> loop = Optional.empty();

        private Optional<String> if_ = Optional.empty();

        private Optional<String> ref = Optional.empty();

        private Optional<List<String>> channels = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ElementalChannelNode other) {
            channels(other.getChannels());
            ref(other.getRef());
            if_(other.getIf());
            loop(other.getLoop());
            channel(other.getChannel());
            elements(other.getElements());
            raw(other.getRaw());
            return this;
        }

        /**
         * <p>The channel the contents of this element should be applied to. Can be <code>email</code>,
         * <code>push</code>, <code>direct_message</code>, <code>sms</code> or a provider such as slack</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("channel")
        public _FinalStage channel(String channel) {
            this.channel = channel;
            return this;
        }

        /**
         * <p>Raw data to apply to the channel. If <code>elements</code> has not been
         * specified, <code>raw</code> is <code>required</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage raw(Map<String, Object> raw) {
            this.raw = Optional.of(raw);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "raw", nulls = Nulls.SKIP)
        public _FinalStage raw(Optional<Map<String, Object>> raw) {
            this.raw = raw;
            return this;
        }

        /**
         * <p>An array of elements to apply to the channel. If <code>raw</code> has not been
         * specified, <code>elements</code> is <code>required</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage elements(List<ElementalNode> elements) {
            this.elements = Optional.of(elements);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "elements", nulls = Nulls.SKIP)
        public _FinalStage elements(Optional<List<ElementalNode>> elements) {
            this.elements = elements;
            return this;
        }

        @java.lang.Override
        public _FinalStage loop(String loop) {
            this.loop = Optional.of(loop);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "loop", nulls = Nulls.SKIP)
        public _FinalStage loop(Optional<String> loop) {
            this.loop = loop;
            return this;
        }

        @java.lang.Override
        public _FinalStage if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public _FinalStage if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        @java.lang.Override
        public _FinalStage ref(String ref) {
            this.ref = Optional.of(ref);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ref", nulls = Nulls.SKIP)
        public _FinalStage ref(Optional<String> ref) {
            this.ref = ref;
            return this;
        }

        @java.lang.Override
        public _FinalStage channels(List<String> channels) {
            this.channels = Optional.of(channels);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "channels", nulls = Nulls.SKIP)
        public _FinalStage channels(Optional<List<String>> channels) {
            this.channels = channels;
            return this;
        }

        @java.lang.Override
        public ElementalChannelNode build() {
            return new ElementalChannelNode(channels, ref, if_, loop, channel, elements, raw, additionalProperties);
        }
    }
}
