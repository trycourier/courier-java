/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = InvalidUserRecipient.Builder.class)
public final class InvalidUserRecipient {
    private final String listId;

    private final String listPattern;

    private final Map<String, Object> additionalProperties;

    private InvalidUserRecipient(String listId, String listPattern, Map<String, Object> additionalProperties) {
        this.listId = listId;
        this.listPattern = listPattern;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("list_id")
    public String getListId() {
        return listId;
    }

    @JsonProperty("list_pattern")
    public String getListPattern() {
        return listPattern;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvalidUserRecipient && equalTo((InvalidUserRecipient) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvalidUserRecipient other) {
        return listId.equals(other.listId) && listPattern.equals(other.listPattern);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.listId, this.listPattern);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ListIdStage builder() {
        return new Builder();
    }

    public interface ListIdStage {
        ListPatternStage listId(String listId);

        Builder from(InvalidUserRecipient other);
    }

    public interface ListPatternStage {
        _FinalStage listPattern(String listPattern);
    }

    public interface _FinalStage {
        InvalidUserRecipient build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ListIdStage, ListPatternStage, _FinalStage {
        private String listId;

        private String listPattern;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(InvalidUserRecipient other) {
            listId(other.getListId());
            listPattern(other.getListPattern());
            return this;
        }

        @java.lang.Override
        @JsonSetter("list_id")
        public ListPatternStage listId(String listId) {
            this.listId = listId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("list_pattern")
        public _FinalStage listPattern(String listPattern) {
            this.listPattern = listPattern;
            return this;
        }

        @java.lang.Override
        public InvalidUserRecipient build() {
            return new InvalidUserRecipient(listId, listPattern, additionalProperties);
        }
    }
}
