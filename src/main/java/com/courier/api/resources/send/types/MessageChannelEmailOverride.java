/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.courier.api.resources.brands.types.Brand;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = MessageChannelEmailOverride.Builder.class)
public final class MessageChannelEmailOverride {
    private final Optional<List<Map<String, Object>>> attachments;

    private final Optional<String> bcc;

    private final Optional<Brand> brand;

    private final Optional<String> cc;

    private final Optional<String> from;

    private final Optional<String> html;

    private final Optional<String> replyTo;

    private final Optional<String> subject;

    private final Optional<String> text;

    private final TrackingOverride tracking;

    private final Map<String, Object> additionalProperties;

    private MessageChannelEmailOverride(
            Optional<List<Map<String, Object>>> attachments,
            Optional<String> bcc,
            Optional<Brand> brand,
            Optional<String> cc,
            Optional<String> from,
            Optional<String> html,
            Optional<String> replyTo,
            Optional<String> subject,
            Optional<String> text,
            TrackingOverride tracking,
            Map<String, Object> additionalProperties) {
        this.attachments = attachments;
        this.bcc = bcc;
        this.brand = brand;
        this.cc = cc;
        this.from = from;
        this.html = html;
        this.replyTo = replyTo;
        this.subject = subject;
        this.text = text;
        this.tracking = tracking;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("attachments")
    public Optional<List<Map<String, Object>>> getAttachments() {
        return attachments;
    }

    @JsonProperty("bcc")
    public Optional<String> getBcc() {
        return bcc;
    }

    @JsonProperty("brand")
    public Optional<Brand> getBrand() {
        return brand;
    }

    @JsonProperty("cc")
    public Optional<String> getCc() {
        return cc;
    }

    @JsonProperty("from")
    public Optional<String> getFrom() {
        return from;
    }

    @JsonProperty("html")
    public Optional<String> getHtml() {
        return html;
    }

    @JsonProperty("reply_to")
    public Optional<String> getReplyTo() {
        return replyTo;
    }

    @JsonProperty("subject")
    public Optional<String> getSubject() {
        return subject;
    }

    @JsonProperty("text")
    public Optional<String> getText() {
        return text;
    }

    @JsonProperty("tracking")
    public TrackingOverride getTracking() {
        return tracking;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MessageChannelEmailOverride && equalTo((MessageChannelEmailOverride) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MessageChannelEmailOverride other) {
        return attachments.equals(other.attachments)
                && bcc.equals(other.bcc)
                && brand.equals(other.brand)
                && cc.equals(other.cc)
                && from.equals(other.from)
                && html.equals(other.html)
                && replyTo.equals(other.replyTo)
                && subject.equals(other.subject)
                && text.equals(other.text)
                && tracking.equals(other.tracking);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.attachments,
                this.bcc,
                this.brand,
                this.cc,
                this.from,
                this.html,
                this.replyTo,
                this.subject,
                this.text,
                this.tracking);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TrackingStage builder() {
        return new Builder();
    }

    public interface TrackingStage {
        _FinalStage tracking(TrackingOverride tracking);

        Builder from(MessageChannelEmailOverride other);
    }

    public interface _FinalStage {
        MessageChannelEmailOverride build();

        _FinalStage attachments(Optional<List<Map<String, Object>>> attachments);

        _FinalStage attachments(List<Map<String, Object>> attachments);

        _FinalStage bcc(Optional<String> bcc);

        _FinalStage bcc(String bcc);

        _FinalStage brand(Optional<Brand> brand);

        _FinalStage brand(Brand brand);

        _FinalStage cc(Optional<String> cc);

        _FinalStage cc(String cc);

        _FinalStage from(Optional<String> from);

        _FinalStage from(String from);

        _FinalStage html(Optional<String> html);

        _FinalStage html(String html);

        _FinalStage replyTo(Optional<String> replyTo);

        _FinalStage replyTo(String replyTo);

        _FinalStage subject(Optional<String> subject);

        _FinalStage subject(String subject);

        _FinalStage text(Optional<String> text);

        _FinalStage text(String text);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TrackingStage, _FinalStage {
        private TrackingOverride tracking;

        private Optional<String> text = Optional.empty();

        private Optional<String> subject = Optional.empty();

        private Optional<String> replyTo = Optional.empty();

        private Optional<String> html = Optional.empty();

        private Optional<String> from = Optional.empty();

        private Optional<String> cc = Optional.empty();

        private Optional<Brand> brand = Optional.empty();

        private Optional<String> bcc = Optional.empty();

        private Optional<List<Map<String, Object>>> attachments = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MessageChannelEmailOverride other) {
            attachments(other.getAttachments());
            bcc(other.getBcc());
            brand(other.getBrand());
            cc(other.getCc());
            from(other.getFrom());
            html(other.getHtml());
            replyTo(other.getReplyTo());
            subject(other.getSubject());
            text(other.getText());
            tracking(other.getTracking());
            return this;
        }

        @java.lang.Override
        @JsonSetter("tracking")
        public _FinalStage tracking(TrackingOverride tracking) {
            this.tracking = tracking;
            return this;
        }

        @java.lang.Override
        public _FinalStage text(String text) {
            this.text = Optional.of(text);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "text", nulls = Nulls.SKIP)
        public _FinalStage text(Optional<String> text) {
            this.text = text;
            return this;
        }

        @java.lang.Override
        public _FinalStage subject(String subject) {
            this.subject = Optional.of(subject);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subject", nulls = Nulls.SKIP)
        public _FinalStage subject(Optional<String> subject) {
            this.subject = subject;
            return this;
        }

        @java.lang.Override
        public _FinalStage replyTo(String replyTo) {
            this.replyTo = Optional.of(replyTo);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "reply_to", nulls = Nulls.SKIP)
        public _FinalStage replyTo(Optional<String> replyTo) {
            this.replyTo = replyTo;
            return this;
        }

        @java.lang.Override
        public _FinalStage html(String html) {
            this.html = Optional.of(html);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "html", nulls = Nulls.SKIP)
        public _FinalStage html(Optional<String> html) {
            this.html = html;
            return this;
        }

        @java.lang.Override
        public _FinalStage from(String from) {
            this.from = Optional.of(from);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "from", nulls = Nulls.SKIP)
        public _FinalStage from(Optional<String> from) {
            this.from = from;
            return this;
        }

        @java.lang.Override
        public _FinalStage cc(String cc) {
            this.cc = Optional.of(cc);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cc", nulls = Nulls.SKIP)
        public _FinalStage cc(Optional<String> cc) {
            this.cc = cc;
            return this;
        }

        @java.lang.Override
        public _FinalStage brand(Brand brand) {
            this.brand = Optional.of(brand);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "brand", nulls = Nulls.SKIP)
        public _FinalStage brand(Optional<Brand> brand) {
            this.brand = brand;
            return this;
        }

        @java.lang.Override
        public _FinalStage bcc(String bcc) {
            this.bcc = Optional.of(bcc);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "bcc", nulls = Nulls.SKIP)
        public _FinalStage bcc(Optional<String> bcc) {
            this.bcc = bcc;
            return this;
        }

        @java.lang.Override
        public _FinalStage attachments(List<Map<String, Object>> attachments) {
            this.attachments = Optional.of(attachments);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public _FinalStage attachments(Optional<List<Map<String, Object>>> attachments) {
            this.attachments = attachments;
            return this;
        }

        @java.lang.Override
        public MessageChannelEmailOverride build() {
            return new MessageChannelEmailOverride(
                    attachments, bcc, brand, cc, from, html, replyTo, subject, text, tracking, additionalProperties);
        }
    }
}
