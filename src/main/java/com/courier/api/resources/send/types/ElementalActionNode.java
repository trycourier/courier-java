/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ElementalActionNode.Builder.class)
public final class ElementalActionNode implements IElementalBaseNode {
    private final Optional<List<String>> channels;

    private final Optional<String> ref;

    private final Optional<String> if_;

    private final Optional<String> loop;

    private final String content;

    private final String href;

    private final Optional<String> actionId;

    private final Optional<IAlignment> align;

    private final Optional<String> backgroundColor;

    private final Optional<IActionButtonStyle> style;

    private final Optional<Map<String, Locale>> locales;

    private final Map<String, Object> additionalProperties;

    private ElementalActionNode(
            Optional<List<String>> channels,
            Optional<String> ref,
            Optional<String> if_,
            Optional<String> loop,
            String content,
            String href,
            Optional<String> actionId,
            Optional<IAlignment> align,
            Optional<String> backgroundColor,
            Optional<IActionButtonStyle> style,
            Optional<Map<String, Locale>> locales,
            Map<String, Object> additionalProperties) {
        this.channels = channels;
        this.ref = ref;
        this.if_ = if_;
        this.loop = loop;
        this.content = content;
        this.href = href;
        this.actionId = actionId;
        this.align = align;
        this.backgroundColor = backgroundColor;
        this.style = style;
        this.locales = locales;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("channels")
    @java.lang.Override
    public Optional<List<String>> getChannels() {
        return channels;
    }

    @JsonProperty("ref")
    @java.lang.Override
    public Optional<String> getRef() {
        return ref;
    }

    @JsonProperty("if")
    @java.lang.Override
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("loop")
    @java.lang.Override
    public Optional<String> getLoop() {
        return loop;
    }

    /**
     * @return The text content of the action shown to the user.
     */
    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    /**
     * @return The target URL of the action.
     */
    @JsonProperty("href")
    public String getHref() {
        return href;
    }

    /**
     * @return A unique id used to identify the action when it is executed.
     */
    @JsonProperty("action_id")
    public Optional<String> getActionId() {
        return actionId;
    }

    /**
     * @return The alignment of the action button. Defaults to &quot;center&quot;.
     */
    @JsonProperty("align")
    public Optional<IAlignment> getAlign() {
        return align;
    }

    /**
     * @return The background color of the action button.
     */
    @JsonProperty("background_color")
    public Optional<String> getBackgroundColor() {
        return backgroundColor;
    }

    /**
     * @return Defaults to <code>button</code>.
     */
    @JsonProperty("style")
    public Optional<IActionButtonStyle> getStyle() {
        return style;
    }

    /**
     * @return Region specific content. See <a href="https://www.courier.com/docs/platform/content/elemental/locales/">locales docs</a> for more details.
     */
    @JsonProperty("locales")
    public Optional<Map<String, Locale>> getLocales() {
        return locales;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ElementalActionNode && equalTo((ElementalActionNode) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ElementalActionNode other) {
        return channels.equals(other.channels)
                && ref.equals(other.ref)
                && if_.equals(other.if_)
                && loop.equals(other.loop)
                && content.equals(other.content)
                && href.equals(other.href)
                && actionId.equals(other.actionId)
                && align.equals(other.align)
                && backgroundColor.equals(other.backgroundColor)
                && style.equals(other.style)
                && locales.equals(other.locales);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.channels,
                this.ref,
                this.if_,
                this.loop,
                this.content,
                this.href,
                this.actionId,
                this.align,
                this.backgroundColor,
                this.style,
                this.locales);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ContentStage builder() {
        return new Builder();
    }

    public interface ContentStage {
        HrefStage content(String content);

        Builder from(ElementalActionNode other);
    }

    public interface HrefStage {
        _FinalStage href(String href);
    }

    public interface _FinalStage {
        ElementalActionNode build();

        _FinalStage channels(Optional<List<String>> channels);

        _FinalStage channels(List<String> channels);

        _FinalStage ref(Optional<String> ref);

        _FinalStage ref(String ref);

        _FinalStage if_(Optional<String> if_);

        _FinalStage if_(String if_);

        _FinalStage loop(Optional<String> loop);

        _FinalStage loop(String loop);

        _FinalStage actionId(Optional<String> actionId);

        _FinalStage actionId(String actionId);

        _FinalStage align(Optional<IAlignment> align);

        _FinalStage align(IAlignment align);

        _FinalStage backgroundColor(Optional<String> backgroundColor);

        _FinalStage backgroundColor(String backgroundColor);

        _FinalStage style(Optional<IActionButtonStyle> style);

        _FinalStage style(IActionButtonStyle style);

        _FinalStage locales(Optional<Map<String, Locale>> locales);

        _FinalStage locales(Map<String, Locale> locales);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ContentStage, HrefStage, _FinalStage {
        private String content;

        private String href;

        private Optional<Map<String, Locale>> locales = Optional.empty();

        private Optional<IActionButtonStyle> style = Optional.empty();

        private Optional<String> backgroundColor = Optional.empty();

        private Optional<IAlignment> align = Optional.empty();

        private Optional<String> actionId = Optional.empty();

        private Optional<String> loop = Optional.empty();

        private Optional<String> if_ = Optional.empty();

        private Optional<String> ref = Optional.empty();

        private Optional<List<String>> channels = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ElementalActionNode other) {
            channels(other.getChannels());
            ref(other.getRef());
            if_(other.getIf());
            loop(other.getLoop());
            content(other.getContent());
            href(other.getHref());
            actionId(other.getActionId());
            align(other.getAlign());
            backgroundColor(other.getBackgroundColor());
            style(other.getStyle());
            locales(other.getLocales());
            return this;
        }

        /**
         * <p>The text content of the action shown to the user.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public HrefStage content(String content) {
            this.content = content;
            return this;
        }

        /**
         * <p>The target URL of the action.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("href")
        public _FinalStage href(String href) {
            this.href = href;
            return this;
        }

        /**
         * <p>Region specific content. See <a href="https://www.courier.com/docs/platform/content/elemental/locales/">locales docs</a> for more details.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage locales(Map<String, Locale> locales) {
            this.locales = Optional.of(locales);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "locales", nulls = Nulls.SKIP)
        public _FinalStage locales(Optional<Map<String, Locale>> locales) {
            this.locales = locales;
            return this;
        }

        /**
         * <p>Defaults to <code>button</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage style(IActionButtonStyle style) {
            this.style = Optional.of(style);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "style", nulls = Nulls.SKIP)
        public _FinalStage style(Optional<IActionButtonStyle> style) {
            this.style = style;
            return this;
        }

        /**
         * <p>The background color of the action button.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage backgroundColor(String backgroundColor) {
            this.backgroundColor = Optional.of(backgroundColor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "background_color", nulls = Nulls.SKIP)
        public _FinalStage backgroundColor(Optional<String> backgroundColor) {
            this.backgroundColor = backgroundColor;
            return this;
        }

        /**
         * <p>The alignment of the action button. Defaults to &quot;center&quot;.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage align(IAlignment align) {
            this.align = Optional.of(align);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "align", nulls = Nulls.SKIP)
        public _FinalStage align(Optional<IAlignment> align) {
            this.align = align;
            return this;
        }

        /**
         * <p>A unique id used to identify the action when it is executed.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage actionId(String actionId) {
            this.actionId = Optional.of(actionId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "action_id", nulls = Nulls.SKIP)
        public _FinalStage actionId(Optional<String> actionId) {
            this.actionId = actionId;
            return this;
        }

        @java.lang.Override
        public _FinalStage loop(String loop) {
            this.loop = Optional.of(loop);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "loop", nulls = Nulls.SKIP)
        public _FinalStage loop(Optional<String> loop) {
            this.loop = loop;
            return this;
        }

        @java.lang.Override
        public _FinalStage if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public _FinalStage if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        @java.lang.Override
        public _FinalStage ref(String ref) {
            this.ref = Optional.of(ref);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ref", nulls = Nulls.SKIP)
        public _FinalStage ref(Optional<String> ref) {
            this.ref = ref;
            return this;
        }

        @java.lang.Override
        public _FinalStage channels(List<String> channels) {
            this.channels = Optional.of(channels);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "channels", nulls = Nulls.SKIP)
        public _FinalStage channels(Optional<List<String>> channels) {
            this.channels = channels;
            return this;
        }

        @java.lang.Override
        public ElementalActionNode build() {
            return new ElementalActionNode(
                    channels,
                    ref,
                    if_,
                    loop,
                    content,
                    href,
                    actionId,
                    align,
                    backgroundColor,
                    style,
                    locales,
                    additionalProperties);
        }
    }
}
