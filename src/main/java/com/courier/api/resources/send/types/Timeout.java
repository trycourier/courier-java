/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Timeout.Builder.class)
public final class Timeout {
    private final Optional<Map<String, Integer>> provider;

    private final Optional<Map<String, Integer>> channel;

    private final Optional<Integer> message;

    private final Optional<Integer> escalation;

    private final Optional<Criteria> criteria;

    private final Map<String, Object> additionalProperties;

    private Timeout(
            Optional<Map<String, Integer>> provider,
            Optional<Map<String, Integer>> channel,
            Optional<Integer> message,
            Optional<Integer> escalation,
            Optional<Criteria> criteria,
            Map<String, Object> additionalProperties) {
        this.provider = provider;
        this.channel = channel;
        this.message = message;
        this.escalation = escalation;
        this.criteria = criteria;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("provider")
    public Optional<Map<String, Integer>> getProvider() {
        return provider;
    }

    @JsonProperty("channel")
    public Optional<Map<String, Integer>> getChannel() {
        return channel;
    }

    @JsonProperty("message")
    public Optional<Integer> getMessage() {
        return message;
    }

    @JsonProperty("escalation")
    public Optional<Integer> getEscalation() {
        return escalation;
    }

    @JsonProperty("criteria")
    public Optional<Criteria> getCriteria() {
        return criteria;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Timeout && equalTo((Timeout) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Timeout other) {
        return provider.equals(other.provider)
                && channel.equals(other.channel)
                && message.equals(other.message)
                && escalation.equals(other.escalation)
                && criteria.equals(other.criteria);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.provider, this.channel, this.message, this.escalation, this.criteria);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Integer>> provider = Optional.empty();

        private Optional<Map<String, Integer>> channel = Optional.empty();

        private Optional<Integer> message = Optional.empty();

        private Optional<Integer> escalation = Optional.empty();

        private Optional<Criteria> criteria = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Timeout other) {
            provider(other.getProvider());
            channel(other.getChannel());
            message(other.getMessage());
            escalation(other.getEscalation());
            criteria(other.getCriteria());
            return this;
        }

        @JsonSetter(value = "provider", nulls = Nulls.SKIP)
        public Builder provider(Optional<Map<String, Integer>> provider) {
            this.provider = provider;
            return this;
        }

        public Builder provider(Map<String, Integer> provider) {
            this.provider = Optional.of(provider);
            return this;
        }

        @JsonSetter(value = "channel", nulls = Nulls.SKIP)
        public Builder channel(Optional<Map<String, Integer>> channel) {
            this.channel = channel;
            return this;
        }

        public Builder channel(Map<String, Integer> channel) {
            this.channel = Optional.of(channel);
            return this;
        }

        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public Builder message(Optional<Integer> message) {
            this.message = message;
            return this;
        }

        public Builder message(Integer message) {
            this.message = Optional.of(message);
            return this;
        }

        @JsonSetter(value = "escalation", nulls = Nulls.SKIP)
        public Builder escalation(Optional<Integer> escalation) {
            this.escalation = escalation;
            return this;
        }

        public Builder escalation(Integer escalation) {
            this.escalation = Optional.of(escalation);
            return this;
        }

        @JsonSetter(value = "criteria", nulls = Nulls.SKIP)
        public Builder criteria(Optional<Criteria> criteria) {
            this.criteria = criteria;
            return this;
        }

        public Builder criteria(Criteria criteria) {
            this.criteria = Optional.of(criteria);
            return this;
        }

        public Timeout build() {
            return new Timeout(provider, channel, message, escalation, criteria, additionalProperties);
        }
    }
}
