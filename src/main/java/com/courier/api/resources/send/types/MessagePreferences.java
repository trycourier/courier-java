/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = MessagePreferences.Builder.class)
public final class MessagePreferences {
    private final String subscriptionTopicId;

    private final Map<String, Object> additionalProperties;

    private MessagePreferences(String subscriptionTopicId, Map<String, Object> additionalProperties) {
        this.subscriptionTopicId = subscriptionTopicId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the subscription topic you want to apply to the message. If this is a templated message, it will override the subscription topic if already associated
     */
    @JsonProperty("subscription_topic_id")
    public String getSubscriptionTopicId() {
        return subscriptionTopicId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MessagePreferences && equalTo((MessagePreferences) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MessagePreferences other) {
        return subscriptionTopicId.equals(other.subscriptionTopicId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.subscriptionTopicId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SubscriptionTopicIdStage builder() {
        return new Builder();
    }

    public interface SubscriptionTopicIdStage {
        _FinalStage subscriptionTopicId(String subscriptionTopicId);

        Builder from(MessagePreferences other);
    }

    public interface _FinalStage {
        MessagePreferences build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SubscriptionTopicIdStage, _FinalStage {
        private String subscriptionTopicId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MessagePreferences other) {
            subscriptionTopicId(other.getSubscriptionTopicId());
            return this;
        }

        /**
         * <p>The ID of the subscription topic you want to apply to the message. If this is a templated message, it will override the subscription topic if already associated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("subscription_topic_id")
        public _FinalStage subscriptionTopicId(String subscriptionTopicId) {
            this.subscriptionTopicId = subscriptionTopicId;
            return this;
        }

        @java.lang.Override
        public MessagePreferences build() {
            return new MessagePreferences(subscriptionTopicId, additionalProperties);
        }
    }
}
