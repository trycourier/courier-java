/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Preferences.Builder.class)
public final class Preferences {
    private final List<String> templateIds;

    private final Map<String, Object> additionalProperties;

    private Preferences(List<String> templateIds, Map<String, Object> additionalProperties) {
        this.templateIds = templateIds;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("templateIds")
    public List<String> getTemplateIds() {
        return templateIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Preferences && equalTo((Preferences) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Preferences other) {
        return templateIds.equals(other.templateIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.templateIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> templateIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Preferences other) {
            templateIds(other.getTemplateIds());
            return this;
        }

        @JsonSetter(value = "templateIds", nulls = Nulls.SKIP)
        public Builder templateIds(List<String> templateIds) {
            this.templateIds.clear();
            this.templateIds.addAll(templateIds);
            return this;
        }

        public Builder addTemplateIds(String templateIds) {
            this.templateIds.add(templateIds);
            return this;
        }

        public Builder addAllTemplateIds(List<String> templateIds) {
            this.templateIds.addAll(templateIds);
            return this;
        }

        public Preferences build() {
            return new Preferences(templateIds, additionalProperties);
        }
    }
}
