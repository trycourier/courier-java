/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ElementalGroupNode.Builder.class)
public final class ElementalGroupNode implements IElementalBaseNode {
    private final Optional<List<String>> channels;

    private final Optional<String> ref;

    private final Optional<String> if_;

    private final Optional<String> loop;

    private final List<ElementalNode> elements;

    private final Map<String, Object> additionalProperties;

    private ElementalGroupNode(
            Optional<List<String>> channels,
            Optional<String> ref,
            Optional<String> if_,
            Optional<String> loop,
            List<ElementalNode> elements,
            Map<String, Object> additionalProperties) {
        this.channels = channels;
        this.ref = ref;
        this.if_ = if_;
        this.loop = loop;
        this.elements = elements;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("channels")
    @java.lang.Override
    public Optional<List<String>> getChannels() {
        return channels;
    }

    @JsonProperty("ref")
    @java.lang.Override
    public Optional<String> getRef() {
        return ref;
    }

    @JsonProperty("if")
    @java.lang.Override
    public Optional<String> getIf() {
        return if_;
    }

    @JsonProperty("loop")
    @java.lang.Override
    public Optional<String> getLoop() {
        return loop;
    }

    /**
     * @return Sub elements to render.
     */
    @JsonProperty("elements")
    public List<ElementalNode> getElements() {
        return elements;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ElementalGroupNode && equalTo((ElementalGroupNode) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ElementalGroupNode other) {
        return channels.equals(other.channels)
                && ref.equals(other.ref)
                && if_.equals(other.if_)
                && loop.equals(other.loop)
                && elements.equals(other.elements);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.channels, this.ref, this.if_, this.loop, this.elements);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> channels = Optional.empty();

        private Optional<String> ref = Optional.empty();

        private Optional<String> if_ = Optional.empty();

        private Optional<String> loop = Optional.empty();

        private List<ElementalNode> elements = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ElementalGroupNode other) {
            channels(other.getChannels());
            ref(other.getRef());
            if_(other.getIf());
            loop(other.getLoop());
            elements(other.getElements());
            return this;
        }

        @JsonSetter(value = "channels", nulls = Nulls.SKIP)
        public Builder channels(Optional<List<String>> channels) {
            this.channels = channels;
            return this;
        }

        public Builder channels(List<String> channels) {
            this.channels = Optional.of(channels);
            return this;
        }

        @JsonSetter(value = "ref", nulls = Nulls.SKIP)
        public Builder ref(Optional<String> ref) {
            this.ref = ref;
            return this;
        }

        public Builder ref(String ref) {
            this.ref = Optional.of(ref);
            return this;
        }

        @JsonSetter(value = "if", nulls = Nulls.SKIP)
        public Builder if_(Optional<String> if_) {
            this.if_ = if_;
            return this;
        }

        public Builder if_(String if_) {
            this.if_ = Optional.of(if_);
            return this;
        }

        @JsonSetter(value = "loop", nulls = Nulls.SKIP)
        public Builder loop(Optional<String> loop) {
            this.loop = loop;
            return this;
        }

        public Builder loop(String loop) {
            this.loop = Optional.of(loop);
            return this;
        }

        @JsonSetter(value = "elements", nulls = Nulls.SKIP)
        public Builder elements(List<ElementalNode> elements) {
            this.elements.clear();
            this.elements.addAll(elements);
            return this;
        }

        public Builder addElements(ElementalNode elements) {
            this.elements.add(elements);
            return this;
        }

        public Builder addAllElements(List<ElementalNode> elements) {
            this.elements.addAll(elements);
            return this;
        }

        public ElementalGroupNode build() {
            return new ElementalGroupNode(channels, ref, if_, loop, elements, additionalProperties);
        }
    }
}
