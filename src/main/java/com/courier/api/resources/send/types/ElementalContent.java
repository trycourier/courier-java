/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.send.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ElementalContent.Builder.class)
public final class ElementalContent {
    private final String version;

    private final Optional<Object> brand;

    private final List<ElementalNode> elements;

    private final Map<String, Object> additionalProperties;

    private ElementalContent(
            String version,
            Optional<Object> brand,
            List<ElementalNode> elements,
            Map<String, Object> additionalProperties) {
        this.version = version;
        this.brand = brand;
        this.elements = elements;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return For example, &quot;2022-01-01&quot;
     */
    @JsonProperty("version")
    public String getVersion() {
        return version;
    }

    @JsonProperty("brand")
    public Optional<Object> getBrand() {
        return brand;
    }

    @JsonProperty("elements")
    public List<ElementalNode> getElements() {
        return elements;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ElementalContent && equalTo((ElementalContent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ElementalContent other) {
        return version.equals(other.version) && brand.equals(other.brand) && elements.equals(other.elements);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.version, this.brand, this.elements);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static VersionStage builder() {
        return new Builder();
    }

    public interface VersionStage {
        _FinalStage version(String version);

        Builder from(ElementalContent other);
    }

    public interface _FinalStage {
        ElementalContent build();

        _FinalStage brand(Optional<Object> brand);

        _FinalStage brand(Object brand);

        _FinalStage elements(List<ElementalNode> elements);

        _FinalStage addElements(ElementalNode elements);

        _FinalStage addAllElements(List<ElementalNode> elements);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements VersionStage, _FinalStage {
        private String version;

        private List<ElementalNode> elements = new ArrayList<>();

        private Optional<Object> brand = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ElementalContent other) {
            version(other.getVersion());
            brand(other.getBrand());
            elements(other.getElements());
            return this;
        }

        /**
         * <p>For example, &quot;2022-01-01&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("version")
        public _FinalStage version(String version) {
            this.version = version;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllElements(List<ElementalNode> elements) {
            this.elements.addAll(elements);
            return this;
        }

        @java.lang.Override
        public _FinalStage addElements(ElementalNode elements) {
            this.elements.add(elements);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "elements", nulls = Nulls.SKIP)
        public _FinalStage elements(List<ElementalNode> elements) {
            this.elements.clear();
            this.elements.addAll(elements);
            return this;
        }

        @java.lang.Override
        public _FinalStage brand(Object brand) {
            this.brand = Optional.of(brand);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "brand", nulls = Nulls.SKIP)
        public _FinalStage brand(Optional<Object> brand) {
            this.brand = brand;
            return this;
        }

        @java.lang.Override
        public ElementalContent build() {
            return new ElementalContent(version, brand, elements, additionalProperties);
        }
    }
}
