/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.audiences.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AudienceMember.Builder.class)
public final class AudienceMember {
    private final String addedAt;

    private final String audienceId;

    private final int audienceVersion;

    private final String memberId;

    private final String reason;

    private final Map<String, Object> additionalProperties;

    private AudienceMember(
            String addedAt,
            String audienceId,
            int audienceVersion,
            String memberId,
            String reason,
            Map<String, Object> additionalProperties) {
        this.addedAt = addedAt;
        this.audienceId = audienceId;
        this.audienceVersion = audienceVersion;
        this.memberId = memberId;
        this.reason = reason;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("added_at")
    public String getAddedAt() {
        return addedAt;
    }

    @JsonProperty("audience_id")
    public String getAudienceId() {
        return audienceId;
    }

    @JsonProperty("audience_version")
    public int getAudienceVersion() {
        return audienceVersion;
    }

    @JsonProperty("member_id")
    public String getMemberId() {
        return memberId;
    }

    @JsonProperty("reason")
    public String getReason() {
        return reason;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AudienceMember && equalTo((AudienceMember) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AudienceMember other) {
        return addedAt.equals(other.addedAt)
                && audienceId.equals(other.audienceId)
                && audienceVersion == other.audienceVersion
                && memberId.equals(other.memberId)
                && reason.equals(other.reason);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.addedAt, this.audienceId, this.audienceVersion, this.memberId, this.reason);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AddedAtStage builder() {
        return new Builder();
    }

    public interface AddedAtStage {
        AudienceIdStage addedAt(String addedAt);

        Builder from(AudienceMember other);
    }

    public interface AudienceIdStage {
        AudienceVersionStage audienceId(String audienceId);
    }

    public interface AudienceVersionStage {
        MemberIdStage audienceVersion(int audienceVersion);
    }

    public interface MemberIdStage {
        ReasonStage memberId(String memberId);
    }

    public interface ReasonStage {
        _FinalStage reason(String reason);
    }

    public interface _FinalStage {
        AudienceMember build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements AddedAtStage, AudienceIdStage, AudienceVersionStage, MemberIdStage, ReasonStage, _FinalStage {
        private String addedAt;

        private String audienceId;

        private int audienceVersion;

        private String memberId;

        private String reason;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AudienceMember other) {
            addedAt(other.getAddedAt());
            audienceId(other.getAudienceId());
            audienceVersion(other.getAudienceVersion());
            memberId(other.getMemberId());
            reason(other.getReason());
            return this;
        }

        @java.lang.Override
        @JsonSetter("added_at")
        public AudienceIdStage addedAt(String addedAt) {
            this.addedAt = addedAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("audience_id")
        public AudienceVersionStage audienceId(String audienceId) {
            this.audienceId = audienceId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("audience_version")
        public MemberIdStage audienceVersion(int audienceVersion) {
            this.audienceVersion = audienceVersion;
            return this;
        }

        @java.lang.Override
        @JsonSetter("member_id")
        public ReasonStage memberId(String memberId) {
            this.memberId = memberId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("reason")
        public _FinalStage reason(String reason) {
            this.reason = reason;
            return this;
        }

        @java.lang.Override
        public AudienceMember build() {
            return new AudienceMember(addedAt, audienceId, audienceVersion, memberId, reason, additionalProperties);
        }
    }
}
