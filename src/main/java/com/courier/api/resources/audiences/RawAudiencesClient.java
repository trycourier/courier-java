/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.audiences;

import com.courier.api.core.ClientOptions;
import com.courier.api.core.CourierApiException;
import com.courier.api.core.CourierException;
import com.courier.api.core.CourierHttpResponse;
import com.courier.api.core.MediaTypes;
import com.courier.api.core.ObjectMappers;
import com.courier.api.core.QueryStringMapper;
import com.courier.api.core.RequestOptions;
import com.courier.api.resources.audiences.requests.AudienceMembersListParams;
import com.courier.api.resources.audiences.requests.AudienceUpdateParams;
import com.courier.api.resources.audiences.requests.AudiencesListParams;
import com.courier.api.resources.audiences.types.Audience;
import com.courier.api.resources.audiences.types.AudienceListResponse;
import com.courier.api.resources.audiences.types.AudienceMemberListResponse;
import com.courier.api.resources.audiences.types.AudienceUpdateResponse;
import com.courier.api.resources.commons.errors.BadRequestError;
import com.courier.api.resources.commons.types.BadRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawAudiencesClient {
    protected final ClientOptions clientOptions;

    public RawAudiencesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Returns the specified audience by id.
     */
    public CourierHttpResponse<Audience> get(String audienceId) {
        return get(audienceId, null);
    }

    /**
     * Returns the specified audience by id.
     */
    public CourierHttpResponse<Audience> get(String audienceId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("audiences")
                .addPathSegment(audienceId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Audience.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Creates or updates audience.
     */
    public CourierHttpResponse<AudienceUpdateResponse> update(String audienceId) {
        return update(audienceId, AudienceUpdateParams.builder().build());
    }

    /**
     * Creates or updates audience.
     */
    public CourierHttpResponse<AudienceUpdateResponse> update(String audienceId, AudienceUpdateParams request) {
        return update(audienceId, request, null);
    }

    /**
     * Creates or updates audience.
     */
    public CourierHttpResponse<AudienceUpdateResponse> update(
            String audienceId, AudienceUpdateParams request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("audiences")
                .addPathSegment(audienceId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new CourierException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), AudienceUpdateResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Deletes the specified audience.
     */
    public CourierHttpResponse<Void> delete(String audienceId) {
        return delete(audienceId, null);
    }

    /**
     * Deletes the specified audience.
     */
    public CourierHttpResponse<Void> delete(String audienceId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("audiences")
                .addPathSegment(audienceId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get list of members of an audience.
     */
    public CourierHttpResponse<AudienceMemberListResponse> listMembers(String audienceId) {
        return listMembers(audienceId, AudienceMembersListParams.builder().build());
    }

    /**
     * Get list of members of an audience.
     */
    public CourierHttpResponse<AudienceMemberListResponse> listMembers(
            String audienceId, AudienceMembersListParams request) {
        return listMembers(audienceId, request, null);
    }

    /**
     * Get list of members of an audience.
     */
    public CourierHttpResponse<AudienceMemberListResponse> listMembers(
            String audienceId, AudienceMembersListParams request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("audiences")
                .addPathSegment(audienceId)
                .addPathSegments("members");
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), AudienceMemberListResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get the audiences associated with the authorization token.
     */
    public CourierHttpResponse<AudienceListResponse> listAudiences() {
        return listAudiences(AudiencesListParams.builder().build());
    }

    /**
     * Get the audiences associated with the authorization token.
     */
    public CourierHttpResponse<AudienceListResponse> listAudiences(AudiencesListParams request) {
        return listAudiences(request, null);
    }

    /**
     * Get the audiences associated with the authorization token.
     */
    public CourierHttpResponse<AudienceListResponse> listAudiences(
            AudiencesListParams request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("audiences");
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), AudienceListResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }
}
