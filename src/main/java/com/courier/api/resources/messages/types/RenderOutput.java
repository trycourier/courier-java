/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.messages.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RenderOutput.Builder.class)
public final class RenderOutput {
    private final String channel;

    private final String channelId;

    private final RenderedMessageContent content;

    private final Map<String, Object> additionalProperties;

    private RenderOutput(
            String channel,
            String channelId,
            RenderedMessageContent content,
            Map<String, Object> additionalProperties) {
        this.channel = channel;
        this.channelId = channelId;
        this.content = content;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The channel used for rendering the message.
     */
    @JsonProperty("channel")
    public String getChannel() {
        return channel;
    }

    /**
     * @return The ID of channel used for rendering the message.
     */
    @JsonProperty("channel_id")
    public String getChannelId() {
        return channelId;
    }

    /**
     * @return Content details of the rendered message.
     */
    @JsonProperty("content")
    public RenderedMessageContent getContent() {
        return content;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RenderOutput && equalTo((RenderOutput) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RenderOutput other) {
        return channel.equals(other.channel) && channelId.equals(other.channelId) && content.equals(other.content);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.channel, this.channelId, this.content);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ChannelStage builder() {
        return new Builder();
    }

    public interface ChannelStage {
        /**
         * <p>The channel used for rendering the message.</p>
         */
        ChannelIdStage channel(@NotNull String channel);

        Builder from(RenderOutput other);
    }

    public interface ChannelIdStage {
        /**
         * <p>The ID of channel used for rendering the message.</p>
         */
        ContentStage channelId(@NotNull String channelId);
    }

    public interface ContentStage {
        /**
         * <p>Content details of the rendered message.</p>
         */
        _FinalStage content(@NotNull RenderedMessageContent content);
    }

    public interface _FinalStage {
        RenderOutput build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ChannelStage, ChannelIdStage, ContentStage, _FinalStage {
        private String channel;

        private String channelId;

        private RenderedMessageContent content;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RenderOutput other) {
            channel(other.getChannel());
            channelId(other.getChannelId());
            content(other.getContent());
            return this;
        }

        /**
         * <p>The channel used for rendering the message.</p>
         * <p>The channel used for rendering the message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("channel")
        public ChannelIdStage channel(@NotNull String channel) {
            this.channel = Objects.requireNonNull(channel, "channel must not be null");
            return this;
        }

        /**
         * <p>The ID of channel used for rendering the message.</p>
         * <p>The ID of channel used for rendering the message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("channel_id")
        public ContentStage channelId(@NotNull String channelId) {
            this.channelId = Objects.requireNonNull(channelId, "channelId must not be null");
            return this;
        }

        /**
         * <p>Content details of the rendered message.</p>
         * <p>Content details of the rendered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("content")
        public _FinalStage content(@NotNull RenderedMessageContent content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        @java.lang.Override
        public RenderOutput build() {
            return new RenderOutput(channel, channelId, content, additionalProperties);
        }
    }
}
