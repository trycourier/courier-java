/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.messages;

import com.courier.api.core.ClientOptions;
import com.courier.api.core.CourierApiException;
import com.courier.api.core.CourierException;
import com.courier.api.core.CourierHttpResponse;
import com.courier.api.core.IdempotentRequestOptions;
import com.courier.api.core.ObjectMappers;
import com.courier.api.core.QueryStringMapper;
import com.courier.api.core.RequestOptions;
import com.courier.api.resources.commons.errors.BadRequestError;
import com.courier.api.resources.commons.errors.MessageNotFoundError;
import com.courier.api.resources.commons.types.BadRequest;
import com.courier.api.resources.commons.types.MessageNotFound;
import com.courier.api.resources.messages.requests.GetMessageHistoryRequest;
import com.courier.api.resources.messages.requests.ListMessagesRequest;
import com.courier.api.resources.messages.types.ListMessagesResponse;
import com.courier.api.resources.messages.types.MessageDetails;
import com.courier.api.resources.messages.types.MessageDetailsExtended;
import com.courier.api.resources.messages.types.MessageHistoryResponse;
import com.courier.api.resources.messages.types.RenderOutputResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawMessagesClient {
    protected final ClientOptions clientOptions;

    public AsyncRawMessagesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Fetch the statuses of messages you've previously sent.
     */
    public CompletableFuture<CourierHttpResponse<ListMessagesResponse>> list() {
        return list(ListMessagesRequest.builder().build());
    }

    /**
     * Fetch the statuses of messages you've previously sent.
     */
    public CompletableFuture<CourierHttpResponse<ListMessagesResponse>> list(ListMessagesRequest request) {
        return list(request, null);
    }

    /**
     * Fetch the statuses of messages you've previously sent.
     */
    public CompletableFuture<CourierHttpResponse<ListMessagesResponse>> list(
            ListMessagesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("messages");
        if (request.getArchived().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "archived", request.getArchived().get(), false);
        }
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        if (request.getEvent().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "event", request.getEvent().get(), false);
        }
        if (request.getList().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "list", request.getList().get(), false);
        }
        if (request.getMessageId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "messageId", request.getMessageId().get(), false);
        }
        if (request.getNotification().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "notification", request.getNotification().get(), false);
        }
        if (request.getRecipient().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "recipient", request.getRecipient().get(), false);
        }
        if (request.getTags().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "tags", request.getTags().get(), false);
        }
        if (request.getTenantId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "tenant_id", request.getTenantId().get(), false);
        }
        if (request.getEnqueuedAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "enqueued_after", request.getEnqueuedAfter().get(), false);
        }
        if (request.getTraceId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "traceId", request.getTraceId().get(), false);
        }
        if (request.getProvider().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "provider", request.getProvider().get(), true);
        }
        if (request.getStatus().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "status", request.getStatus().get(), true);
        }
        if (request.getTag().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "tag", request.getTag().get(), true);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<CourierHttpResponse<ListMessagesResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new CourierHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ListMessagesResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new CourierApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Fetch the status of a message you've previously sent.
     */
    public CompletableFuture<CourierHttpResponse<MessageDetailsExtended>> get(String messageId) {
        return get(messageId, null);
    }

    /**
     * Fetch the status of a message you've previously sent.
     */
    public CompletableFuture<CourierHttpResponse<MessageDetailsExtended>> get(
            String messageId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("messages")
                .addPathSegment(messageId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<CourierHttpResponse<MessageDetailsExtended>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new CourierHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), MessageDetailsExtended.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new MessageNotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, MessageNotFound.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new CourierApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either <code>200</code> status code for a successful cancellation or <code>409</code> status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).
     */
    public CompletableFuture<CourierHttpResponse<MessageDetails>> cancel(String messageId) {
        return cancel(messageId, null);
    }

    /**
     * Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either <code>200</code> status code for a successful cancellation or <code>409</code> status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).
     */
    public CompletableFuture<CourierHttpResponse<MessageDetails>> cancel(
            String messageId, IdempotentRequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("messages")
                .addPathSegment(messageId)
                .addPathSegments("cancel")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<CourierHttpResponse<MessageDetails>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new CourierHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), MessageDetails.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new CourierApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Fetch the array of events of a message you've previously sent.
     */
    public CompletableFuture<CourierHttpResponse<MessageHistoryResponse>> getHistory(String messageId) {
        return getHistory(messageId, GetMessageHistoryRequest.builder().build());
    }

    /**
     * Fetch the array of events of a message you've previously sent.
     */
    public CompletableFuture<CourierHttpResponse<MessageHistoryResponse>> getHistory(
            String messageId, GetMessageHistoryRequest request) {
        return getHistory(messageId, request, null);
    }

    /**
     * Fetch the array of events of a message you've previously sent.
     */
    public CompletableFuture<CourierHttpResponse<MessageHistoryResponse>> getHistory(
            String messageId, GetMessageHistoryRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("messages")
                .addPathSegment(messageId)
                .addPathSegments("history");
        if (request.getType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "type", request.getType().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<CourierHttpResponse<MessageHistoryResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new CourierHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), MessageHistoryResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new MessageNotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, MessageNotFound.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new CourierApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<CourierHttpResponse<RenderOutputResponse>> getContent(String messageId) {
        return getContent(messageId, null);
    }

    public CompletableFuture<CourierHttpResponse<RenderOutputResponse>> getContent(
            String messageId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("messages")
                .addPathSegment(messageId)
                .addPathSegments("output")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<CourierHttpResponse<RenderOutputResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new CourierHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), RenderOutputResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class),
                                        response));
                                return;
                            case 404:
                                future.completeExceptionally(new MessageNotFoundError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, MessageNotFound.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new CourierApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<CourierHttpResponse<Void>> archive(String requestId) {
        return archive(requestId, null);
    }

    public CompletableFuture<CourierHttpResponse<Void>> archive(String requestId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("requests")
                .addPathSegment(requestId)
                .addPathSegments("archive")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<CourierHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new CourierHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new CourierApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new CourierException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
