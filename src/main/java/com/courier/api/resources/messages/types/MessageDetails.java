/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.messages.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = MessageDetails.Builder.class)
public final class MessageDetails {
    private final String id;

    private final MessageStatus status;

    private final int enqueued;

    private final int sent;

    private final int delivered;

    private final int opened;

    private final int clicked;

    private final String recipient;

    private final String event;

    private final String notification;

    private final Optional<String> error;

    private final Optional<Reason> reason;

    private final Map<String, Object> additionalProperties;

    private MessageDetails(
            String id,
            MessageStatus status,
            int enqueued,
            int sent,
            int delivered,
            int opened,
            int clicked,
            String recipient,
            String event,
            String notification,
            Optional<String> error,
            Optional<Reason> reason,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.status = status;
        this.enqueued = enqueued;
        this.sent = sent;
        this.delivered = delivered;
        this.opened = opened;
        this.clicked = clicked;
        this.recipient = recipient;
        this.event = event;
        this.notification = notification;
        this.error = error;
        this.reason = reason;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique identifier associated with the message you wish to retrieve (results from a send).
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The current status of the message.
     */
    @JsonProperty("status")
    public MessageStatus getStatus() {
        return status;
    }

    /**
     * @return A UTC timestamp at which Courier received the message request. Stored as a millisecond representation of the Unix epoch.
     */
    @JsonProperty("enqueued")
    public int getEnqueued() {
        return enqueued;
    }

    /**
     * @return A UTC timestamp at which Courier passed the message to the Integration provider. Stored as a millisecond representation of the Unix epoch.
     */
    @JsonProperty("sent")
    public int getSent() {
        return sent;
    }

    /**
     * @return A UTC timestamp at which the Integration provider delivered the message. Stored as a millisecond representation of the Unix epoch.
     */
    @JsonProperty("delivered")
    public int getDelivered() {
        return delivered;
    }

    /**
     * @return A UTC timestamp at which the recipient opened a message for the first time. Stored as a millisecond representation of the Unix epoch.
     */
    @JsonProperty("opened")
    public int getOpened() {
        return opened;
    }

    /**
     * @return A UTC timestamp at which the recipient clicked on a tracked link for the first time. Stored as a millisecond representation of the Unix epoch.
     */
    @JsonProperty("clicked")
    public int getClicked() {
        return clicked;
    }

    /**
     * @return A unique identifier associated with the recipient of the delivered message.
     */
    @JsonProperty("recipient")
    public String getRecipient() {
        return recipient;
    }

    /**
     * @return A unique identifier associated with the event of the delivered message.
     */
    @JsonProperty("event")
    public String getEvent() {
        return event;
    }

    /**
     * @return A unique identifier associated with the notification of the delivered message.
     */
    @JsonProperty("notification")
    public String getNotification() {
        return notification;
    }

    /**
     * @return A message describing the error that occurred.
     */
    @JsonProperty("error")
    public Optional<String> getError() {
        return error;
    }

    /**
     * @return The reason for the current status of the message.
     */
    @JsonProperty("reason")
    public Optional<Reason> getReason() {
        return reason;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MessageDetails && equalTo((MessageDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MessageDetails other) {
        return id.equals(other.id)
                && status.equals(other.status)
                && enqueued == other.enqueued
                && sent == other.sent
                && delivered == other.delivered
                && opened == other.opened
                && clicked == other.clicked
                && recipient.equals(other.recipient)
                && event.equals(other.event)
                && notification.equals(other.notification)
                && error.equals(other.error)
                && reason.equals(other.reason);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.status,
                this.enqueued,
                this.sent,
                this.delivered,
                this.opened,
                this.clicked,
                this.recipient,
                this.event,
                this.notification,
                this.error,
                this.reason);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        StatusStage id(String id);

        Builder from(MessageDetails other);
    }

    public interface StatusStage {
        EnqueuedStage status(MessageStatus status);
    }

    public interface EnqueuedStage {
        SentStage enqueued(int enqueued);
    }

    public interface SentStage {
        DeliveredStage sent(int sent);
    }

    public interface DeliveredStage {
        OpenedStage delivered(int delivered);
    }

    public interface OpenedStage {
        ClickedStage opened(int opened);
    }

    public interface ClickedStage {
        RecipientStage clicked(int clicked);
    }

    public interface RecipientStage {
        EventStage recipient(String recipient);
    }

    public interface EventStage {
        NotificationStage event(String event);
    }

    public interface NotificationStage {
        _FinalStage notification(String notification);
    }

    public interface _FinalStage {
        MessageDetails build();

        _FinalStage error(Optional<String> error);

        _FinalStage error(String error);

        _FinalStage reason(Optional<Reason> reason);

        _FinalStage reason(Reason reason);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    StatusStage,
                    EnqueuedStage,
                    SentStage,
                    DeliveredStage,
                    OpenedStage,
                    ClickedStage,
                    RecipientStage,
                    EventStage,
                    NotificationStage,
                    _FinalStage {
        private String id;

        private MessageStatus status;

        private int enqueued;

        private int sent;

        private int delivered;

        private int opened;

        private int clicked;

        private String recipient;

        private String event;

        private String notification;

        private Optional<Reason> reason = Optional.empty();

        private Optional<String> error = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MessageDetails other) {
            id(other.getId());
            status(other.getStatus());
            enqueued(other.getEnqueued());
            sent(other.getSent());
            delivered(other.getDelivered());
            opened(other.getOpened());
            clicked(other.getClicked());
            recipient(other.getRecipient());
            event(other.getEvent());
            notification(other.getNotification());
            error(other.getError());
            reason(other.getReason());
            return this;
        }

        /**
         * <p>A unique identifier associated with the message you wish to retrieve (results from a send).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public StatusStage id(String id) {
            this.id = id;
            return this;
        }

        /**
         * <p>The current status of the message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("status")
        public EnqueuedStage status(MessageStatus status) {
            this.status = status;
            return this;
        }

        /**
         * <p>A UTC timestamp at which Courier received the message request. Stored as a millisecond representation of the Unix epoch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("enqueued")
        public SentStage enqueued(int enqueued) {
            this.enqueued = enqueued;
            return this;
        }

        /**
         * <p>A UTC timestamp at which Courier passed the message to the Integration provider. Stored as a millisecond representation of the Unix epoch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sent")
        public DeliveredStage sent(int sent) {
            this.sent = sent;
            return this;
        }

        /**
         * <p>A UTC timestamp at which the Integration provider delivered the message. Stored as a millisecond representation of the Unix epoch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("delivered")
        public OpenedStage delivered(int delivered) {
            this.delivered = delivered;
            return this;
        }

        /**
         * <p>A UTC timestamp at which the recipient opened a message for the first time. Stored as a millisecond representation of the Unix epoch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("opened")
        public ClickedStage opened(int opened) {
            this.opened = opened;
            return this;
        }

        /**
         * <p>A UTC timestamp at which the recipient clicked on a tracked link for the first time. Stored as a millisecond representation of the Unix epoch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("clicked")
        public RecipientStage clicked(int clicked) {
            this.clicked = clicked;
            return this;
        }

        /**
         * <p>A unique identifier associated with the recipient of the delivered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("recipient")
        public EventStage recipient(String recipient) {
            this.recipient = recipient;
            return this;
        }

        /**
         * <p>A unique identifier associated with the event of the delivered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("event")
        public NotificationStage event(String event) {
            this.event = event;
            return this;
        }

        /**
         * <p>A unique identifier associated with the notification of the delivered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("notification")
        public _FinalStage notification(String notification) {
            this.notification = notification;
            return this;
        }

        /**
         * <p>The reason for the current status of the message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage reason(Reason reason) {
            this.reason = Optional.of(reason);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "reason", nulls = Nulls.SKIP)
        public _FinalStage reason(Optional<Reason> reason) {
            this.reason = reason;
            return this;
        }

        /**
         * <p>A message describing the error that occurred.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage error(String error) {
            this.error = Optional.of(error);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public _FinalStage error(Optional<String> error) {
            this.error = error;
            return this;
        }

        @java.lang.Override
        public MessageDetails build() {
            return new MessageDetails(
                    id,
                    status,
                    enqueued,
                    sent,
                    delivered,
                    opened,
                    clicked,
                    recipient,
                    event,
                    notification,
                    error,
                    reason,
                    additionalProperties);
        }
    }
}
