/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.messages;

import com.courier.api.core.ClientOptions;
import com.courier.api.core.IdempotentRequestOptions;
import com.courier.api.core.RequestOptions;
import com.courier.api.resources.messages.requests.GetMessageHistoryRequest;
import com.courier.api.resources.messages.requests.ListMessagesRequest;
import com.courier.api.resources.messages.types.ListMessagesResponse;
import com.courier.api.resources.messages.types.MessageDetails;
import com.courier.api.resources.messages.types.MessageDetailsExtended;
import com.courier.api.resources.messages.types.MessageHistoryResponse;
import com.courier.api.resources.messages.types.RenderOutputResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncMessagesClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawMessagesClient rawClient;

    public AsyncMessagesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawMessagesClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawMessagesClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Fetch the statuses of messages you've previously sent.
     */
    public CompletableFuture<ListMessagesResponse> list() {
        return this.rawClient.list().thenApply(response -> response.body());
    }

    /**
     * Fetch the statuses of messages you've previously sent.
     */
    public CompletableFuture<ListMessagesResponse> list(ListMessagesRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    /**
     * Fetch the statuses of messages you've previously sent.
     */
    public CompletableFuture<ListMessagesResponse> list(ListMessagesRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Fetch the status of a message you've previously sent.
     */
    public CompletableFuture<MessageDetailsExtended> get(String messageId) {
        return this.rawClient.get(messageId).thenApply(response -> response.body());
    }

    /**
     * Fetch the status of a message you've previously sent.
     */
    public CompletableFuture<MessageDetailsExtended> get(String messageId, RequestOptions requestOptions) {
        return this.rawClient.get(messageId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either <code>200</code> status code for a successful cancellation or <code>409</code> status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).
     */
    public CompletableFuture<MessageDetails> cancel(String messageId) {
        return this.rawClient.cancel(messageId).thenApply(response -> response.body());
    }

    /**
     * Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either <code>200</code> status code for a successful cancellation or <code>409</code> status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).
     */
    public CompletableFuture<MessageDetails> cancel(String messageId, IdempotentRequestOptions requestOptions) {
        return this.rawClient.cancel(messageId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Fetch the array of events of a message you've previously sent.
     */
    public CompletableFuture<MessageHistoryResponse> getHistory(String messageId) {
        return this.rawClient.getHistory(messageId).thenApply(response -> response.body());
    }

    /**
     * Fetch the array of events of a message you've previously sent.
     */
    public CompletableFuture<MessageHistoryResponse> getHistory(String messageId, GetMessageHistoryRequest request) {
        return this.rawClient.getHistory(messageId, request).thenApply(response -> response.body());
    }

    /**
     * Fetch the array of events of a message you've previously sent.
     */
    public CompletableFuture<MessageHistoryResponse> getHistory(
            String messageId, GetMessageHistoryRequest request, RequestOptions requestOptions) {
        return this.rawClient.getHistory(messageId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<RenderOutputResponse> getContent(String messageId) {
        return this.rawClient.getContent(messageId).thenApply(response -> response.body());
    }

    public CompletableFuture<RenderOutputResponse> getContent(String messageId, RequestOptions requestOptions) {
        return this.rawClient.getContent(messageId, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> archive(String requestId) {
        return this.rawClient.archive(requestId).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> archive(String requestId, RequestOptions requestOptions) {
        return this.rawClient.archive(requestId, requestOptions).thenApply(response -> response.body());
    }
}
