/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.messages.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RenderedMessageContent.Builder.class)
public final class RenderedMessageContent {
    private final String html;

    private final String title;

    private final String body;

    private final String subject;

    private final String text;

    private final List<RenderedMessageBlock> blocks;

    private final Map<String, Object> additionalProperties;

    private RenderedMessageContent(
            String html,
            String title,
            String body,
            String subject,
            String text,
            List<RenderedMessageBlock> blocks,
            Map<String, Object> additionalProperties) {
        this.html = html;
        this.title = title;
        this.body = body;
        this.subject = subject;
        this.text = text;
        this.blocks = blocks;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The html content of the rendered message.
     */
    @JsonProperty("html")
    public String getHtml() {
        return html;
    }

    /**
     * @return The title of the rendered message.
     */
    @JsonProperty("title")
    public String getTitle() {
        return title;
    }

    /**
     * @return The body of the rendered message.
     */
    @JsonProperty("body")
    public String getBody() {
        return body;
    }

    /**
     * @return The subject of the rendered message.
     */
    @JsonProperty("subject")
    public String getSubject() {
        return subject;
    }

    /**
     * @return The text of the rendered message.
     */
    @JsonProperty("text")
    public String getText() {
        return text;
    }

    /**
     * @return The blocks of the rendered message.
     */
    @JsonProperty("blocks")
    public List<RenderedMessageBlock> getBlocks() {
        return blocks;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RenderedMessageContent && equalTo((RenderedMessageContent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RenderedMessageContent other) {
        return html.equals(other.html)
                && title.equals(other.title)
                && body.equals(other.body)
                && subject.equals(other.subject)
                && text.equals(other.text)
                && blocks.equals(other.blocks);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.html, this.title, this.body, this.subject, this.text, this.blocks);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static HtmlStage builder() {
        return new Builder();
    }

    public interface HtmlStage {
        /**
         * <p>The html content of the rendered message.</p>
         */
        TitleStage html(@NotNull String html);

        Builder from(RenderedMessageContent other);
    }

    public interface TitleStage {
        /**
         * <p>The title of the rendered message.</p>
         */
        BodyStage title(@NotNull String title);
    }

    public interface BodyStage {
        /**
         * <p>The body of the rendered message.</p>
         */
        SubjectStage body(@NotNull String body);
    }

    public interface SubjectStage {
        /**
         * <p>The subject of the rendered message.</p>
         */
        TextStage subject(@NotNull String subject);
    }

    public interface TextStage {
        /**
         * <p>The text of the rendered message.</p>
         */
        _FinalStage text(@NotNull String text);
    }

    public interface _FinalStage {
        RenderedMessageContent build();

        /**
         * <p>The blocks of the rendered message.</p>
         */
        _FinalStage blocks(List<RenderedMessageBlock> blocks);

        _FinalStage addBlocks(RenderedMessageBlock blocks);

        _FinalStage addAllBlocks(List<RenderedMessageBlock> blocks);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements HtmlStage, TitleStage, BodyStage, SubjectStage, TextStage, _FinalStage {
        private String html;

        private String title;

        private String body;

        private String subject;

        private String text;

        private List<RenderedMessageBlock> blocks = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RenderedMessageContent other) {
            html(other.getHtml());
            title(other.getTitle());
            body(other.getBody());
            subject(other.getSubject());
            text(other.getText());
            blocks(other.getBlocks());
            return this;
        }

        /**
         * <p>The html content of the rendered message.</p>
         * <p>The html content of the rendered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("html")
        public TitleStage html(@NotNull String html) {
            this.html = Objects.requireNonNull(html, "html must not be null");
            return this;
        }

        /**
         * <p>The title of the rendered message.</p>
         * <p>The title of the rendered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("title")
        public BodyStage title(@NotNull String title) {
            this.title = Objects.requireNonNull(title, "title must not be null");
            return this;
        }

        /**
         * <p>The body of the rendered message.</p>
         * <p>The body of the rendered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("body")
        public SubjectStage body(@NotNull String body) {
            this.body = Objects.requireNonNull(body, "body must not be null");
            return this;
        }

        /**
         * <p>The subject of the rendered message.</p>
         * <p>The subject of the rendered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("subject")
        public TextStage subject(@NotNull String subject) {
            this.subject = Objects.requireNonNull(subject, "subject must not be null");
            return this;
        }

        /**
         * <p>The text of the rendered message.</p>
         * <p>The text of the rendered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("text")
        public _FinalStage text(@NotNull String text) {
            this.text = Objects.requireNonNull(text, "text must not be null");
            return this;
        }

        /**
         * <p>The blocks of the rendered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllBlocks(List<RenderedMessageBlock> blocks) {
            if (blocks != null) {
                this.blocks.addAll(blocks);
            }
            return this;
        }

        /**
         * <p>The blocks of the rendered message.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addBlocks(RenderedMessageBlock blocks) {
            this.blocks.add(blocks);
            return this;
        }

        /**
         * <p>The blocks of the rendered message.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "blocks", nulls = Nulls.SKIP)
        public _FinalStage blocks(List<RenderedMessageBlock> blocks) {
            this.blocks.clear();
            if (blocks != null) {
                this.blocks.addAll(blocks);
            }
            return this;
        }

        @java.lang.Override
        public RenderedMessageContent build() {
            return new RenderedMessageContent(html, title, body, subject, text, blocks, additionalProperties);
        }
    }
}
