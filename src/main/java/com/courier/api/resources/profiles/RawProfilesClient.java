/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.profiles;

import com.courier.api.core.ClientOptions;
import com.courier.api.core.CourierApiException;
import com.courier.api.core.CourierException;
import com.courier.api.core.CourierHttpResponse;
import com.courier.api.core.IdempotentRequestOptions;
import com.courier.api.core.MediaTypes;
import com.courier.api.core.ObjectMappers;
import com.courier.api.core.QueryStringMapper;
import com.courier.api.core.RequestOptions;
import com.courier.api.resources.commons.errors.BadRequestError;
import com.courier.api.resources.commons.types.BadRequest;
import com.courier.api.resources.profiles.requests.GetListSubscriptionsRequest;
import com.courier.api.resources.profiles.requests.MergeProfileRequest;
import com.courier.api.resources.profiles.requests.ReplaceProfileRequest;
import com.courier.api.resources.profiles.types.DeleteListSubscriptionResponse;
import com.courier.api.resources.profiles.types.GetListSubscriptionsResponse;
import com.courier.api.resources.profiles.types.MergeProfileResponse;
import com.courier.api.resources.profiles.types.ProfileGetResponse;
import com.courier.api.resources.profiles.types.ProfileUpdateRequest;
import com.courier.api.resources.profiles.types.ReplaceProfileResponse;
import com.courier.api.resources.profiles.types.SubscribeToListsRequest;
import com.courier.api.resources.profiles.types.SubscribeToListsResponse;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawProfilesClient {
    protected final ClientOptions clientOptions;

    public RawProfilesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Returns the specified user profile.
     */
    public CourierHttpResponse<ProfileGetResponse> get(String userId) {
        return get(userId, null);
    }

    /**
     * Returns the specified user profile.
     */
    public CourierHttpResponse<ProfileGetResponse> get(String userId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("profiles")
                .addPathSegment(userId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ProfileGetResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.
     */
    public CourierHttpResponse<MergeProfileResponse> create(String userId, MergeProfileRequest request) {
        return create(userId, request, null);
    }

    /**
     * Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.
     */
    public CourierHttpResponse<MergeProfileResponse> create(
            String userId, MergeProfileRequest request, IdempotentRequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("profiles")
                .addPathSegment(userId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new CourierException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), MergeProfileResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * When using <code>PUT</code>, be sure to include all the key-value pairs required by the recipient's profile.
     * Any key-value pairs that exist in the profile but fail to be included in the <code>PUT</code> request will be
     * removed from the profile. Remember, a <code>PUT</code> update is a full replacement of the data. For partial updates,
     * use the <a href="https://www.courier.com/docs/reference/profiles/patch/">Patch</a> request.
     */
    public CourierHttpResponse<ReplaceProfileResponse> replace(String userId, ReplaceProfileRequest request) {
        return replace(userId, request, null);
    }

    /**
     * When using <code>PUT</code>, be sure to include all the key-value pairs required by the recipient's profile.
     * Any key-value pairs that exist in the profile but fail to be included in the <code>PUT</code> request will be
     * removed from the profile. Remember, a <code>PUT</code> update is a full replacement of the data. For partial updates,
     * use the <a href="https://www.courier.com/docs/reference/profiles/patch/">Patch</a> request.
     */
    public CourierHttpResponse<ReplaceProfileResponse> replace(
            String userId, ReplaceProfileRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("profiles")
                .addPathSegment(userId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new CourierException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ReplaceProfileResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    public CourierHttpResponse<Void> mergeProfile(String userId, ProfileUpdateRequest request) {
        return mergeProfile(userId, request, null);
    }

    public CourierHttpResponse<Void> mergeProfile(
            String userId, ProfileUpdateRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("profiles")
                .addPathSegment(userId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new CourierException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Deletes the specified user profile.
     */
    public CourierHttpResponse<Void> delete(String userId) {
        return delete(userId, null);
    }

    /**
     * Deletes the specified user profile.
     */
    public CourierHttpResponse<Void> delete(String userId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("profiles")
                .addPathSegment(userId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Returns the subscribed lists for a specified user.
     */
    public CourierHttpResponse<GetListSubscriptionsResponse> getListSubscriptions(String userId) {
        return getListSubscriptions(
                userId, GetListSubscriptionsRequest.builder().build());
    }

    /**
     * Returns the subscribed lists for a specified user.
     */
    public CourierHttpResponse<GetListSubscriptionsResponse> getListSubscriptions(
            String userId, GetListSubscriptionsRequest request) {
        return getListSubscriptions(userId, request, null);
    }

    /**
     * Returns the subscribed lists for a specified user.
     */
    public CourierHttpResponse<GetListSubscriptionsResponse> getListSubscriptions(
            String userId, GetListSubscriptionsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("profiles")
                .addPathSegment(userId)
                .addPathSegments("lists");
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetListSubscriptionsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Subscribes the given user to one or more lists. If the list does not exist, it will be created.
     */
    public CourierHttpResponse<SubscribeToListsResponse> subscribeToLists(
            String userId, SubscribeToListsRequest request) {
        return subscribeToLists(userId, request, null);
    }

    /**
     * Subscribes the given user to one or more lists. If the list does not exist, it will be created.
     */
    public CourierHttpResponse<SubscribeToListsResponse> subscribeToLists(
            String userId, SubscribeToListsRequest request, IdempotentRequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("profiles")
                .addPathSegment(userId)
                .addPathSegments("lists")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new CourierException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SubscribeToListsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Removes all list subscriptions for given user.
     */
    public CourierHttpResponse<DeleteListSubscriptionResponse> deleteListSubscription(String userId) {
        return deleteListSubscription(userId, null);
    }

    /**
     * Removes all list subscriptions for given user.
     */
    public CourierHttpResponse<DeleteListSubscriptionResponse> deleteListSubscription(
            String userId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("profiles")
                .addPathSegment(userId)
                .addPathSegments("lists")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), DeleteListSubscriptionResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }
}
