/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.profiles;

import com.courier.api.core.ClientOptions;
import com.courier.api.core.IdempotentRequestOptions;
import com.courier.api.core.RequestOptions;
import com.courier.api.resources.profiles.requests.GetListSubscriptionsRequest;
import com.courier.api.resources.profiles.requests.MergeProfileRequest;
import com.courier.api.resources.profiles.requests.ReplaceProfileRequest;
import com.courier.api.resources.profiles.types.DeleteListSubscriptionResponse;
import com.courier.api.resources.profiles.types.GetListSubscriptionsResponse;
import com.courier.api.resources.profiles.types.MergeProfileResponse;
import com.courier.api.resources.profiles.types.ProfileGetResponse;
import com.courier.api.resources.profiles.types.ProfileUpdateRequest;
import com.courier.api.resources.profiles.types.ReplaceProfileResponse;
import com.courier.api.resources.profiles.types.SubscribeToListsRequest;
import com.courier.api.resources.profiles.types.SubscribeToListsResponse;

public class ProfilesClient {
    protected final ClientOptions clientOptions;

    private final RawProfilesClient rawClient;

    public ProfilesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawProfilesClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawProfilesClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Returns the specified user profile.
     */
    public ProfileGetResponse get(String userId) {
        return this.rawClient.get(userId).body();
    }

    /**
     * Returns the specified user profile.
     */
    public ProfileGetResponse get(String userId, RequestOptions requestOptions) {
        return this.rawClient.get(userId, requestOptions).body();
    }

    /**
     * Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.
     */
    public MergeProfileResponse create(String userId, MergeProfileRequest request) {
        return this.rawClient.create(userId, request).body();
    }

    /**
     * Merge the supplied values with an existing profile or create a new profile if one doesn't already exist.
     */
    public MergeProfileResponse create(
            String userId, MergeProfileRequest request, IdempotentRequestOptions requestOptions) {
        return this.rawClient.create(userId, request, requestOptions).body();
    }

    /**
     * When using <code>PUT</code>, be sure to include all the key-value pairs required by the recipient's profile.
     * Any key-value pairs that exist in the profile but fail to be included in the <code>PUT</code> request will be
     * removed from the profile. Remember, a <code>PUT</code> update is a full replacement of the data. For partial updates,
     * use the <a href="https://www.courier.com/docs/reference/profiles/patch/">Patch</a> request.
     */
    public ReplaceProfileResponse replace(String userId, ReplaceProfileRequest request) {
        return this.rawClient.replace(userId, request).body();
    }

    /**
     * When using <code>PUT</code>, be sure to include all the key-value pairs required by the recipient's profile.
     * Any key-value pairs that exist in the profile but fail to be included in the <code>PUT</code> request will be
     * removed from the profile. Remember, a <code>PUT</code> update is a full replacement of the data. For partial updates,
     * use the <a href="https://www.courier.com/docs/reference/profiles/patch/">Patch</a> request.
     */
    public ReplaceProfileResponse replace(String userId, ReplaceProfileRequest request, RequestOptions requestOptions) {
        return this.rawClient.replace(userId, request, requestOptions).body();
    }

    public void mergeProfile(String userId, ProfileUpdateRequest request) {
        this.rawClient.mergeProfile(userId, request).body();
    }

    public void mergeProfile(String userId, ProfileUpdateRequest request, RequestOptions requestOptions) {
        this.rawClient.mergeProfile(userId, request, requestOptions).body();
    }

    /**
     * Deletes the specified user profile.
     */
    public void delete(String userId) {
        this.rawClient.delete(userId).body();
    }

    /**
     * Deletes the specified user profile.
     */
    public void delete(String userId, RequestOptions requestOptions) {
        this.rawClient.delete(userId, requestOptions).body();
    }

    /**
     * Returns the subscribed lists for a specified user.
     */
    public GetListSubscriptionsResponse getListSubscriptions(String userId) {
        return this.rawClient.getListSubscriptions(userId).body();
    }

    /**
     * Returns the subscribed lists for a specified user.
     */
    public GetListSubscriptionsResponse getListSubscriptions(String userId, GetListSubscriptionsRequest request) {
        return this.rawClient.getListSubscriptions(userId, request).body();
    }

    /**
     * Returns the subscribed lists for a specified user.
     */
    public GetListSubscriptionsResponse getListSubscriptions(
            String userId, GetListSubscriptionsRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .getListSubscriptions(userId, request, requestOptions)
                .body();
    }

    /**
     * Subscribes the given user to one or more lists. If the list does not exist, it will be created.
     */
    public SubscribeToListsResponse subscribeToLists(String userId, SubscribeToListsRequest request) {
        return this.rawClient.subscribeToLists(userId, request).body();
    }

    /**
     * Subscribes the given user to one or more lists. If the list does not exist, it will be created.
     */
    public SubscribeToListsResponse subscribeToLists(
            String userId, SubscribeToListsRequest request, IdempotentRequestOptions requestOptions) {
        return this.rawClient.subscribeToLists(userId, request, requestOptions).body();
    }

    /**
     * Removes all list subscriptions for given user.
     */
    public DeleteListSubscriptionResponse deleteListSubscription(String userId) {
        return this.rawClient.deleteListSubscription(userId).body();
    }

    /**
     * Removes all list subscriptions for given user.
     */
    public DeleteListSubscriptionResponse deleteListSubscription(String userId, RequestOptions requestOptions) {
        return this.rawClient.deleteListSubscription(userId, requestOptions).body();
    }
}
