/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.profiles.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Pagerduty.Builder.class)
public final class Pagerduty {
    private final Optional<String> routingKey;

    private final Optional<String> eventAction;

    private final Optional<String> severity;

    private final Optional<String> source;

    private final Map<String, Object> additionalProperties;

    private Pagerduty(
            Optional<String> routingKey,
            Optional<String> eventAction,
            Optional<String> severity,
            Optional<String> source,
            Map<String, Object> additionalProperties) {
        this.routingKey = routingKey;
        this.eventAction = eventAction;
        this.severity = severity;
        this.source = source;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("routing_key")
    public Optional<String> getRoutingKey() {
        return routingKey;
    }

    @JsonProperty("event_action")
    public Optional<String> getEventAction() {
        return eventAction;
    }

    @JsonProperty("severity")
    public Optional<String> getSeverity() {
        return severity;
    }

    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Pagerduty && equalTo((Pagerduty) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Pagerduty other) {
        return routingKey.equals(other.routingKey)
                && eventAction.equals(other.eventAction)
                && severity.equals(other.severity)
                && source.equals(other.source);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.routingKey, this.eventAction, this.severity, this.source);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> routingKey = Optional.empty();

        private Optional<String> eventAction = Optional.empty();

        private Optional<String> severity = Optional.empty();

        private Optional<String> source = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Pagerduty other) {
            routingKey(other.getRoutingKey());
            eventAction(other.getEventAction());
            severity(other.getSeverity());
            source(other.getSource());
            return this;
        }

        @JsonSetter(value = "routing_key", nulls = Nulls.SKIP)
        public Builder routingKey(Optional<String> routingKey) {
            this.routingKey = routingKey;
            return this;
        }

        public Builder routingKey(String routingKey) {
            this.routingKey = Optional.ofNullable(routingKey);
            return this;
        }

        @JsonSetter(value = "event_action", nulls = Nulls.SKIP)
        public Builder eventAction(Optional<String> eventAction) {
            this.eventAction = eventAction;
            return this;
        }

        public Builder eventAction(String eventAction) {
            this.eventAction = Optional.ofNullable(eventAction);
            return this;
        }

        @JsonSetter(value = "severity", nulls = Nulls.SKIP)
        public Builder severity(Optional<String> severity) {
            this.severity = severity;
            return this;
        }

        public Builder severity(String severity) {
            this.severity = Optional.ofNullable(severity);
            return this;
        }

        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        public Pagerduty build() {
            return new Pagerduty(routingKey, eventAction, severity, source, additionalProperties);
        }
    }
}
