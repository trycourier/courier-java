/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.profiles.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = WebhookAuthentication.Builder.class)
public final class WebhookAuthentication {
    private final WebhookAuthMode mode;

    private final Optional<String> username;

    private final Optional<String> password;

    private final Optional<String> token;

    private final Map<String, Object> additionalProperties;

    private WebhookAuthentication(
            WebhookAuthMode mode,
            Optional<String> username,
            Optional<String> password,
            Optional<String> token,
            Map<String, Object> additionalProperties) {
        this.mode = mode;
        this.username = username;
        this.password = password;
        this.token = token;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The authentication mode to use. Defaults to 'none' if not specified.
     */
    @JsonProperty("mode")
    public WebhookAuthMode getMode() {
        return mode;
    }

    /**
     * @return Username for basic authentication.
     */
    @JsonProperty("username")
    public Optional<String> getUsername() {
        return username;
    }

    /**
     * @return Password for basic authentication.
     */
    @JsonProperty("password")
    public Optional<String> getPassword() {
        return password;
    }

    /**
     * @return Token for bearer authentication.
     */
    @JsonProperty("token")
    public Optional<String> getToken() {
        return token;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof WebhookAuthentication && equalTo((WebhookAuthentication) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(WebhookAuthentication other) {
        return mode.equals(other.mode)
                && username.equals(other.username)
                && password.equals(other.password)
                && token.equals(other.token);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.mode, this.username, this.password, this.token);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ModeStage builder() {
        return new Builder();
    }

    public interface ModeStage {
        _FinalStage mode(WebhookAuthMode mode);

        Builder from(WebhookAuthentication other);
    }

    public interface _FinalStage {
        WebhookAuthentication build();

        _FinalStage username(Optional<String> username);

        _FinalStage username(String username);

        _FinalStage password(Optional<String> password);

        _FinalStage password(String password);

        _FinalStage token(Optional<String> token);

        _FinalStage token(String token);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ModeStage, _FinalStage {
        private WebhookAuthMode mode;

        private Optional<String> token = Optional.empty();

        private Optional<String> password = Optional.empty();

        private Optional<String> username = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(WebhookAuthentication other) {
            mode(other.getMode());
            username(other.getUsername());
            password(other.getPassword());
            token(other.getToken());
            return this;
        }

        /**
         * <p>The authentication mode to use. Defaults to 'none' if not specified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("mode")
        public _FinalStage mode(WebhookAuthMode mode) {
            this.mode = mode;
            return this;
        }

        /**
         * <p>Token for bearer authentication.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage token(String token) {
            this.token = Optional.of(token);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "token", nulls = Nulls.SKIP)
        public _FinalStage token(Optional<String> token) {
            this.token = token;
            return this;
        }

        /**
         * <p>Password for basic authentication.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage password(String password) {
            this.password = Optional.of(password);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "password", nulls = Nulls.SKIP)
        public _FinalStage password(Optional<String> password) {
            this.password = password;
            return this;
        }

        /**
         * <p>Username for basic authentication.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage username(String username) {
            this.username = Optional.of(username);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "username", nulls = Nulls.SKIP)
        public _FinalStage username(Optional<String> username) {
            this.username = username;
            return this;
        }

        @java.lang.Override
        public WebhookAuthentication build() {
            return new WebhookAuthentication(mode, username, password, token, additionalProperties);
        }
    }
}
