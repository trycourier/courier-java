/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.profiles.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UserProfilePatch.Builder.class)
public final class UserProfilePatch {
    private final String op;

    private final String path;

    private final String value;

    private final Map<String, Object> additionalProperties;

    private UserProfilePatch(String op, String path, String value, Map<String, Object> additionalProperties) {
        this.op = op;
        this.path = path;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The operation to perform.
     */
    @JsonProperty("op")
    public String getOp() {
        return op;
    }

    /**
     * @return The JSON path specifying the part of the profile to operate on.
     */
    @JsonProperty("path")
    public String getPath() {
        return path;
    }

    /**
     * @return The value for the operation.
     */
    @JsonProperty("value")
    public String getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserProfilePatch && equalTo((UserProfilePatch) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserProfilePatch other) {
        return op.equals(other.op) && path.equals(other.path) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.op, this.path, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OpStage builder() {
        return new Builder();
    }

    public interface OpStage {
        /**
         * <p>The operation to perform.</p>
         */
        PathStage op(@NotNull String op);

        Builder from(UserProfilePatch other);
    }

    public interface PathStage {
        /**
         * <p>The JSON path specifying the part of the profile to operate on.</p>
         */
        ValueStage path(@NotNull String path);
    }

    public interface ValueStage {
        /**
         * <p>The value for the operation.</p>
         */
        _FinalStage value(@NotNull String value);
    }

    public interface _FinalStage {
        UserProfilePatch build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OpStage, PathStage, ValueStage, _FinalStage {
        private String op;

        private String path;

        private String value;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UserProfilePatch other) {
            op(other.getOp());
            path(other.getPath());
            value(other.getValue());
            return this;
        }

        /**
         * <p>The operation to perform.</p>
         * <p>The operation to perform.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("op")
        public PathStage op(@NotNull String op) {
            this.op = Objects.requireNonNull(op, "op must not be null");
            return this;
        }

        /**
         * <p>The JSON path specifying the part of the profile to operate on.</p>
         * <p>The JSON path specifying the part of the profile to operate on.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("path")
        public ValueStage path(@NotNull String path) {
            this.path = Objects.requireNonNull(path, "path must not be null");
            return this;
        }

        /**
         * <p>The value for the operation.</p>
         * <p>The value for the operation.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("value")
        public _FinalStage value(@NotNull String value) {
            this.value = Objects.requireNonNull(value, "value must not be null");
            return this;
        }

        @java.lang.Override
        public UserProfilePatch build() {
            return new UserProfilePatch(op, path, value, additionalProperties);
        }
    }
}
