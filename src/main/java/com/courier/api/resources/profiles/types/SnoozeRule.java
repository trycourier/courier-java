/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.profiles.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SnoozeRule.Builder.class)
public final class SnoozeRule {
    private final SnoozeRuleType type;

    private final String start;

    private final String until;

    private final Map<String, Object> additionalProperties;

    private SnoozeRule(SnoozeRuleType type, String start, String until, Map<String, Object> additionalProperties) {
        this.type = type;
        this.start = start;
        this.until = until;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public SnoozeRuleType getType() {
        return type;
    }

    @JsonProperty("start")
    public String getStart() {
        return start;
    }

    @JsonProperty("until")
    public String getUntil() {
        return until;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SnoozeRule && equalTo((SnoozeRule) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SnoozeRule other) {
        return type.equals(other.type) && start.equals(other.start) && until.equals(other.until);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.type, this.start, this.until);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TypeStage builder() {
        return new Builder();
    }

    public interface TypeStage {
        StartStage type(@NotNull SnoozeRuleType type);

        Builder from(SnoozeRule other);
    }

    public interface StartStage {
        UntilStage start(@NotNull String start);
    }

    public interface UntilStage {
        _FinalStage until(@NotNull String until);
    }

    public interface _FinalStage {
        SnoozeRule build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TypeStage, StartStage, UntilStage, _FinalStage {
        private SnoozeRuleType type;

        private String start;

        private String until;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SnoozeRule other) {
            type(other.getType());
            start(other.getStart());
            until(other.getUntil());
            return this;
        }

        @java.lang.Override
        @JsonSetter("type")
        public StartStage type(@NotNull SnoozeRuleType type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("start")
        public UntilStage start(@NotNull String start) {
            this.start = Objects.requireNonNull(start, "start must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("until")
        public _FinalStage until(@NotNull String until) {
            this.until = Objects.requireNonNull(until, "until must not be null");
            return this;
        }

        @java.lang.Override
        public SnoozeRule build() {
            return new SnoozeRule(type, start, until, additionalProperties);
        }
    }
}
