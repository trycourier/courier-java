/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.templates.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = RoutingStrategy.Builder.class)
public final class RoutingStrategy {
    private final RoutingStrategyMethod method;

    private final List<String> channels;

    private final Map<String, Object> additionalProperties;

    private RoutingStrategy(
            RoutingStrategyMethod method, List<String> channels, Map<String, Object> additionalProperties) {
        this.method = method;
        this.channels = channels;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The method for selecting channels to send the message with. Value can be either 'single' or 'all'. If not provided will default to 'single'
     */
    @JsonProperty("method")
    public RoutingStrategyMethod getMethod() {
        return method;
    }

    /**
     * @return An array of valid channel identifiers (like email, push, sms, etc.) and additional routing nodes.
     */
    @JsonProperty("channels")
    public List<String> getChannels() {
        return channels;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RoutingStrategy && equalTo((RoutingStrategy) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RoutingStrategy other) {
        return method.equals(other.method) && channels.equals(other.channels);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.method, this.channels);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MethodStage builder() {
        return new Builder();
    }

    public interface MethodStage {
        _FinalStage method(RoutingStrategyMethod method);

        Builder from(RoutingStrategy other);
    }

    public interface _FinalStage {
        RoutingStrategy build();

        _FinalStage channels(List<String> channels);

        _FinalStage addChannels(String channels);

        _FinalStage addAllChannels(List<String> channels);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MethodStage, _FinalStage {
        private RoutingStrategyMethod method;

        private List<String> channels = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RoutingStrategy other) {
            method(other.getMethod());
            channels(other.getChannels());
            return this;
        }

        /**
         * <p>The method for selecting channels to send the message with. Value can be either 'single' or 'all'. If not provided will default to 'single'</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public _FinalStage method(RoutingStrategyMethod method) {
            this.method = method;
            return this;
        }

        /**
         * <p>An array of valid channel identifiers (like email, push, sms, etc.) and additional routing nodes.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllChannels(List<String> channels) {
            this.channels.addAll(channels);
            return this;
        }

        /**
         * <p>An array of valid channel identifiers (like email, push, sms, etc.) and additional routing nodes.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addChannels(String channels) {
            this.channels.add(channels);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "channels", nulls = Nulls.SKIP)
        public _FinalStage channels(List<String> channels) {
            this.channels.clear();
            this.channels.addAll(channels);
            return this;
        }

        @java.lang.Override
        public RoutingStrategy build() {
            return new RoutingStrategy(method, channels, additionalProperties);
        }
    }
}
