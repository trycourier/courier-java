/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.users.tenants.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = AddUserToSingleTenantsParamsProfile.Builder.class)
public final class AddUserToSingleTenantsParamsProfile {
    private final String title;

    private final String email;

    private final String phoneNumber;

    private final String locale;

    private final Map<String, Object> additionalFields;

    private final Map<String, Object> additionalProperties;

    private AddUserToSingleTenantsParamsProfile(
            String title,
            String email,
            String phoneNumber,
            String locale,
            Map<String, Object> additionalFields,
            Map<String, Object> additionalProperties) {
        this.title = title;
        this.email = email;
        this.phoneNumber = phoneNumber;
        this.locale = locale;
        this.additionalFields = additionalFields;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("title")
    public String getTitle() {
        return title;
    }

    /**
     * @return Email Address
     */
    @JsonProperty("email")
    public String getEmail() {
        return email;
    }

    /**
     * @return A valid phone number
     */
    @JsonProperty("phone_number")
    public String getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * @return The user's preferred ISO 639-1 language code.
     */
    @JsonProperty("locale")
    public String getLocale() {
        return locale;
    }

    /**
     * @return Additional provider specific fields may be specified.
     */
    @JsonProperty("additional_fields")
    public Map<String, Object> getAdditionalFields() {
        return additionalFields;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AddUserToSingleTenantsParamsProfile
                && equalTo((AddUserToSingleTenantsParamsProfile) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AddUserToSingleTenantsParamsProfile other) {
        return title.equals(other.title)
                && email.equals(other.email)
                && phoneNumber.equals(other.phoneNumber)
                && locale.equals(other.locale)
                && additionalFields.equals(other.additionalFields);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.title, this.email, this.phoneNumber, this.locale, this.additionalFields);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TitleStage builder() {
        return new Builder();
    }

    public interface TitleStage {
        EmailStage title(String title);

        Builder from(AddUserToSingleTenantsParamsProfile other);
    }

    public interface EmailStage {
        PhoneNumberStage email(String email);
    }

    public interface PhoneNumberStage {
        LocaleStage phoneNumber(String phoneNumber);
    }

    public interface LocaleStage {
        _FinalStage locale(String locale);
    }

    public interface _FinalStage {
        AddUserToSingleTenantsParamsProfile build();

        _FinalStage additionalFields(Map<String, Object> additionalFields);

        _FinalStage putAllAdditionalFields(Map<String, Object> additionalFields);

        _FinalStage additionalFields(String key, Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TitleStage, EmailStage, PhoneNumberStage, LocaleStage, _FinalStage {
        private String title;

        private String email;

        private String phoneNumber;

        private String locale;

        private Map<String, Object> additionalFields = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AddUserToSingleTenantsParamsProfile other) {
            title(other.getTitle());
            email(other.getEmail());
            phoneNumber(other.getPhoneNumber());
            locale(other.getLocale());
            additionalFields(other.getAdditionalFields());
            return this;
        }

        @java.lang.Override
        @JsonSetter("title")
        public EmailStage title(String title) {
            this.title = title;
            return this;
        }

        /**
         * <p>Email Address</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("email")
        public PhoneNumberStage email(String email) {
            this.email = email;
            return this;
        }

        /**
         * <p>A valid phone number</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("phone_number")
        public LocaleStage phoneNumber(String phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * <p>The user's preferred ISO 639-1 language code.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("locale")
        public _FinalStage locale(String locale) {
            this.locale = locale;
            return this;
        }

        /**
         * <p>Additional provider specific fields may be specified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage additionalFields(String key, Object value) {
            this.additionalFields.put(key, value);
            return this;
        }

        /**
         * <p>Additional provider specific fields may be specified.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllAdditionalFields(Map<String, Object> additionalFields) {
            this.additionalFields.putAll(additionalFields);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "additional_fields", nulls = Nulls.SKIP)
        public _FinalStage additionalFields(Map<String, Object> additionalFields) {
            this.additionalFields.clear();
            this.additionalFields.putAll(additionalFields);
            return this;
        }

        @java.lang.Override
        public AddUserToSingleTenantsParamsProfile build() {
            return new AddUserToSingleTenantsParamsProfile(
                    title, email, phoneNumber, locale, additionalFields, additionalProperties);
        }
    }
}
