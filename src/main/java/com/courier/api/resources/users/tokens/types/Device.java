/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.users.tokens.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Device.Builder.class)
public final class Device {
    private final Optional<String> appId;

    private final Optional<String> adId;

    private final Optional<String> deviceId;

    private final Optional<String> platform;

    private final Optional<String> manufacturer;

    private final Optional<String> model;

    private final Map<String, Object> additionalProperties;

    private Device(
            Optional<String> appId,
            Optional<String> adId,
            Optional<String> deviceId,
            Optional<String> platform,
            Optional<String> manufacturer,
            Optional<String> model,
            Map<String, Object> additionalProperties) {
        this.appId = appId;
        this.adId = adId;
        this.deviceId = deviceId;
        this.platform = platform;
        this.manufacturer = manufacturer;
        this.model = model;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Id of the application the token is used for
     */
    @JsonProperty("app_id")
    public Optional<String> getAppId() {
        return appId;
    }

    /**
     * @return Id of the advertising identifier
     */
    @JsonProperty("ad_id")
    public Optional<String> getAdId() {
        return adId;
    }

    /**
     * @return Id of the device the token is associated with
     */
    @JsonProperty("device_id")
    public Optional<String> getDeviceId() {
        return deviceId;
    }

    /**
     * @return The device platform i.e. android, ios, web
     */
    @JsonProperty("platform")
    public Optional<String> getPlatform() {
        return platform;
    }

    /**
     * @return The device manufacturer
     */
    @JsonProperty("manufacturer")
    public Optional<String> getManufacturer() {
        return manufacturer;
    }

    /**
     * @return The device model
     */
    @JsonProperty("model")
    public Optional<String> getModel() {
        return model;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Device && equalTo((Device) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Device other) {
        return appId.equals(other.appId)
                && adId.equals(other.adId)
                && deviceId.equals(other.deviceId)
                && platform.equals(other.platform)
                && manufacturer.equals(other.manufacturer)
                && model.equals(other.model);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.appId, this.adId, this.deviceId, this.platform, this.manufacturer, this.model);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> appId = Optional.empty();

        private Optional<String> adId = Optional.empty();

        private Optional<String> deviceId = Optional.empty();

        private Optional<String> platform = Optional.empty();

        private Optional<String> manufacturer = Optional.empty();

        private Optional<String> model = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Device other) {
            appId(other.getAppId());
            adId(other.getAdId());
            deviceId(other.getDeviceId());
            platform(other.getPlatform());
            manufacturer(other.getManufacturer());
            model(other.getModel());
            return this;
        }

        @JsonSetter(value = "app_id", nulls = Nulls.SKIP)
        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            this.appId = Optional.of(appId);
            return this;
        }

        @JsonSetter(value = "ad_id", nulls = Nulls.SKIP)
        public Builder adId(Optional<String> adId) {
            this.adId = adId;
            return this;
        }

        public Builder adId(String adId) {
            this.adId = Optional.of(adId);
            return this;
        }

        @JsonSetter(value = "device_id", nulls = Nulls.SKIP)
        public Builder deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            this.deviceId = Optional.of(deviceId);
            return this;
        }

        @JsonSetter(value = "platform", nulls = Nulls.SKIP)
        public Builder platform(Optional<String> platform) {
            this.platform = platform;
            return this;
        }

        public Builder platform(String platform) {
            this.platform = Optional.of(platform);
            return this;
        }

        @JsonSetter(value = "manufacturer", nulls = Nulls.SKIP)
        public Builder manufacturer(Optional<String> manufacturer) {
            this.manufacturer = manufacturer;
            return this;
        }

        public Builder manufacturer(String manufacturer) {
            this.manufacturer = Optional.of(manufacturer);
            return this;
        }

        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public Builder model(Optional<String> model) {
            this.model = model;
            return this;
        }

        public Builder model(String model) {
            this.model = Optional.of(model);
            return this;
        }

        public Device build() {
            return new Device(appId, adId, deviceId, platform, manufacturer, model, additionalProperties);
        }
    }
}
