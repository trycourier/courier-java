/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.users.tokens.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Tracking.Builder.class)
public final class Tracking {
    private final Optional<String> osVersion;

    private final Optional<String> ip;

    private final Optional<String> lat;

    private final Optional<String> long_;

    private final Map<String, Object> additionalProperties;

    private Tracking(
            Optional<String> osVersion,
            Optional<String> ip,
            Optional<String> lat,
            Optional<String> long_,
            Map<String, Object> additionalProperties) {
        this.osVersion = osVersion;
        this.ip = ip;
        this.lat = lat;
        this.long_ = long_;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The operating system version
     */
    @JsonProperty("os_version")
    public Optional<String> getOsVersion() {
        return osVersion;
    }

    /**
     * @return The IP address of the device
     */
    @JsonProperty("ip")
    public Optional<String> getIp() {
        return ip;
    }

    /**
     * @return The latitude of the device
     */
    @JsonProperty("lat")
    public Optional<String> getLat() {
        return lat;
    }

    /**
     * @return The longitude of the device
     */
    @JsonProperty("long")
    public Optional<String> getLong() {
        return long_;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Tracking && equalTo((Tracking) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Tracking other) {
        return osVersion.equals(other.osVersion)
                && ip.equals(other.ip)
                && lat.equals(other.lat)
                && long_.equals(other.long_);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.osVersion, this.ip, this.lat, this.long_);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> osVersion = Optional.empty();

        private Optional<String> ip = Optional.empty();

        private Optional<String> lat = Optional.empty();

        private Optional<String> long_ = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Tracking other) {
            osVersion(other.getOsVersion());
            ip(other.getIp());
            lat(other.getLat());
            long_(other.getLong());
            return this;
        }

        @JsonSetter(value = "os_version", nulls = Nulls.SKIP)
        public Builder osVersion(Optional<String> osVersion) {
            this.osVersion = osVersion;
            return this;
        }

        public Builder osVersion(String osVersion) {
            this.osVersion = Optional.of(osVersion);
            return this;
        }

        @JsonSetter(value = "ip", nulls = Nulls.SKIP)
        public Builder ip(Optional<String> ip) {
            this.ip = ip;
            return this;
        }

        public Builder ip(String ip) {
            this.ip = Optional.of(ip);
            return this;
        }

        @JsonSetter(value = "lat", nulls = Nulls.SKIP)
        public Builder lat(Optional<String> lat) {
            this.lat = lat;
            return this;
        }

        public Builder lat(String lat) {
            this.lat = Optional.of(lat);
            return this;
        }

        @JsonSetter(value = "long", nulls = Nulls.SKIP)
        public Builder long_(Optional<String> long_) {
            this.long_ = long_;
            return this;
        }

        public Builder long_(String long_) {
            this.long_ = Optional.of(long_);
            return this;
        }

        public Tracking build() {
            return new Tracking(osVersion, ip, lat, long_, additionalProperties);
        }
    }
}
