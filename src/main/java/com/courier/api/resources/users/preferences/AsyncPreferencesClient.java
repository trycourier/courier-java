/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.users.preferences;

import com.courier.api.core.ClientOptions;
import com.courier.api.core.RequestOptions;
import com.courier.api.resources.users.preferences.requests.UserPreferencesParams;
import com.courier.api.resources.users.preferences.requests.UserPreferencesTopicParams;
import com.courier.api.resources.users.preferences.requests.UserPreferencesUpdateParams;
import com.courier.api.resources.users.preferences.types.UserPreferencesGetResponse;
import com.courier.api.resources.users.preferences.types.UserPreferencesListResponse;
import com.courier.api.resources.users.preferences.types.UserPreferencesUpdateResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncPreferencesClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawPreferencesClient rawClient;

    public AsyncPreferencesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawPreferencesClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawPreferencesClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Fetch all user preferences.
     */
    public CompletableFuture<UserPreferencesListResponse> list(String userId) {
        return this.rawClient.list(userId).thenApply(response -> response.body());
    }

    /**
     * Fetch all user preferences.
     */
    public CompletableFuture<UserPreferencesListResponse> list(String userId, UserPreferencesParams request) {
        return this.rawClient.list(userId, request).thenApply(response -> response.body());
    }

    /**
     * Fetch all user preferences.
     */
    public CompletableFuture<UserPreferencesListResponse> list(
            String userId, UserPreferencesParams request, RequestOptions requestOptions) {
        return this.rawClient.list(userId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Fetch user preferences for a specific subscription topic.
     */
    public CompletableFuture<UserPreferencesGetResponse> get(String userId, String topicId) {
        return this.rawClient.get(userId, topicId).thenApply(response -> response.body());
    }

    /**
     * Fetch user preferences for a specific subscription topic.
     */
    public CompletableFuture<UserPreferencesGetResponse> get(
            String userId, String topicId, UserPreferencesTopicParams request) {
        return this.rawClient.get(userId, topicId, request).thenApply(response -> response.body());
    }

    /**
     * Fetch user preferences for a specific subscription topic.
     */
    public CompletableFuture<UserPreferencesGetResponse> get(
            String userId, String topicId, UserPreferencesTopicParams request, RequestOptions requestOptions) {
        return this.rawClient.get(userId, topicId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Update or Create user preferences for a specific subscription topic.
     */
    public CompletableFuture<UserPreferencesUpdateResponse> update(
            String userId, String topicId, UserPreferencesUpdateParams request) {
        return this.rawClient.update(userId, topicId, request).thenApply(response -> response.body());
    }

    /**
     * Update or Create user preferences for a specific subscription topic.
     */
    public CompletableFuture<UserPreferencesUpdateResponse> update(
            String userId, String topicId, UserPreferencesUpdateParams request, RequestOptions requestOptions) {
        return this.rawClient.update(userId, topicId, request, requestOptions).thenApply(response -> response.body());
    }
}
