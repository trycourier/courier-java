/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.users.tokens.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = PatchUserTokenOpts.Builder.class)
public final class PatchUserTokenOpts {
    private final List<PatchOperation> patch;

    private final Map<String, Object> additionalProperties;

    private PatchUserTokenOpts(List<PatchOperation> patch, Map<String, Object> additionalProperties) {
        this.patch = patch;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("patch")
    public List<PatchOperation> getPatch() {
        return patch;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PatchUserTokenOpts && equalTo((PatchUserTokenOpts) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PatchUserTokenOpts other) {
        return patch.equals(other.patch);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.patch);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<PatchOperation> patch = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PatchUserTokenOpts other) {
            patch(other.getPatch());
            return this;
        }

        @JsonSetter(value = "patch", nulls = Nulls.SKIP)
        public Builder patch(List<PatchOperation> patch) {
            this.patch.clear();
            this.patch.addAll(patch);
            return this;
        }

        public Builder addPatch(PatchOperation patch) {
            this.patch.add(patch);
            return this;
        }

        public Builder addAllPatch(List<PatchOperation> patch) {
            this.patch.addAll(patch);
            return this;
        }

        public PatchUserTokenOpts build() {
            return new PatchUserTokenOpts(patch, additionalProperties);
        }
    }
}
