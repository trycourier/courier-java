/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.brands;

import com.courier.api.core.ClientOptions;
import com.courier.api.core.CourierApiException;
import com.courier.api.core.CourierException;
import com.courier.api.core.CourierHttpResponse;
import com.courier.api.core.IdempotentRequestOptions;
import com.courier.api.core.MediaTypes;
import com.courier.api.core.ObjectMappers;
import com.courier.api.core.QueryStringMapper;
import com.courier.api.core.RequestOptions;
import com.courier.api.resources.brands.requests.BrandUpdateParameters;
import com.courier.api.resources.brands.requests.ListBrandsRequest;
import com.courier.api.resources.brands.types.Brand;
import com.courier.api.resources.brands.types.BrandParameters;
import com.courier.api.resources.brands.types.BrandsResponse;
import com.courier.api.resources.commons.errors.AlreadyExistsError;
import com.courier.api.resources.commons.errors.BadRequestError;
import com.courier.api.resources.commons.errors.ConflictError;
import com.courier.api.resources.commons.errors.PaymentRequiredError;
import com.courier.api.resources.commons.types.AlreadyExists;
import com.courier.api.resources.commons.types.BadRequest;
import com.courier.api.resources.commons.types.Conflict;
import com.courier.api.resources.commons.types.PaymentRequired;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawBrandsClient {
    protected final ClientOptions clientOptions;

    public RawBrandsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public CourierHttpResponse<Brand> create(BrandParameters request) {
        return create(request, null);
    }

    public CourierHttpResponse<Brand> create(BrandParameters request, IdempotentRequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("brands")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new CourierException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Brand.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                    case 402:
                        throw new PaymentRequiredError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PaymentRequired.class),
                                response);
                    case 409:
                        throw new AlreadyExistsError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, AlreadyExists.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Fetch a specific brand by brand ID.
     */
    public CourierHttpResponse<Brand> get(String brandId) {
        return get(brandId, null);
    }

    /**
     * Fetch a specific brand by brand ID.
     */
    public CourierHttpResponse<Brand> get(String brandId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("brands")
                .addPathSegment(brandId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Brand.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get the list of brands.
     */
    public CourierHttpResponse<BrandsResponse> list() {
        return list(ListBrandsRequest.builder().build());
    }

    /**
     * Get the list of brands.
     */
    public CourierHttpResponse<BrandsResponse> list(ListBrandsRequest request) {
        return list(request, null);
    }

    /**
     * Get the list of brands.
     */
    public CourierHttpResponse<BrandsResponse> list(ListBrandsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("brands");
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), BrandsResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Delete a brand by brand ID.
     */
    public CourierHttpResponse<Void> delete(String brandId) {
        return delete(brandId, null);
    }

    /**
     * Delete a brand by brand ID.
     */
    public CourierHttpResponse<Void> delete(String brandId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("brands")
                .addPathSegment(brandId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 409) {
                    throw new ConflictError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Conflict.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Replace an existing brand with the supplied values.
     */
    public CourierHttpResponse<Brand> replace(String brandId, BrandUpdateParameters request) {
        return replace(brandId, request, null);
    }

    /**
     * Replace an existing brand with the supplied values.
     */
    public CourierHttpResponse<Brand> replace(
            String brandId, BrandUpdateParameters request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("brands")
                .addPathSegment(brandId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new CourierException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Brand.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }
}
