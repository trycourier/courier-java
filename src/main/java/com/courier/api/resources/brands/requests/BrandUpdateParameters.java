/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.brands.requests;

import com.courier.api.core.ObjectMappers;
import com.courier.api.resources.brands.types.BrandSettings;
import com.courier.api.resources.brands.types.BrandSnippets;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BrandUpdateParameters.Builder.class)
public final class BrandUpdateParameters {
    private final String name;

    private final Optional<BrandSettings> settings;

    private final Optional<BrandSnippets> snippets;

    private final Map<String, Object> additionalProperties;

    private BrandUpdateParameters(
            String name,
            Optional<BrandSettings> settings,
            Optional<BrandSnippets> snippets,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.settings = settings;
        this.snippets = snippets;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The name of the brand.
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("settings")
    public Optional<BrandSettings> getSettings() {
        return settings;
    }

    @JsonProperty("snippets")
    public Optional<BrandSnippets> getSnippets() {
        return snippets;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BrandUpdateParameters && equalTo((BrandUpdateParameters) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BrandUpdateParameters other) {
        return name.equals(other.name) && settings.equals(other.settings) && snippets.equals(other.snippets);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.settings, this.snippets);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        _FinalStage name(String name);

        Builder from(BrandUpdateParameters other);
    }

    public interface _FinalStage {
        BrandUpdateParameters build();

        _FinalStage settings(Optional<BrandSettings> settings);

        _FinalStage settings(BrandSettings settings);

        _FinalStage snippets(Optional<BrandSnippets> snippets);

        _FinalStage snippets(BrandSnippets snippets);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, _FinalStage {
        private String name;

        private Optional<BrandSnippets> snippets = Optional.empty();

        private Optional<BrandSettings> settings = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BrandUpdateParameters other) {
            name(other.getName());
            settings(other.getSettings());
            snippets(other.getSnippets());
            return this;
        }

        /**
         * <p>The name of the brand.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public _FinalStage snippets(BrandSnippets snippets) {
            this.snippets = Optional.of(snippets);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "snippets", nulls = Nulls.SKIP)
        public _FinalStage snippets(Optional<BrandSnippets> snippets) {
            this.snippets = snippets;
            return this;
        }

        @java.lang.Override
        public _FinalStage settings(BrandSettings settings) {
            this.settings = Optional.of(settings);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "settings", nulls = Nulls.SKIP)
        public _FinalStage settings(Optional<BrandSettings> settings) {
            this.settings = settings;
            return this;
        }

        @java.lang.Override
        public BrandUpdateParameters build() {
            return new BrandUpdateParameters(name, settings, snippets, additionalProperties);
        }
    }
}
