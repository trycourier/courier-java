/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.brands.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = BrandColors.Builder.class)
public final class BrandColors {
    private final Optional<String> primary;

    private final Optional<String> secondary;

    private final Optional<String> tertiary;

    private final Map<String, Object> additionalProperties;

    private BrandColors(
            Optional<String> primary,
            Optional<String> secondary,
            Optional<String> tertiary,
            Map<String, Object> additionalProperties) {
        this.primary = primary;
        this.secondary = secondary;
        this.tertiary = tertiary;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("primary")
    public Optional<String> getPrimary() {
        return primary;
    }

    @JsonProperty("secondary")
    public Optional<String> getSecondary() {
        return secondary;
    }

    @JsonProperty("tertiary")
    public Optional<String> getTertiary() {
        return tertiary;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BrandColors && equalTo((BrandColors) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BrandColors other) {
        return primary.equals(other.primary) && secondary.equals(other.secondary) && tertiary.equals(other.tertiary);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.primary, this.secondary, this.tertiary);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> primary = Optional.empty();

        private Optional<String> secondary = Optional.empty();

        private Optional<String> tertiary = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BrandColors other) {
            primary(other.getPrimary());
            secondary(other.getSecondary());
            tertiary(other.getTertiary());
            return this;
        }

        @JsonSetter(value = "primary", nulls = Nulls.SKIP)
        public Builder primary(Optional<String> primary) {
            this.primary = primary;
            return this;
        }

        public Builder primary(String primary) {
            this.primary = Optional.of(primary);
            return this;
        }

        @JsonSetter(value = "secondary", nulls = Nulls.SKIP)
        public Builder secondary(Optional<String> secondary) {
            this.secondary = secondary;
            return this;
        }

        public Builder secondary(String secondary) {
            this.secondary = Optional.of(secondary);
            return this;
        }

        @JsonSetter(value = "tertiary", nulls = Nulls.SKIP)
        public Builder tertiary(Optional<String> tertiary) {
            this.tertiary = tertiary;
            return this;
        }

        public Builder tertiary(String tertiary) {
            this.tertiary = Optional.of(tertiary);
            return this;
        }

        public BrandColors build() {
            return new BrandColors(primary, secondary, tertiary, additionalProperties);
        }
    }
}
