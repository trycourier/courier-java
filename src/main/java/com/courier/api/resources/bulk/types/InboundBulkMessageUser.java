/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.bulk.types;

import com.courier.api.core.ObjectMappers;
import com.courier.api.resources.commons.types.RecipientPreferences;
import com.courier.api.resources.send.types.UserRecipient;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = InboundBulkMessageUser.Builder.class)
public final class InboundBulkMessageUser implements IInboundBulkMessageUser {
    private final Optional<RecipientPreferences> preferences;

    private final Optional<Object> profile;

    private final Optional<String> recipient;

    private final Optional<Object> data;

    private final Optional<UserRecipient> to;

    private final Map<String, Object> additionalProperties;

    private InboundBulkMessageUser(
            Optional<RecipientPreferences> preferences,
            Optional<Object> profile,
            Optional<String> recipient,
            Optional<Object> data,
            Optional<UserRecipient> to,
            Map<String, Object> additionalProperties) {
        this.preferences = preferences;
        this.profile = profile;
        this.recipient = recipient;
        this.data = data;
        this.to = to;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("preferences")
    @java.lang.Override
    public Optional<RecipientPreferences> getPreferences() {
        return preferences;
    }

    @JsonProperty("profile")
    @java.lang.Override
    public Optional<Object> getProfile() {
        return profile;
    }

    @JsonProperty("recipient")
    @java.lang.Override
    public Optional<String> getRecipient() {
        return recipient;
    }

    @JsonProperty("data")
    @java.lang.Override
    public Optional<Object> getData() {
        return data;
    }

    @JsonProperty("to")
    @java.lang.Override
    public Optional<UserRecipient> getTo() {
        return to;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InboundBulkMessageUser && equalTo((InboundBulkMessageUser) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InboundBulkMessageUser other) {
        return preferences.equals(other.preferences)
                && profile.equals(other.profile)
                && recipient.equals(other.recipient)
                && data.equals(other.data)
                && to.equals(other.to);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.preferences, this.profile, this.recipient, this.data, this.to);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<RecipientPreferences> preferences = Optional.empty();

        private Optional<Object> profile = Optional.empty();

        private Optional<String> recipient = Optional.empty();

        private Optional<Object> data = Optional.empty();

        private Optional<UserRecipient> to = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InboundBulkMessageUser other) {
            preferences(other.getPreferences());
            profile(other.getProfile());
            recipient(other.getRecipient());
            data(other.getData());
            to(other.getTo());
            return this;
        }

        @JsonSetter(value = "preferences", nulls = Nulls.SKIP)
        public Builder preferences(Optional<RecipientPreferences> preferences) {
            this.preferences = preferences;
            return this;
        }

        public Builder preferences(RecipientPreferences preferences) {
            this.preferences = Optional.of(preferences);
            return this;
        }

        @JsonSetter(value = "profile", nulls = Nulls.SKIP)
        public Builder profile(Optional<Object> profile) {
            this.profile = profile;
            return this;
        }

        public Builder profile(Object profile) {
            this.profile = Optional.of(profile);
            return this;
        }

        @JsonSetter(value = "recipient", nulls = Nulls.SKIP)
        public Builder recipient(Optional<String> recipient) {
            this.recipient = recipient;
            return this;
        }

        public Builder recipient(String recipient) {
            this.recipient = Optional.of(recipient);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<Object> data) {
            this.data = data;
            return this;
        }

        public Builder data(Object data) {
            this.data = Optional.of(data);
            return this;
        }

        @JsonSetter(value = "to", nulls = Nulls.SKIP)
        public Builder to(Optional<UserRecipient> to) {
            this.to = to;
            return this;
        }

        public Builder to(UserRecipient to) {
            this.to = Optional.of(to);
            return this;
        }

        public InboundBulkMessageUser build() {
            return new InboundBulkMessageUser(preferences, profile, recipient, data, to, additionalProperties);
        }
    }
}
