/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.bulk.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = InboundBulkMessage.Builder.class)
public final class InboundBulkMessage implements IInboundBulkMessageV1 {
    private final Optional<String> brand;

    private final Optional<Map<String, Object>> data;

    private final Optional<String> event;

    private final Optional<Map<String, Object>> locale;

    private final Optional<Object> override;

    private final Optional<InboundBulkMessageV2> message;

    private final Map<String, Object> additionalProperties;

    private InboundBulkMessage(
            Optional<String> brand,
            Optional<Map<String, Object>> data,
            Optional<String> event,
            Optional<Map<String, Object>> locale,
            Optional<Object> override,
            Optional<InboundBulkMessageV2> message,
            Map<String, Object> additionalProperties) {
        this.brand = brand;
        this.data = data;
        this.event = event;
        this.locale = locale;
        this.override = override;
        this.message = message;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique identifier that represents the brand that should be used
     * for rendering the notification.
     */
    @JsonProperty("brand")
    @java.lang.Override
    public Optional<String> getBrand() {
        return brand;
    }

    /**
     * @return JSON that includes any data you want to pass to a message template.
     * The data will populate the corresponding template variables.
     */
    @JsonProperty("data")
    @java.lang.Override
    public Optional<Map<String, Object>> getData() {
        return data;
    }

    @JsonProperty("event")
    @java.lang.Override
    public Optional<String> getEvent() {
        return event;
    }

    @JsonProperty("locale")
    @java.lang.Override
    public Optional<Map<String, Object>> getLocale() {
        return locale;
    }

    /**
     * @return JSON that is merged into the request sent by Courier to the provider
     * to override properties or to gain access to features in the provider
     * API that are not natively supported by Courier.
     */
    @JsonProperty("override")
    @java.lang.Override
    public Optional<Object> getOverride() {
        return override;
    }

    @JsonProperty("message")
    public Optional<InboundBulkMessageV2> getMessage() {
        return message;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InboundBulkMessage && equalTo((InboundBulkMessage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InboundBulkMessage other) {
        return brand.equals(other.brand)
                && data.equals(other.data)
                && event.equals(other.event)
                && locale.equals(other.locale)
                && override.equals(other.override)
                && message.equals(other.message);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.brand, this.data, this.event, this.locale, this.override, this.message);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> brand = Optional.empty();

        private Optional<Map<String, Object>> data = Optional.empty();

        private Optional<String> event = Optional.empty();

        private Optional<Map<String, Object>> locale = Optional.empty();

        private Optional<Object> override = Optional.empty();

        private Optional<InboundBulkMessageV2> message = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InboundBulkMessage other) {
            brand(other.getBrand());
            data(other.getData());
            event(other.getEvent());
            locale(other.getLocale());
            override(other.getOverride());
            message(other.getMessage());
            return this;
        }

        @JsonSetter(value = "brand", nulls = Nulls.SKIP)
        public Builder brand(Optional<String> brand) {
            this.brand = brand;
            return this;
        }

        public Builder brand(String brand) {
            this.brand = Optional.of(brand);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<Map<String, Object>> data) {
            this.data = data;
            return this;
        }

        public Builder data(Map<String, Object> data) {
            this.data = Optional.of(data);
            return this;
        }

        @JsonSetter(value = "event", nulls = Nulls.SKIP)
        public Builder event(Optional<String> event) {
            this.event = event;
            return this;
        }

        public Builder event(String event) {
            this.event = Optional.of(event);
            return this;
        }

        @JsonSetter(value = "locale", nulls = Nulls.SKIP)
        public Builder locale(Optional<Map<String, Object>> locale) {
            this.locale = locale;
            return this;
        }

        public Builder locale(Map<String, Object> locale) {
            this.locale = Optional.of(locale);
            return this;
        }

        @JsonSetter(value = "override", nulls = Nulls.SKIP)
        public Builder override(Optional<Object> override) {
            this.override = override;
            return this;
        }

        public Builder override(Object override) {
            this.override = Optional.of(override);
            return this;
        }

        @JsonSetter(value = "message", nulls = Nulls.SKIP)
        public Builder message(Optional<InboundBulkMessageV2> message) {
            this.message = message;
            return this;
        }

        public Builder message(InboundBulkMessageV2 message) {
            this.message = Optional.of(message);
            return this;
        }

        public InboundBulkMessage build() {
            return new InboundBulkMessage(brand, data, event, locale, override, message, additionalProperties);
        }
    }
}
