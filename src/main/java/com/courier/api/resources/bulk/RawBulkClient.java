/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.bulk;

import com.courier.api.core.ClientOptions;
import com.courier.api.core.CourierApiException;
import com.courier.api.core.CourierException;
import com.courier.api.core.CourierHttpResponse;
import com.courier.api.core.IdempotentRequestOptions;
import com.courier.api.core.MediaTypes;
import com.courier.api.core.ObjectMappers;
import com.courier.api.core.QueryStringMapper;
import com.courier.api.core.RequestOptions;
import com.courier.api.resources.bulk.requests.BulkCreateJobParams;
import com.courier.api.resources.bulk.requests.BulkGetUsersParams;
import com.courier.api.resources.bulk.types.BulkCreateJobResponse;
import com.courier.api.resources.bulk.types.BulkGetJobResponse;
import com.courier.api.resources.bulk.types.BulkGetJobUsersResponse;
import com.courier.api.resources.bulk.types.BulkIngestUsersParams;
import com.courier.api.resources.commons.errors.BadRequestError;
import com.courier.api.resources.commons.types.BadRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawBulkClient {
    protected final ClientOptions clientOptions;

    public RawBulkClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public CourierHttpResponse<BulkCreateJobResponse> createJob(BulkCreateJobParams request) {
        return createJob(request, null);
    }

    public CourierHttpResponse<BulkCreateJobResponse> createJob(
            BulkCreateJobParams request, IdempotentRequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("bulk")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new CourierException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), BulkCreateJobResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Ingest user data into a Bulk Job
     */
    public CourierHttpResponse<Void> ingestUsers(String jobId, BulkIngestUsersParams request) {
        return ingestUsers(jobId, request, null);
    }

    /**
     * Ingest user data into a Bulk Job
     */
    public CourierHttpResponse<Void> ingestUsers(
            String jobId, BulkIngestUsersParams request, IdempotentRequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("bulk")
                .addPathSegment(jobId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new CourierException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Run a bulk job
     */
    public CourierHttpResponse<Void> runJob(String jobId) {
        return runJob(jobId, null);
    }

    /**
     * Run a bulk job
     */
    public CourierHttpResponse<Void> runJob(String jobId, IdempotentRequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("bulk")
                .addPathSegment(jobId)
                .addPathSegments("run")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get a bulk job
     */
    public CourierHttpResponse<BulkGetJobResponse> getJob(String jobId) {
        return getJob(jobId, null);
    }

    /**
     * Get a bulk job
     */
    public CourierHttpResponse<BulkGetJobResponse> getJob(String jobId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("bulk")
                .addPathSegment(jobId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), BulkGetJobResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get Bulk Job Users
     */
    public CourierHttpResponse<BulkGetJobUsersResponse> getUsers(String jobId) {
        return getUsers(jobId, BulkGetUsersParams.builder().build());
    }

    /**
     * Get Bulk Job Users
     */
    public CourierHttpResponse<BulkGetJobUsersResponse> getUsers(String jobId, BulkGetUsersParams request) {
        return getUsers(jobId, request, null);
    }

    /**
     * Get Bulk Job Users
     */
    public CourierHttpResponse<BulkGetJobUsersResponse> getUsers(
            String jobId, BulkGetUsersParams request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("bulk")
                .addPathSegment(jobId)
                .addPathSegments("users");
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new CourierHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), BulkGetJobUsersResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                if (response.code() == 400) {
                    throw new BadRequestError(
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, BadRequest.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new CourierApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new CourierException("Network error executing HTTP request", e);
        }
    }
}
