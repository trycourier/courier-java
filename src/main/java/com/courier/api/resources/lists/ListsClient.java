/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.lists;

import com.courier.api.core.ClientOptions;
import com.courier.api.core.IdempotentRequestOptions;
import com.courier.api.core.RequestOptions;
import com.courier.api.resources.lists.requests.AddSubscribersToList;
import com.courier.api.resources.lists.requests.GetAllListsRequest;
import com.courier.api.resources.lists.requests.GetSubscriptionForListRequest;
import com.courier.api.resources.lists.requests.RestoreListRequest;
import com.courier.api.resources.lists.requests.SubscribeUserToListRequest;
import com.courier.api.resources.lists.requests.SubscribeUsersToListRequest;
import com.courier.api.resources.lists.types.List;
import com.courier.api.resources.lists.types.ListGetAllResponse;
import com.courier.api.resources.lists.types.ListGetSubscriptionsResponse;
import com.courier.api.resources.lists.types.ListPutParams;

public class ListsClient {
    protected final ClientOptions clientOptions;

    private final RawListsClient rawClient;

    public ListsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawListsClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawListsClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Returns all of the lists, with the ability to filter based on a pattern.
     */
    public ListGetAllResponse list() {
        return this.rawClient.list().body();
    }

    /**
     * Returns all of the lists, with the ability to filter based on a pattern.
     */
    public ListGetAllResponse list(GetAllListsRequest request) {
        return this.rawClient.list(request).body();
    }

    /**
     * Returns all of the lists, with the ability to filter based on a pattern.
     */
    public ListGetAllResponse list(GetAllListsRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).body();
    }

    /**
     * Returns a list based on the list ID provided.
     */
    public List get(String listId) {
        return this.rawClient.get(listId).body();
    }

    /**
     * Returns a list based on the list ID provided.
     */
    public List get(String listId, RequestOptions requestOptions) {
        return this.rawClient.get(listId, requestOptions).body();
    }

    /**
     * Create or replace an existing list with the supplied values.
     */
    public void update(String listId, ListPutParams request) {
        this.rawClient.update(listId, request).body();
    }

    /**
     * Create or replace an existing list with the supplied values.
     */
    public void update(String listId, ListPutParams request, RequestOptions requestOptions) {
        this.rawClient.update(listId, request, requestOptions).body();
    }

    /**
     * Delete a list by list ID.
     */
    public void delete(String listId) {
        this.rawClient.delete(listId).body();
    }

    /**
     * Delete a list by list ID.
     */
    public void delete(String listId, RequestOptions requestOptions) {
        this.rawClient.delete(listId, requestOptions).body();
    }

    /**
     * Restore a previously deleted list.
     */
    public void restore(String listId) {
        this.rawClient.restore(listId).body();
    }

    /**
     * Restore a previously deleted list.
     */
    public void restore(String listId, RestoreListRequest request) {
        this.rawClient.restore(listId, request).body();
    }

    /**
     * Restore a previously deleted list.
     */
    public void restore(String listId, RestoreListRequest request, RequestOptions requestOptions) {
        this.rawClient.restore(listId, request, requestOptions).body();
    }

    /**
     * Get the list's subscriptions.
     */
    public ListGetSubscriptionsResponse getSubscribers(String listId) {
        return this.rawClient.getSubscribers(listId).body();
    }

    /**
     * Get the list's subscriptions.
     */
    public ListGetSubscriptionsResponse getSubscribers(String listId, GetSubscriptionForListRequest request) {
        return this.rawClient.getSubscribers(listId, request).body();
    }

    /**
     * Get the list's subscriptions.
     */
    public ListGetSubscriptionsResponse getSubscribers(
            String listId, GetSubscriptionForListRequest request, RequestOptions requestOptions) {
        return this.rawClient.getSubscribers(listId, request, requestOptions).body();
    }

    /**
     * Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.
     */
    public void updateSubscribers(String listId, SubscribeUsersToListRequest request) {
        this.rawClient.updateSubscribers(listId, request).body();
    }

    /**
     * Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.
     */
    public void updateSubscribers(String listId, SubscribeUsersToListRequest request, RequestOptions requestOptions) {
        this.rawClient.updateSubscribers(listId, request, requestOptions).body();
    }

    /**
     * Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.
     */
    public void addSubscribers(String listId, AddSubscribersToList request) {
        this.rawClient.addSubscribers(listId, request).body();
    }

    /**
     * Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.
     */
    public void addSubscribers(String listId, AddSubscribersToList request, IdempotentRequestOptions requestOptions) {
        this.rawClient.addSubscribers(listId, request, requestOptions).body();
    }

    /**
     * Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).
     */
    public void subscribe(String listId, String userId) {
        this.rawClient.subscribe(listId, userId).body();
    }

    /**
     * Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).
     */
    public void subscribe(String listId, String userId, SubscribeUserToListRequest request) {
        this.rawClient.subscribe(listId, userId, request).body();
    }

    /**
     * Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).
     */
    public void subscribe(
            String listId, String userId, SubscribeUserToListRequest request, RequestOptions requestOptions) {
        this.rawClient.subscribe(listId, userId, request, requestOptions).body();
    }

    /**
     * Delete a subscription to a list by list ID and user ID.
     */
    public void unsubscribe(String listId, String userId) {
        this.rawClient.unsubscribe(listId, userId).body();
    }

    /**
     * Delete a subscription to a list by list ID and user ID.
     */
    public void unsubscribe(String listId, String userId, RequestOptions requestOptions) {
        this.rawClient.unsubscribe(listId, userId, requestOptions).body();
    }
}
