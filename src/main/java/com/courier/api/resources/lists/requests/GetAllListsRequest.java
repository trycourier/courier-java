/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.lists.requests;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = GetAllListsRequest.Builder.class)
public final class GetAllListsRequest {
    private final Optional<String> cursor;

    private final Optional<String> pattern;

    private final Map<String, Object> additionalProperties;

    private GetAllListsRequest(
            Optional<String> cursor, Optional<String> pattern, Map<String, Object> additionalProperties) {
        this.cursor = cursor;
        this.pattern = pattern;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique identifier that allows for fetching the next page of lists.
     */
    @JsonProperty("cursor")
    public Optional<String> getCursor() {
        return cursor;
    }

    /**
     * @return &quot;A pattern used to filter the list items returned. Pattern types supported: exact match on <code>list_id</code> or a pattern of one or more pattern parts. you may replace a part with either: <code>*</code> to match all parts in that position, or <code>**</code> to signify a wildcard <code>endsWith</code> pattern match.&quot;
     */
    @JsonProperty("pattern")
    public Optional<String> getPattern() {
        return pattern;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetAllListsRequest && equalTo((GetAllListsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetAllListsRequest other) {
        return cursor.equals(other.cursor) && pattern.equals(other.pattern);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cursor, this.pattern);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cursor = Optional.empty();

        private Optional<String> pattern = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetAllListsRequest other) {
            cursor(other.getCursor());
            pattern(other.getPattern());
            return this;
        }

        @JsonSetter(value = "cursor", nulls = Nulls.SKIP)
        public Builder cursor(Optional<String> cursor) {
            this.cursor = cursor;
            return this;
        }

        public Builder cursor(String cursor) {
            this.cursor = Optional.of(cursor);
            return this;
        }

        @JsonSetter(value = "pattern", nulls = Nulls.SKIP)
        public Builder pattern(Optional<String> pattern) {
            this.pattern = pattern;
            return this;
        }

        public Builder pattern(String pattern) {
            this.pattern = Optional.of(pattern);
            return this;
        }

        public GetAllListsRequest build() {
            return new GetAllListsRequest(cursor, pattern, additionalProperties);
        }
    }
}
