/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.lists.types;

import com.courier.api.core.ObjectMappers;
import com.courier.api.resources.commons.types.Paging;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ListGetAllResponse.Builder.class)
public final class ListGetAllResponse {
    private final Paging paging;

    private final java.util.List<List> items;

    private final Map<String, Object> additionalProperties;

    private ListGetAllResponse(Paging paging, java.util.List<List> items, Map<String, Object> additionalProperties) {
        this.paging = paging;
        this.items = items;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("paging")
    public Paging getPaging() {
        return paging;
    }

    @JsonProperty("items")
    public java.util.List<List> getItems() {
        return items;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListGetAllResponse && equalTo((ListGetAllResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListGetAllResponse other) {
        return paging.equals(other.paging) && items.equals(other.items);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.paging, this.items);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PagingStage builder() {
        return new Builder();
    }

    public interface PagingStage {
        _FinalStage paging(Paging paging);

        Builder from(ListGetAllResponse other);
    }

    public interface _FinalStage {
        ListGetAllResponse build();

        _FinalStage items(java.util.List<List> items);

        _FinalStage addItems(List items);

        _FinalStage addAllItems(java.util.List<List> items);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PagingStage, _FinalStage {
        private Paging paging;

        private java.util.List<List> items = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ListGetAllResponse other) {
            paging(other.getPaging());
            items(other.getItems());
            return this;
        }

        @java.lang.Override
        @JsonSetter("paging")
        public _FinalStage paging(Paging paging) {
            this.paging = paging;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllItems(java.util.List<List> items) {
            this.items.addAll(items);
            return this;
        }

        @java.lang.Override
        public _FinalStage addItems(List items) {
            this.items.add(items);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "items", nulls = Nulls.SKIP)
        public _FinalStage items(java.util.List<List> items) {
            this.items.clear();
            this.items.addAll(items);
            return this;
        }

        @java.lang.Override
        public ListGetAllResponse build() {
            return new ListGetAllResponse(paging, items, additionalProperties);
        }
    }
}
