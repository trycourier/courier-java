/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.notifications.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = NotificationChannel.Builder.class)
public final class NotificationChannel {
    private final String id;

    private final Optional<String> type;

    private final Optional<NotificationChannelContent> content;

    private final Optional<Map<String, NotificationChannelContent>> locales;

    private final Optional<String> checksum;

    private final Map<String, Object> additionalProperties;

    private NotificationChannel(
            String id,
            Optional<String> type,
            Optional<NotificationChannelContent> content,
            Optional<Map<String, NotificationChannelContent>> locales,
            Optional<String> checksum,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.type = type;
        this.content = content;
        this.locales = locales;
        this.checksum = checksum;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("content")
    public Optional<NotificationChannelContent> getContent() {
        return content;
    }

    @JsonProperty("locales")
    public Optional<Map<String, NotificationChannelContent>> getLocales() {
        return locales;
    }

    @JsonProperty("checksum")
    public Optional<String> getChecksum() {
        return checksum;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationChannel && equalTo((NotificationChannel) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationChannel other) {
        return id.equals(other.id)
                && type.equals(other.type)
                && content.equals(other.content)
                && locales.equals(other.locales)
                && checksum.equals(other.checksum);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.type, this.content, this.locales, this.checksum);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        _FinalStage id(String id);

        Builder from(NotificationChannel other);
    }

    public interface _FinalStage {
        NotificationChannel build();

        _FinalStage type(Optional<String> type);

        _FinalStage type(String type);

        _FinalStage content(Optional<NotificationChannelContent> content);

        _FinalStage content(NotificationChannelContent content);

        _FinalStage locales(Optional<Map<String, NotificationChannelContent>> locales);

        _FinalStage locales(Map<String, NotificationChannelContent> locales);

        _FinalStage checksum(Optional<String> checksum);

        _FinalStage checksum(String checksum);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, _FinalStage {
        private String id;

        private Optional<String> checksum = Optional.empty();

        private Optional<Map<String, NotificationChannelContent>> locales = Optional.empty();

        private Optional<NotificationChannelContent> content = Optional.empty();

        private Optional<String> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(NotificationChannel other) {
            id(other.getId());
            type(other.getType());
            content(other.getContent());
            locales(other.getLocales());
            checksum(other.getChecksum());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public _FinalStage id(String id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public _FinalStage checksum(String checksum) {
            this.checksum = Optional.of(checksum);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "checksum", nulls = Nulls.SKIP)
        public _FinalStage checksum(Optional<String> checksum) {
            this.checksum = checksum;
            return this;
        }

        @java.lang.Override
        public _FinalStage locales(Map<String, NotificationChannelContent> locales) {
            this.locales = Optional.of(locales);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "locales", nulls = Nulls.SKIP)
        public _FinalStage locales(Optional<Map<String, NotificationChannelContent>> locales) {
            this.locales = locales;
            return this;
        }

        @java.lang.Override
        public _FinalStage content(NotificationChannelContent content) {
            this.content = Optional.of(content);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public _FinalStage content(Optional<NotificationChannelContent> content) {
            this.content = content;
            return this;
        }

        @java.lang.Override
        public _FinalStage type(String type) {
            this.type = Optional.of(type);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public _FinalStage type(Optional<String> type) {
            this.type = type;
            return this;
        }

        @java.lang.Override
        public NotificationChannel build() {
            return new NotificationChannel(id, type, content, locales, checksum, additionalProperties);
        }
    }
}
