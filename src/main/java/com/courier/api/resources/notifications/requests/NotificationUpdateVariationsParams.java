/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.notifications.requests;

import com.courier.api.core.ObjectMappers;
import com.courier.api.resources.notifications.types.NotificationBlock;
import com.courier.api.resources.notifications.types.NotificationChannel;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = NotificationUpdateVariationsParams.Builder.class)
public final class NotificationUpdateVariationsParams {
    private final Optional<List<NotificationBlock>> blocks;

    private final Optional<List<NotificationChannel>> channels;

    private final Map<String, Object> additionalProperties;

    private NotificationUpdateVariationsParams(
            Optional<List<NotificationBlock>> blocks,
            Optional<List<NotificationChannel>> channels,
            Map<String, Object> additionalProperties) {
        this.blocks = blocks;
        this.channels = channels;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("blocks")
    public Optional<List<NotificationBlock>> getBlocks() {
        return blocks;
    }

    @JsonProperty("channels")
    public Optional<List<NotificationChannel>> getChannels() {
        return channels;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationUpdateVariationsParams
                && equalTo((NotificationUpdateVariationsParams) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationUpdateVariationsParams other) {
        return blocks.equals(other.blocks) && channels.equals(other.channels);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.blocks, this.channels);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<NotificationBlock>> blocks = Optional.empty();

        private Optional<List<NotificationChannel>> channels = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NotificationUpdateVariationsParams other) {
            blocks(other.getBlocks());
            channels(other.getChannels());
            return this;
        }

        @JsonSetter(value = "blocks", nulls = Nulls.SKIP)
        public Builder blocks(Optional<List<NotificationBlock>> blocks) {
            this.blocks = blocks;
            return this;
        }

        public Builder blocks(List<NotificationBlock> blocks) {
            this.blocks = Optional.of(blocks);
            return this;
        }

        @JsonSetter(value = "channels", nulls = Nulls.SKIP)
        public Builder channels(Optional<List<NotificationChannel>> channels) {
            this.channels = channels;
            return this;
        }

        public Builder channels(List<NotificationChannel> channels) {
            this.channels = Optional.of(channels);
            return this;
        }

        public NotificationUpdateVariationsParams build() {
            return new NotificationUpdateVariationsParams(blocks, channels, additionalProperties);
        }
    }
}
