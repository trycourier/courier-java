/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.notifications.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Check.Builder.class)
public final class Check implements IBaseCheck {
    private final String id;

    private final CheckStatus status;

    private final long updated;

    private final Map<String, Object> additionalProperties;

    private Check(String id, CheckStatus status, long updated, Map<String, Object> additionalProperties) {
        this.id = id;
        this.status = status;
        this.updated = updated;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    @java.lang.Override
    public String getId() {
        return id;
    }

    @JsonProperty("status")
    @java.lang.Override
    public CheckStatus getStatus() {
        return status;
    }

    @JsonProperty("type")
    @java.lang.Override
    public String getType() {
        return "custom";
    }

    @JsonProperty("updated")
    public long getUpdated() {
        return updated;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Check && equalTo((Check) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Check other) {
        return id.equals(other.id) && status.equals(other.status) && updated == other.updated;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.status, this.updated);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        StatusStage id(String id);

        Builder from(Check other);
    }

    public interface StatusStage {
        UpdatedStage status(CheckStatus status);
    }

    public interface UpdatedStage {
        _FinalStage updated(long updated);
    }

    public interface _FinalStage {
        Check build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, StatusStage, UpdatedStage, _FinalStage {
        private String id;

        private CheckStatus status;

        private long updated;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Check other) {
            id(other.getId());
            status(other.getStatus());
            updated(other.getUpdated());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public StatusStage id(String id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public UpdatedStage status(CheckStatus status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updated")
        public _FinalStage updated(long updated) {
            this.updated = updated;
            return this;
        }

        @java.lang.Override
        public Check build() {
            return new Check(id, status, updated, additionalProperties);
        }
    }
}
