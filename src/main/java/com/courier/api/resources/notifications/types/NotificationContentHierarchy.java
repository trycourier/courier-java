/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.notifications.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = NotificationContentHierarchy.Builder.class)
public final class NotificationContentHierarchy {
    private final Optional<String> parent;

    private final Optional<String> children;

    private final Map<String, Object> additionalProperties;

    private NotificationContentHierarchy(
            Optional<String> parent, Optional<String> children, Map<String, Object> additionalProperties) {
        this.parent = parent;
        this.children = children;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("parent")
    public Optional<String> getParent() {
        return parent;
    }

    @JsonProperty("children")
    public Optional<String> getChildren() {
        return children;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationContentHierarchy && equalTo((NotificationContentHierarchy) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationContentHierarchy other) {
        return parent.equals(other.parent) && children.equals(other.children);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.parent, this.children);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> parent = Optional.empty();

        private Optional<String> children = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NotificationContentHierarchy other) {
            parent(other.getParent());
            children(other.getChildren());
            return this;
        }

        @JsonSetter(value = "parent", nulls = Nulls.SKIP)
        public Builder parent(Optional<String> parent) {
            this.parent = parent;
            return this;
        }

        public Builder parent(String parent) {
            this.parent = Optional.of(parent);
            return this;
        }

        @JsonSetter(value = "children", nulls = Nulls.SKIP)
        public Builder children(Optional<String> children) {
            this.children = children;
            return this;
        }

        public Builder children(String children) {
            this.children = Optional.of(children);
            return this;
        }

        public NotificationContentHierarchy build() {
            return new NotificationContentHierarchy(parent, children, additionalProperties);
        }
    }
}
