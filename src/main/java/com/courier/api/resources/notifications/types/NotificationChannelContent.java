/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api.resources.notifications.types;

import com.courier.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = NotificationChannelContent.Builder.class)
public final class NotificationChannelContent {
    private final Optional<String> subject;

    private final Optional<String> title;

    private final Map<String, Object> additionalProperties;

    private NotificationChannelContent(
            Optional<String> subject, Optional<String> title, Map<String, Object> additionalProperties) {
        this.subject = subject;
        this.title = title;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("subject")
    public Optional<String> getSubject() {
        return subject;
    }

    @JsonProperty("title")
    public Optional<String> getTitle() {
        return title;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationChannelContent && equalTo((NotificationChannelContent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationChannelContent other) {
        return subject.equals(other.subject) && title.equals(other.title);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.subject, this.title);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> subject = Optional.empty();

        private Optional<String> title = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NotificationChannelContent other) {
            subject(other.getSubject());
            title(other.getTitle());
            return this;
        }

        @JsonSetter(value = "subject", nulls = Nulls.SKIP)
        public Builder subject(Optional<String> subject) {
            this.subject = subject;
            return this;
        }

        public Builder subject(String subject) {
            this.subject = Optional.of(subject);
            return this;
        }

        @JsonSetter(value = "title", nulls = Nulls.SKIP)
        public Builder title(Optional<String> title) {
            this.title = title;
            return this;
        }

        public Builder title(String title) {
            this.title = Optional.of(title);
            return this;
        }

        public NotificationChannelContent build() {
            return new NotificationChannelContent(subject, title, additionalProperties);
        }
    }
}
