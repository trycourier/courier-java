/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api;

import com.courier.api.core.ApiError;
import com.courier.api.core.ClientOptions;
import com.courier.api.core.IdempotentRequestOptions;
import com.courier.api.core.MediaTypes;
import com.courier.api.core.ObjectMappers;
import com.courier.api.core.Suppliers;
import com.courier.api.requests.SendMessageRequest;
import com.courier.api.resources.audiences.AudiencesClient;
import com.courier.api.resources.auditevents.AuditEventsClient;
import com.courier.api.resources.authtokens.AuthTokensClient;
import com.courier.api.resources.automations.AutomationsClient;
import com.courier.api.resources.brands.BrandsClient;
import com.courier.api.resources.bulk.BulkClient;
import com.courier.api.resources.lists.ListsClient;
import com.courier.api.resources.messages.MessagesClient;
import com.courier.api.resources.notifications.NotificationsClient;
import com.courier.api.resources.profiles.ProfilesClient;
import com.courier.api.resources.templates.TemplatesClient;
import com.courier.api.resources.tenants.TenantsClient;
import com.courier.api.resources.translations.TranslationsClient;
import com.courier.api.resources.users.UsersClient;
import com.courier.api.types.SendMessageResponse;
import java.io.IOException;
import java.util.function.Supplier;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class Courier {
    protected final ClientOptions clientOptions;

    protected final Supplier<AudiencesClient> audiencesClient;

    protected final Supplier<AuditEventsClient> auditEventsClient;

    protected final Supplier<AuthTokensClient> authTokensClient;

    protected final Supplier<AutomationsClient> automationsClient;

    protected final Supplier<BrandsClient> brandsClient;

    protected final Supplier<BulkClient> bulkClient;

    protected final Supplier<ListsClient> listsClient;

    protected final Supplier<MessagesClient> messagesClient;

    protected final Supplier<NotificationsClient> notificationsClient;

    protected final Supplier<ProfilesClient> profilesClient;

    protected final Supplier<TemplatesClient> templatesClient;

    protected final Supplier<TenantsClient> tenantsClient;

    protected final Supplier<TranslationsClient> translationsClient;

    protected final Supplier<UsersClient> usersClient;

    public Courier(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.audiencesClient = Suppliers.memoize(() -> new AudiencesClient(clientOptions));
        this.auditEventsClient = Suppliers.memoize(() -> new AuditEventsClient(clientOptions));
        this.authTokensClient = Suppliers.memoize(() -> new AuthTokensClient(clientOptions));
        this.automationsClient = Suppliers.memoize(() -> new AutomationsClient(clientOptions));
        this.brandsClient = Suppliers.memoize(() -> new BrandsClient(clientOptions));
        this.bulkClient = Suppliers.memoize(() -> new BulkClient(clientOptions));
        this.listsClient = Suppliers.memoize(() -> new ListsClient(clientOptions));
        this.messagesClient = Suppliers.memoize(() -> new MessagesClient(clientOptions));
        this.notificationsClient = Suppliers.memoize(() -> new NotificationsClient(clientOptions));
        this.profilesClient = Suppliers.memoize(() -> new ProfilesClient(clientOptions));
        this.templatesClient = Suppliers.memoize(() -> new TemplatesClient(clientOptions));
        this.tenantsClient = Suppliers.memoize(() -> new TenantsClient(clientOptions));
        this.translationsClient = Suppliers.memoize(() -> new TranslationsClient(clientOptions));
        this.usersClient = Suppliers.memoize(() -> new UsersClient(clientOptions));
    }

    /**
     * Use the send API to send a message to one or more recipients.
     */
    public SendMessageResponse send(SendMessageRequest request) {
        return send(request, null);
    }

    /**
     * Use the send API to send a message to one or more recipients.
     */
    public SendMessageResponse send(SendMessageRequest request, IdempotentRequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("send")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        try {
            OkHttpClient client = clientOptions.httpClient();
            if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
                client = clientOptions.httpClientWithTimeout(requestOptions);
            }
            Response response = client.newCall(okhttpRequest).execute();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(response.body().string(), SendMessageResponse.class);
            }
            throw new ApiError(
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public AudiencesClient audiences() {
        return this.audiencesClient.get();
    }

    public AuditEventsClient auditEvents() {
        return this.auditEventsClient.get();
    }

    public AuthTokensClient authTokens() {
        return this.authTokensClient.get();
    }

    public AutomationsClient automations() {
        return this.automationsClient.get();
    }

    public BrandsClient brands() {
        return this.brandsClient.get();
    }

    public BulkClient bulk() {
        return this.bulkClient.get();
    }

    public ListsClient lists() {
        return this.listsClient.get();
    }

    public MessagesClient messages() {
        return this.messagesClient.get();
    }

    public NotificationsClient notifications() {
        return this.notificationsClient.get();
    }

    public ProfilesClient profiles() {
        return this.profilesClient.get();
    }

    public TemplatesClient templates() {
        return this.templatesClient.get();
    }

    public TenantsClient tenants() {
        return this.tenantsClient.get();
    }

    public TranslationsClient translations() {
        return this.translationsClient.get();
    }

    public UsersClient users() {
        return this.usersClient.get();
    }

    public static CourierBuilder builder() {
        return new CourierBuilder();
    }
}
