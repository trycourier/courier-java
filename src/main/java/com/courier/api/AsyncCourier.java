/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.courier.api;

import com.courier.api.core.ClientOptions;
import com.courier.api.core.IdempotentRequestOptions;
import com.courier.api.core.Suppliers;
import com.courier.api.requests.SendMessageRequest;
import com.courier.api.resources.audiences.AsyncAudiencesClient;
import com.courier.api.resources.auditevents.AsyncAuditEventsClient;
import com.courier.api.resources.authtokens.AsyncAuthTokensClient;
import com.courier.api.resources.automations.AsyncAutomationsClient;
import com.courier.api.resources.brands.AsyncBrandsClient;
import com.courier.api.resources.bulk.AsyncBulkClient;
import com.courier.api.resources.inbound.AsyncInboundClient;
import com.courier.api.resources.lists.AsyncListsClient;
import com.courier.api.resources.messages.AsyncMessagesClient;
import com.courier.api.resources.notifications.AsyncNotificationsClient;
import com.courier.api.resources.profiles.AsyncProfilesClient;
import com.courier.api.resources.templates.AsyncTemplatesClient;
import com.courier.api.resources.tenants.AsyncTenantsClient;
import com.courier.api.resources.translations.AsyncTranslationsClient;
import com.courier.api.resources.users.AsyncUsersClient;
import com.courier.api.types.SendMessageResponse;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncCourier {
    protected final ClientOptions clientOptions;

    private final AsyncRawCourier rawClient;

    protected final Supplier<AsyncAudiencesClient> audiencesClient;

    protected final Supplier<AsyncAuditEventsClient> auditEventsClient;

    protected final Supplier<AsyncAuthTokensClient> authTokensClient;

    protected final Supplier<AsyncAutomationsClient> automationsClient;

    protected final Supplier<AsyncBrandsClient> brandsClient;

    protected final Supplier<AsyncBulkClient> bulkClient;

    protected final Supplier<AsyncInboundClient> inboundClient;

    protected final Supplier<AsyncListsClient> listsClient;

    protected final Supplier<AsyncMessagesClient> messagesClient;

    protected final Supplier<AsyncNotificationsClient> notificationsClient;

    protected final Supplier<AsyncProfilesClient> profilesClient;

    protected final Supplier<AsyncTemplatesClient> templatesClient;

    protected final Supplier<AsyncTenantsClient> tenantsClient;

    protected final Supplier<AsyncTranslationsClient> translationsClient;

    protected final Supplier<AsyncUsersClient> usersClient;

    public AsyncCourier(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawCourier(clientOptions);
        this.audiencesClient = Suppliers.memoize(() -> new AsyncAudiencesClient(clientOptions));
        this.auditEventsClient = Suppliers.memoize(() -> new AsyncAuditEventsClient(clientOptions));
        this.authTokensClient = Suppliers.memoize(() -> new AsyncAuthTokensClient(clientOptions));
        this.automationsClient = Suppliers.memoize(() -> new AsyncAutomationsClient(clientOptions));
        this.brandsClient = Suppliers.memoize(() -> new AsyncBrandsClient(clientOptions));
        this.bulkClient = Suppliers.memoize(() -> new AsyncBulkClient(clientOptions));
        this.inboundClient = Suppliers.memoize(() -> new AsyncInboundClient(clientOptions));
        this.listsClient = Suppliers.memoize(() -> new AsyncListsClient(clientOptions));
        this.messagesClient = Suppliers.memoize(() -> new AsyncMessagesClient(clientOptions));
        this.notificationsClient = Suppliers.memoize(() -> new AsyncNotificationsClient(clientOptions));
        this.profilesClient = Suppliers.memoize(() -> new AsyncProfilesClient(clientOptions));
        this.templatesClient = Suppliers.memoize(() -> new AsyncTemplatesClient(clientOptions));
        this.tenantsClient = Suppliers.memoize(() -> new AsyncTenantsClient(clientOptions));
        this.translationsClient = Suppliers.memoize(() -> new AsyncTranslationsClient(clientOptions));
        this.usersClient = Suppliers.memoize(() -> new AsyncUsersClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawCourier withRawResponse() {
        return this.rawClient;
    }

    /**
     * Use the send API to send a message to one or more recipients.
     */
    public CompletableFuture<SendMessageResponse> send(SendMessageRequest request) {
        return this.rawClient.send(request).thenApply(response -> response.body());
    }

    /**
     * Use the send API to send a message to one or more recipients.
     */
    public CompletableFuture<SendMessageResponse> send(
            SendMessageRequest request, IdempotentRequestOptions requestOptions) {
        return this.rawClient.send(request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncAudiencesClient audiences() {
        return this.audiencesClient.get();
    }

    public AsyncAuditEventsClient auditEvents() {
        return this.auditEventsClient.get();
    }

    public AsyncAuthTokensClient authTokens() {
        return this.authTokensClient.get();
    }

    public AsyncAutomationsClient automations() {
        return this.automationsClient.get();
    }

    public AsyncBrandsClient brands() {
        return this.brandsClient.get();
    }

    public AsyncBulkClient bulk() {
        return this.bulkClient.get();
    }

    public AsyncInboundClient inbound() {
        return this.inboundClient.get();
    }

    public AsyncListsClient lists() {
        return this.listsClient.get();
    }

    public AsyncMessagesClient messages() {
        return this.messagesClient.get();
    }

    public AsyncNotificationsClient notifications() {
        return this.notificationsClient.get();
    }

    public AsyncProfilesClient profiles() {
        return this.profilesClient.get();
    }

    public AsyncTemplatesClient templates() {
        return this.templatesClient.get();
    }

    public AsyncTenantsClient tenants() {
        return this.tenantsClient.get();
    }

    public AsyncTranslationsClient translations() {
        return this.translationsClient.get();
    }

    public AsyncUsersClient users() {
        return this.usersClient.get();
    }

    public static AsyncCourierBuilder builder() {
        return new AsyncCourierBuilder();
    }
}
